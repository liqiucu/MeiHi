USE [Test]
GO
/****** Object:  StoredProcedure [dbo].[admin_create_admin]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_create_admin]
	@RoleId		int,
	@Username	nvarchar(50),
	@Password	nvarchar(255),
	@Salt		nvarchar(255),
	@Permissions	nvarchar(max)
as
begin
	set transaction isolation level read uncommitted
	set nocount on

	declare @adminId int
	insert into Admin(username, Password, Salt)
	values(@username, @password, @salt)
	set @adminId = SCOPE_IDENTITY()

	insert into AdminRole(AdminId, RoleId) values (@adminId, @RoleId)

	insert into AdminPermission(AdminId, PermissionId)
	select @adminId, string
	from dbo.fn_split_string_by(@permissions, ',')
	where string not in(select PermissionId from RolePermission where RoleId = @RoleId)

	insert into AdminPermission(AdminId, PermissionId, Denied)
	select @adminId, PermissionId, 1
	from RolePermission 
	where RoleId = @RoleId and PermissionId not in(select string from dbo.fn_split_string_by(@permissions, ','))
end


GO
/****** Object:  StoredProcedure [dbo].[admin_create_city_agent_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_create_city_agent_user]
	@Regions		nvarchar(max),
	@Username	nvarchar(50),
	@Password	nvarchar(255),
	@Salt		nvarchar(255)
as
begin
    set transaction isolation level read uncommitted
	set nocount on
	begin tran

	declare @userId int
	insert into AgentUser(username, Password, Salt, TypeId)
	values(@username, @password, @salt, 1)
	set @userId = SCOPE_IDENTITY()

	update agentuser set AdminAgentUserId = @userid where userid = @userid

	insert into AgentUserRegion(UserId, RegionId)
	select @userId, string
	from dbo.fn_split_string_by(@regions, ',')

	declare @RoleId int
	insert into AgentRole(Name, AdminAgentUserId) values('管理员', @userId)
	set @RoleId = SCOPE_IDENTITY()

	insert into AgentUserAgentRole(userid, RoleId) values(@userId, @RoleId)

	commit tran
end


GO
/****** Object:  StoredProcedure [dbo].[admin_create_promoter]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_create_promoter]
	@AdminId	int,
	@Username	nvarchar(50),
	@Password	nvarchar(255),
	@Salt		nvarchar(255)
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @userId int
	insert into Promoter(username, Password, Salt, CreatedByAdminId)
	values(@username, @password, @salt, @AdminId)
	set @userId = SCOPE_IDENTITY()

	select @userId PromoterId
end

GO
/****** Object:  StoredProcedure [dbo].[admin_create_role]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_create_role]
	@roleId	int,
	@role	nvarchar(50),
	@permissions	nvarchar(max)
as begin     set transaction isolation level read uncommitted	set nocount on
	if @roleId is null
	begin
		insert into Role(name, ParentRoleId) 
		select @role, RoleId
		from Role 
		where Indentation = 1
		set @roleId = SCOPE_IDENTITY()
	end
	else
	begin
		update Role set Name = @role where RoleId = @roleId
		delete from RolePermission where RoleId = @roleId
	end

	insert into RolePermission(RoleId, PermissionId)
	select @roleId, t.string
	from dbo.fn_split_string_by(@permissions, ',') t
end


GO
/****** Object:  StoredProcedure [dbo].[admin_edit_admin]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_edit_admin]
	@AdminId	int,
	@RoleId		int,
	@Username	nvarchar(50),
	@Permissions	nvarchar(max)
as begin     set transaction isolation level read uncommitted	set nocount on
	update Admin
	set UserName = @Username
	where AdminId = @AdminId

	delete from AdminRole where AdminId = @AdminId
	insert into AdminRole(AdminId, RoleId) values (@AdminId, @RoleId)

	delete from AdminPermission where AdminId = @AdminId
	insert into AdminPermission(AdminId, PermissionId)
	select @AdminId, string
	from dbo.fn_split_string_by(@permissions, ',')
	where string not in(select PermissionId from RolePermission where RoleId = @RoleId)

	insert into AdminPermission(AdminId, PermissionId, Denied)
	select @AdminId, PermissionId, 1
	from RolePermission 
	where RoleId = @RoleId and PermissionId not in(select string from dbo.fn_split_string_by(@permissions, ','))
end


GO
/****** Object:  StoredProcedure [dbo].[admin_edit_city_agent]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_edit_city_agent]
	@UserId	int,
	@Regions		nvarchar(max),
	@Username	nvarchar(50)
	as begin     set transaction isolation level read uncommitted	set nocount on
	if exists(
		select 1 from dbo.fn_split_string_by(@regions, ',') 
		where string in(select RegionId from AgentUserRegion ur join AgentUser u on u.UserId = ur.UserId and u.AdminAgentUserId is null and u.UserId <> @UserId)) return

	update AgentUser
	set UserName = @Username
	where UserId = @UserId 

	delete from AgentUserRegion where UserId = @UserId
	insert into AgentUserRegion(UserId, RegionId)
	select @userId, string
	from dbo.fn_split_string_by(@regions, ',')

end



GO
/****** Object:  StoredProcedure [dbo].[admin_edit_role]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_edit_role]
	@RoleId		int,
	@Rolename	nvarchar(50),
	@Permissions	nvarchar(max)
as
begin  set transaction isolation level read uncommitted	set nocount on
	update Role
	set Name = @Rolename
	where RoleId = @RoleId

	delete from RolePermission where RoleId = @RoleId
	insert into RolePermission(RoleId, PermissionId)
	select @RoleId, string
	from dbo.fn_split_string_by(@permissions, ',')
end


GO
/****** Object:  StoredProcedure [dbo].[admin_get_admin_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_admin_list]
	@RoleId	int,
	@DateFrom	datetime,
	@DateTo		datetime,
	@SearchText	nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @table table(AdminId int, UserName nvarchar(50), Role nvarchar(50), [Permissions] nvarchar(max), DateCreated datetime)
	insert into @table(AdminId, UserName, Role, DateCreated)
	select u.AdminId, u.UserName, r.Name, u.DateCreated
	from AdminRole ur 
	join Role r on r.RoleId = ur.RoleId and r.Indentation = 2 
	join Admin u on u.AdminId = ur.AdminId
	where u.DateDeleted is null
		and (ur.RoleId = @RoleId or @RoleId is null)
		and (u.DateCreated >= @DateFrom or @DateFrom is null)
		and (u.DateCreated < DateAdd(d,1,@DateTo) or @DateTo is null)
		and (u.UserName like '%'+ @SearchText +'%' or isnull(@SearchText,'') = '')

	declare @permission_table table(AdminId int, [Group] nvarchar(50), Name nvarchar(50), RowNumber int)
	insert into @permission_table
	select *, row_number() over(partition by AdminId, [Group] order by Name)
	from
	(
		select ur.AdminId, p.[Group], p.Name
		from AdminRole ur 
		join Role r on r.RoleId = ur.RoleId and r.Indentation = 2 
		join Role r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
		join RolePermission rp on rp.RoleId = r_sub.RoleId
		join Permission p on p.PermissionId = rp.PermissionId	
		where not exists(select 1 from AdminPermission where AdminId = ur.AdminId and PermissionId = p.PermissionId and Denied = 1)
		union 
		select ap.AdminId, p.[Group], p.Name
		from AdminPermission ap
		join Permission p on p.PermissionId = ap.PermissionId
		join AdminRole ur on ap.AdminId = ur.AdminId
		join Role r on r.RoleId = ur.RoleId and r.Indentation = 2 
		where ap.Denied = 0
	) a

	update t
	set t.[Permissions] = (
		STUFF((SELECT case when RowNumber = 1 then '、；'+ p.[Group] + '：' else '、' end + p.Name
            FROM @permission_table p
            WHERE p.AdminId = t.AdminId
            FOR XML PATH('')
			), 1, 2, '')
	)
	from @table t

	update @table set [Permissions] = REPLACE([permissions],'、；','；')

	select * from @table
end


GO
/****** Object:  StoredProcedure [dbo].[admin_get_admin_permission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_admin_permission]
	@AdminId int
as
begin set transaction isolation level read uncommitted	set nocount on
	select p.PermissionId, p.[Group], p.Name
	from AdminRole ur 
	join Role r on r.RoleId = ur.RoleId
	join Role r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
	join RolePermission rp on rp.RoleId = r_sub.RoleId
	join Permission p on p.PermissionId = rp.PermissionId	
	where ur.AdminId = @AdminId and not exists(select 1 from AdminPermission where AdminId = @AdminId and PermissionId = p.PermissionId and Denied = 1)
	union 
	select p.PermissionId, p.[Group], p.Name
	from AdminPermission ap
	join Permission p on p.PermissionId = ap.PermissionId
	where ap.AdminId = @AdminId and ap.Denied = 0
end	


GO
/****** Object:  StoredProcedure [dbo].[admin_get_available_agent_root_regions]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_available_agent_root_regions]
	@UserId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select r.RegionId, r.Name, isnull(p.ProvinceId,0) ProvinceId, isnull(p.Name,'直辖市') Province, isnull(p.Sequence,0) ProvinceSequence, r.Sequence CitySequence
	from Region r
	left join Province p on p.ProvinceId = r.ProvinceId
	where r.Indentation = 1
		and not r.RegionId in(select RegionId from AgentUserRegion ur join AgentUser u on u.UserId = ur.UserId and u.AdminAgentUserId is null where (u.UserId <> @UserId or @UserId is null))
	order by p.Sequence, r.Sequence
end


GO
/****** Object:  StoredProcedure [dbo].[admin_get_business_approved_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[admin_get_business_approved_job_list]
	@CompanyId		bigint,
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on

	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from(
	select AgentUserId,AdminId,JobId, JobTypeId, JobType,Recommended,Sticky, RegionId,Region, Title, Deposit, Verified, DateCreated,DatePublished, ViewTimes, StatusId, Status, PeopleRequired, IncludeDinner, IncludeCommission, IncludeRoom, Wage, WageUnit, Gender, Term, COUNT(0) over() TotalCount, row_number() over (order by DatePublished Desc ) RowNumber 
	from
	(
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region, j.Title, j.Deposit, c.Verified, j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ActivityJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ActivityJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies 
			where j.CompanyId = @CompanyId  and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry  and j.statusid = 2  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+    r.Name Region,j.Title, 0, c.Verified,cast(0 as bit), cast(0 as bit), cast(0 as bit), '' Wage, '' WageUnit, j.Gender, '' Term, j.DateCreated, j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from CampusJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from CampusJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry  and j.statusid = 2  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky, r.RegionId,ISNULL(pr.Name + ' ','')+   r.Name Region,j.Title, j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, '' Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from InternJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from InternJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies  
			where  j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry  and j.statusid  = 2  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId, ISNULL(pr.Name + ' ','')+   r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ServiceJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ServiceJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2 
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry  and j.statusid  = 2  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+    r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from TutorJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from TutorJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry   and j.statusid  = 2  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		)x  where (x.DatePublished >= @DateFrom or @DateFrom is null  ) 
		and (x.DatePublished < @DateTo+1 or @DateTo is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
		 
	) sub
	where RowNumber between @row_from and @row_to
	
end




GO
/****** Object:  StoredProcedure [dbo].[admin_get_business_pending_approve_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_business_pending_approve_job_list]
	@CompanyId		bigint,
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on

	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from(
	select AgentUserId,AdminId,JobId, JobTypeId, JobType,Recommended,Sticky, RegionId,Region, Title, Deposit, Verified, DateCreated,DatePublished, ViewTimes, StatusId, Status, PeopleRequired, IncludeDinner, IncludeCommission, IncludeRoom, Wage, WageUnit, Gender, Term, COUNT(0) over() TotalCount, row_number() over (order by DateCreated Desc ) RowNumber 
	from
	(
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region, j.Title, j.Deposit, c.Verified, j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ActivityJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ActivityJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies 
			where j.CompanyId = @CompanyId  and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and applies.Applies < j.PeopleRequired and j.statusid = 1  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+   r.Name Region,j.Title, 0, c.Verified,cast(0 as bit), cast(0 as bit), cast(0 as bit), '' Wage, '' WageUnit, j.Gender, '' Term, j.DateCreated, j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from CampusJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from CampusJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and applies.Applies < j.PeopleRequired and j.statusid  = 1  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky, r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title, j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, '' Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from InternJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from InternJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies  
			where  j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and applies.Applies < j.PeopleRequired and j.statusid   = 1  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId, ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ServiceJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ServiceJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2 
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and applies.Applies < j.PeopleRequired and j.statusid   = 1  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId, ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from TutorJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from TutorJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and applies.Applies < j.PeopleRequired  and j.statusid   = 1  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		)x  where (x.DateCreated >= @DateFrom or @DateFrom is null  ) 
		and (x.DateCreated < @DateTo + 1 or @DateTo is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
	) sub
	where RowNumber between @row_from and @row_to
	
end



GO
/****** Object:  StoredProcedure [dbo].[admin_get_business_undercarriage_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[admin_get_business_undercarriage_job_list]
	@CompanyId		bigint,
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on

	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from(
	select AgentUserId,AdminId,JobId, JobTypeId, JobType,Recommended,Sticky, RegionId,Region, Title, Deposit, Verified, DateCreated,DatePublished, ViewTimes, StatusId, Status, PeopleRequired, IncludeDinner, IncludeCommission, IncludeRoom, Wage, WageUnit, Gender, Term, COUNT(0) over() TotalCount, row_number() over (order by DatePublished Desc ) RowNumber 
	from
	(
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region, j.Title, j.Deposit, c.Verified, j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ActivityJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ActivityJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies                     
			where j.CompanyId = @CompanyId  and j.Reptile = 0 
			and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry  or j.statusid = 3)   and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+   r.Name Region,j.Title, 0, c.Verified,cast(0 as bit), cast(0 as bit), cast(0 as bit), '' Wage, '' WageUnit, j.Gender, '' Term, j.DateCreated, j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from CampusJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from CampusJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry  or j.statusid = 3)  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky, r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title, j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, '' Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from InternJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from InternJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies  
			where  j.CompanyId = @CompanyId and j.Reptile = 0 
			and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry  or j.statusid = 3)  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+   r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ServiceJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ServiceJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2 
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry  or j.statusid = 3)  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+   r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from TutorJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId 
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from TutorJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry  or j.statusid = 3)  and j.DateDeleted is null
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		)x  where (x.DatePublished >= @DateFrom or @DateFrom is null  ) 
		and (x.DatePublished < @DateTo+1 or @DateTo is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
	) sub
	where RowNumber between @row_from and @row_to
	
end




GO
/****** Object:  StoredProcedure [dbo].[admin_get_city_agent_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_city_agent_list]
	@DateFrom	datetime,
	@DateTo		datetime,
	@SearchText	nvarchar(50)
as
begin
	declare @table table(UserId int, UserName nvarchar(50), Regions nvarchar(max), DateCreated datetime)
	insert into @table(UserId, UserName, DateCreated)
	select u.UserId, u.UserName, u.DateCreated
	from AgentUser u 
	where u.TypeId = 1 and u.DateDeleted is null
		and (u.DateCreated >= @DateFrom or @DateFrom is null)
		and (u.DateCreated < DateAdd(d,1,@DateTo) or @DateTo is null)
		and (u.UserName like '%'+ @SearchText +'%' or isnull(@SearchText,'') = '')

	declare @region_table table(UserId int, Province nvarchar(50), Name nvarchar(50), RowNumber int)
	insert into @region_table
	select *, row_number() over(partition by UserId, Province order by Name)
	from
	(
		select ur.UserId, isnull(p.Name,'直辖市') Province, r.Name
		from AgentUserRegion ur 
		join AgentUser u on u.UserId = ur.UserId
		join Region r on r.RegionId = ur.RegionId
		left join Province p  on p.ProvinceId = r.ProvinceId
		where u.TypeId = 1 and u.DateDeleted is null
	) a
	update t
	set t.Regions = (
		STUFF((SELECT case when RowNumber = 1 then '、；'+ p.Province + '：' else '、' end + p.Name
            FROM @region_table p
            WHERE p.UserId = t.UserId
            FOR XML PATH('')
			), 1, 2, '')
	)
	from @table t

	update @table set Regions = REPLACE(Regions,'、；','；')

	select * from @table
end

-- [agent_get_agent_user_list] 10, null, null, null,  null






GO
/****** Object:  StoredProcedure [dbo].[admin_get_enterprise_info]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[admin_get_enterprise_info]
	@UserId int,
	@CompanyName	nvarchar(50),
	@Mobile nvarchar(50),
	@DateFrom datetime,
	@DateTo datetime,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Verified bit,
	@Balance bit,
	@Status bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize
	
	select *
	from
	(
		select c.CompanyId,c.RegionId,r.Name RegionName, c.Mobile,c.Email ,c.Status,isnull(c.FullName,'') FullName, isnull(c.Address,'') Address, isnull(c.Introduction,'') Introduction, 
			isnull(c.LicensePhoto,'') LicensePhoto, isnull(c.AgentPhoto,'') AgentPhoto, c.Verified, c.Balance, c.VoiceAlert, c.Vibrate,c.DateCreated,c.AgentUserId,
			COUNT(0) over() TotalCount,row_number() over (order by c.DateCreated desc) as [row]
		from Company c
		left join Region r on r.RegionId = c.RegionId
		where (c.RegionId =  @RegionId or @RegionId is null or c.RegionId is null)
			and (c.Mobile like  '%'+@Mobile+'%' or @Mobile is null ) 
			and (c.FullName like '%'+@CompanyName+'%' or @CompanyName is null )
			and (c.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null or c.RegionId is null) 
			and (c.Verified =  @Verified or @Verified is null )
			and ((@Balance = 1 and c.Balance > 0) or @Balance is null or (@Balance = 0 and c.Balance = 0))
			and (c.Status =  @Status or @Status is null )
			and (c.DateCreated >= @DateFrom or @DateFrom is null  ) 
			and (c.DateCreated < @DateTo+1 or @DateTo is null )
	) sub
	where sub.row between @row_from and @row_to
	order by [row]
end

GO
/****** Object:  StoredProcedure [dbo].[admin_get_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[admin_get_job_list]
	@UserId int,
	@DateFrom datetime,
	@DateTo datetime,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select * 
	from( 
		select *, COUNT(0) over() TotalCount, row_number() over (order by LastApplyDate Desc ,JobId ) RowNumber 
		from(
			select  aj.JobId,aj.CompanyId,c.FullName CompanyName,Title,JobTypeId,j.Name JobTypeName,aj.StatusId,r.RegionId,r.Name RegionName,DatePublished,aj.DateDeleted,aj.DateCreated,aj.DateModified,a.LastApplyDate 
			from ActivityJob aj ,Region r,JobType j ,Company c ,
			(select x.JobId ,y.ApplyCount,LastApplyDate from 
			(select * ,max(DateCreated) over(partition by JobId) as LastApplyDate from ActivityJobApply) x ,
			(select JobId, count(JobId) as ApplyCount from ActivityJobApply where statusId =1  group by JobId) y
			where x.DateCreated = LastApplyDate and y.jobid = x.JobId ) a 
			where  c.CompanyId = aj.CompanyId and a.JobId = aj.JobId and r.RegionId = aj.RegionId and j.TypeId = aj.JobTypeId and aj.Reptile = '0' 
			union all 
			select  cj.JobId,cj.CompanyId,c.FullName CompanyName,Title,JobTypeId,j.Name JobTypeName,cj.StatusId,r.RegionId,r.Name RegionName,DatePublished,cj.DateDeleted,cj.DateCreated,cj.DateModified,a.LastApplyDate 
			from CampusJob cj ,Region r,JobType j ,Company c ,
			(select x.JobId ,y.ApplyCount,LastApplyDate from 
			(select * ,max(DateCreated) over(partition by JobId) as LastApplyDate from CampusJobApply) x ,
			(select JobId, count(JobId) as ApplyCount from CampusJobApply where statusId =1  group by JobId) y
			where x.DateCreated = LastApplyDate and y.jobid = x.JobId) a  
			where  c.CompanyId = cj.CompanyId and a.JobId = cj.JobId and r.RegionId = cj.RegionId and j.TypeId = cj.JobTypeId  and cj.Reptile = '0' 
			union all
			select  ij.JobId,ij.CompanyId,c.FullName CompanyName,Title,JobTypeId,j.Name JobTypeName,ij.StatusId,r.RegionId,r.Name RegionName,DatePublished,ij.DateDeleted,ij.DateCreated,ij.DateModified,a.LastApplyDate 
			from InternJob ij ,Region r,JobType j ,Company c ,
			(select x.JobId ,y.ApplyCount,LastApplyDate from 
			(select * ,max(DateCreated) over(partition by JobId) as LastApplyDate from InternJobApply) x ,
			(select JobId, count(JobId) as ApplyCount from InternJobApply where statusId =1  group by JobId) y
			where x.DateCreated = LastApplyDate and y.jobid = x.JobId ) a  
			where  c.CompanyId = ij.CompanyId and a.JobId = ij.JobId and r.RegionId = ij.RegionId and j.TypeId = ij.JobTypeId  and ij.Reptile = '0' 
			union all 
			select  sj.JobId,sj.CompanyId,c.FullName CompanyName,Title,JobTypeId,j.Name JobTypeName,sj.StatusId,r.RegionId,r.Name RegionName,DatePublished,sj.DateDeleted,sj.DateCreated,sj.DateModified,a.LastApplyDate 
			from ServiceJob sj ,Region r,JobType j ,Company c ,
			(select x.JobId ,y.ApplyCount,LastApplyDate from 
			(select * ,max(DateCreated) over(partition by JobId) as LastApplyDate from ServiceJobApply) x ,
			(select JobId, count(JobId) as ApplyCount from ServiceJobApply where statusId =1  group by JobId) y
			where x.DateCreated = LastApplyDate and y.jobid = x.JobId ) a  
			where  c.CompanyId = sj.CompanyId and a.JobId = sj.JobId and r.RegionId = sj.RegionId and j.TypeId = sj.JobTypeId  and sj.Reptile = '0' 
			union all 
			select  tj.JobId,tj.CompanyId,c.FullName CompanyName,Title,JobTypeId,j.Name JobTypeName,tj.StatusId,r.RegionId,r.Name RegionName,DatePublished,tj.DateDeleted,tj.DateCreated,tj.DateModified,a.LastApplyDate 
			from TutorJob tj ,Region r,JobType j ,Company c ,
			(select x.JobId ,y.ApplyCount,LastApplyDate from 
			(select * ,max(DateCreated) over(partition by JobId) as LastApplyDate from TutorJobApply) x ,
			(select JobId, count(JobId) as ApplyCount from TutorJobApply where statusId =1  group by JobId) y
			where x.DateCreated = LastApplyDate and y.jobid = x.JobId) a  
			where  c.CompanyId = tj.CompanyId and a.JobId = tj.JobId and r.RegionId = tj.RegionId and j.TypeId = tj.JobTypeId  and tj.Reptile = '0' 
		
		) x where (x.LastApplyDate >= @DateFrom or @DateFrom is null  ) 
		and (x.LastApplyDate < @DateTo+1 or @DateTo is null )
		 and x.DateDeleted is null
	) sub 
	where RowNumber between @row_from and @row_to
	order by LastApplyDate Desc ,JobId 
end



GO
/****** Object:  StoredProcedure [dbo].[admin_get_job_list_approved]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_job_list_approved]
	@CompanyId		bigint,
	@Keyword		nvarchar(50),
	@JobTypeId		int
as
begin set transaction isolation level read uncommitted	set nocount on
	set @Keyword = isnull(nullif(@Keyword,''),'""')
	select JobId, j.JobTypeId, t.Name JobType, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status,
		j.PeopleRequired, applies.Applies, ISNULL(pr.Name + ' ','')+ r.Name RegionName, r.RegionId, co.FullName CompanyName, j.Title
	from ActivityJob j 
	join JobStatus s on s.StatusId = j.StatusId
	join Company co on co.CompanyId = j.CompanyId
	join Region r on r.RegionId = j.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	join JobType t on t.TypeId = j.JobTypeId
	outer apply(
			select COUNT(0) Applies
			from ActivityJobApply a 
			where a.JobId = j.JobId and a.StatusId = 2
		) applies
	where j.StatusId = 2 
		and (j.CompanyId = @CompanyId or @CompanyId is null)
		and (j.JobTypeId = @JobTypeId or @JobTypeId is null)
		and (FREETEXT(j.Title, @Keyword) or @Keyword = '""')
	union all
	select JobId, j.JobTypeId, t.Name JobType, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status,j.PeopleRequired, applies.Applies,
		ISNULL(pr.Name + ' ','')+ r.Name RegionName, r.RegionId, co.FullName CompanyName, j.Title
	from CampusJob j 
	join JobStatus s on s.StatusId = j.StatusId
	join Company co on co.CompanyId = j.CompanyId
	join Region r on r.RegionId = j.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	join JobType t on t.TypeId = j.JobTypeId
	outer apply(
			select COUNT(0) Applies
			from CampusJobApply a 
			where a.JobId = j.JobId and a.StatusId = 2
		) applies
	where j.StatusId = 2 
		and (j.CompanyId = @CompanyId or @CompanyId is null)
		and (j.JobTypeId = @JobTypeId or @JobTypeId is null)
		and (FREETEXT(j.Title, @Keyword) or @Keyword = '""')
	union all
	select JobId, j.JobTypeId, t.Name JobType, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status,j.PeopleRequired, applies.Applies,
		ISNULL(pr.Name + ' ','')+ r.Name RegionName, r.RegionId, co.FullName CompanyName, j.Title
	from InternJob j 
	join JobStatus s on s.StatusId = j.StatusId
	join Company co on co.CompanyId = j.CompanyId
	join Region r on r.RegionId = j.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	join JobType t on t.TypeId = j.JobTypeId
	outer apply(
			select COUNT(0) Applies
			from InternJobApply a 
			where a.JobId = j.JobId and a.StatusId = 2
		) applies
	where j.StatusId = 2 
		and (j.CompanyId = @CompanyId or @CompanyId is null)
		and (j.JobTypeId = @JobTypeId or @JobTypeId is null)
		and (FREETEXT(j.Title, @Keyword) or @Keyword = '""')
	union all
	select JobId, j.JobTypeId, t.Name JobType, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status,j.PeopleRequired, applies.Applies,
		ISNULL(pr.Name + ' ','')+ r.Name RegionName, r.RegionId, co.FullName CompanyName, j.Title
	from ServiceJob j 
	join JobStatus s on s.StatusId = j.StatusId
	join Company co on co.CompanyId = j.CompanyId
	join Region r on r.RegionId = j.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	join JobType t on t.TypeId = j.JobTypeId
	outer apply(
			select COUNT(0) Applies
			from ServiceJobApply a 
			where a.JobId = j.JobId and a.StatusId = 2
		) applies
	where j.StatusId = 2 
		and (j.CompanyId = @CompanyId or @CompanyId is null)
		and (j.JobTypeId = @JobTypeId or @JobTypeId is null)
		and (FREETEXT(j.Title, @Keyword) or @Keyword = '""')
	union all
	select JobId, j.JobTypeId, t.Name JobType, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status,j.PeopleRequired, applies.Applies,
		ISNULL(pr.Name + ' ','')+ r.Name RegionName, r.RegionId, co.FullName CompanyName, j.Title
	from TutorJob j 
	join JobStatus s on s.StatusId = j.StatusId
	join Company co on co.CompanyId = j.CompanyId
	join Region r on r.RegionId = j.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	join JobType t on t.TypeId = j.JobTypeId
	outer apply(
			select COUNT(0) Applies
			from TutorJobApply a 
			where a.JobId = j.JobId and a.StatusId = 2
		) applies
	where j.StatusId = 2 
		and (j.CompanyId = @CompanyId or @CompanyId is null)
		and (j.JobTypeId = @JobTypeId or @JobTypeId is null)
		and (FREETEXT(j.Title, @Keyword) or @Keyword = '""')
	order by DateCreated desc
end


-- admin_get_job_list_approved 1, null,1


GO
/****** Object:  StoredProcedure [dbo].[admin_get_job_list_new]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_job_list_new]
as
begin set transaction isolation level read uncommitted	set nocount on
	select JobId, j.JobTypeId, t.Name JobType, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status,
		j.PeopleRequired, ISNULL(pr.Name + ' ','')+ r.Name RegionName, r.RegionId, co.FullName CompanyName, j.Title
	from ActivityJob j 
	join JobStatus s on s.StatusId = j.StatusId
	join Company co on co.CompanyId = j.CompanyId
	join Region r on r.RegionId = j.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	join JobType t on t.TypeId = j.JobTypeId
	where j.StatusId = 1
	union all
	select JobId, j.JobTypeId, t.Name JobType, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status,j.PeopleRequired, 
		ISNULL(pr.Name + ' ','')+ r.Name RegionName, r.RegionId, co.FullName CompanyName, j.Title
	from CampusJob j 
	join JobStatus s on s.StatusId = j.StatusId
	join Company co on co.CompanyId = j.CompanyId
	join Region r on r.RegionId = j.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	join JobType t on t.TypeId = j.JobTypeId
	where j.StatusId = 1
	union all
	select JobId, j.JobTypeId, t.Name JobType, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status,j.PeopleRequired, 
		ISNULL(pr.Name + ' ','')+ r.Name RegionName, r.RegionId, co.FullName CompanyName, j.Title
	from InternJob j 
	join JobStatus s on s.StatusId = j.StatusId
	join Company co on co.CompanyId = j.CompanyId
	join Region r on r.RegionId = j.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	join JobType t on t.TypeId = j.JobTypeId
	where j.StatusId = 1
	union all
	select JobId, j.JobTypeId, t.Name JobType, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status,j.PeopleRequired, 
		ISNULL(pr.Name + ' ','')+ r.Name RegionName, r.RegionId, co.FullName CompanyName, j.Title
	from ServiceJob j 
	join JobStatus s on s.StatusId = j.StatusId
	join Company co on co.CompanyId = j.CompanyId
	join Region r on r.RegionId = j.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	join JobType t on t.TypeId = j.JobTypeId
	where j.StatusId = 1
	union all
	select JobId, j.JobTypeId, t.Name JobType, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status,j.PeopleRequired, 
		ISNULL(pr.Name + ' ','')+ r.Name RegionName, r.RegionId, co.FullName CompanyName, j.Title
	from TutorJob j 
	join JobStatus s on s.StatusId = j.StatusId
	join Company co on co.CompanyId = j.CompanyId
	join Region r on r.RegionId = j.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	join JobType t on t.TypeId = j.JobTypeId
	where j.StatusId = 1
	order by DateCreated desc
end



GO
/****** Object:  StoredProcedure [dbo].[admin_get_marketer_stats]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_marketer_stats]
as
begin set transaction isolation level read uncommitted	set nocount on
	select m.Name, dateadd(d,0,datediff(d,0,r.DateCreated)) ImportDate, count(0) Total
	from Marketer m
	join MarketerRegister r on r.MarketerId = m.MarketerId
	group by m.Name, dateadd(d,0,datediff(d,0,r.DateCreated))
	order by dateadd(d,0,datediff(d,0,r.DateCreated)) desc, m.Name
end




GO
/****** Object:  StoredProcedure [dbo].[admin_get_normal_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[admin_get_normal_job_list]
	@CompanyName nvarchar(50),
	@Mobile nvarchar(50),
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select * 
	from( 
		select *, COUNT(0) over() TotalCount, row_number() over (order by DatePublished Desc ,JobId ) RowNumber 
		from(
			select  aj.datefrom,aj.dateexpiry, 
			aj.JobId,aj.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,aj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,aj.DateDeleted,aj.DateCreated,aj.DateModified,aj.Recommended,aj.Sticky ,aj.AgentUserId,aj.AdminId
			from ActivityJob aj 
			join Region r on r.RegionId = aj.RegionId
			join JobType j on j.TypeId = aj.JobTypeId 
			left join Company c on c.CompanyId = aj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from ActivityJobApply aa 
				where aa.JobId = aj.JobId and aa.StatusId = 2
			) applies 
			where aj.Reptile = 0 and dateadd(d,0,datediff(d,0,getdate())) between aj.datefrom and aj.dateexpiry  and aj.statusid = 2
			and aj.DateDeleted is null and (aj.adminid is not null or aj.agentuserid is not null)
			and (aj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and aj.Disabled = 0 
			union all 
			select  cj.datefrom,cj.dateexpiry,
			cj.JobId,cj.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,cj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,cj.DateDeleted,cj.DateCreated,cj.DateModified,cj.Recommended,cj.Sticky ,cj.AgentUserId,cj.AdminId
			from CampusJob cj 
			join Region r on r.RegionId = cj.RegionId
			join JobType j on j.TypeId = cj.JobTypeId 
			left join Company c on c.CompanyId = cj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from CampusJobApply aa 
				where aa.JobId = cj.JobId and aa.StatusId = 2
			) applies
			where  cj.Reptile = 0 and dateadd(d,0,datediff(d,0,getdate())) between cj.datefrom and cj.dateexpiry and  cj.statusid = 2
			and cj.DateDeleted is null and (cj.agentuserid is not null or cj.adminid is not null)
			and (cj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and cj.Disabled = 0 
			union all
			select  ij.datefrom,ij.dateexpiry,
			ij.JobId,ij.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,ij.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,ij.DateDeleted,ij.DateCreated,ij.DateModified,ij.Recommended,ij.Sticky ,ij.AgentUserId,ij.AdminId
			from InternJob ij 
			join Region r on r.RegionId = ij.RegionId
			join JobType j on j.TypeId = ij.JobTypeId 
			left join Company c on c.CompanyId = ij.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from InternJobApply aa 
				where aa.JobId = ij.JobId and aa.StatusId = 2
			) applies  
			where  ij.Reptile = 0 and dateadd(d,0,datediff(d,0,getdate())) between ij.datefrom and ij.dateexpiry and  ij.statusid = 2
			and ij.DateDeleted is null and (ij.agentuserid is not null or ij.adminid is not null)
			and (ij.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and ij.Disabled = 0 
			union all 
			select  sj.datefrom,sj.dateexpiry,
			sj.JobId,sj.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,sj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,sj.DateDeleted,sj.DateCreated,sj.DateModified,sj.Recommended,sj.Sticky ,sj.AgentUserId,sj.AdminId
			from ServiceJob sj 
			join Region r on r.RegionId = sj.RegionId
			join JobType j on j.TypeId = sj.JobTypeId 
			left join Company c on c.CompanyId = sj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from ServiceJobApply aa 
				where aa.JobId = sj.JobId and aa.StatusId = 2 
			) applies
			where sj.Reptile = 0 and dateadd(d,0,datediff(d,0,getdate())) between sj.datefrom and sj.dateexpiry and  sj.statusid = 2
			and sj.DateDeleted is null and (sj.agentuserid is not null or sj.adminid is not null)
			and (sj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and sj.Disabled = 0 
			union all 
			select  tj.datefrom,tj.dateexpiry,
			tj.JobId,tj.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,tj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,tj.DateDeleted,tj.DateCreated,tj.DateModified,tj.Recommended,tj.Sticky  ,tj.AgentUserId,tj.AdminId
			from TutorJob tj 
			join Region r on r.RegionId = tj.RegionId
			join JobType j on j.TypeId = tj.JobTypeId 
			left join Company c on c.CompanyId = tj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from TutorJobApply aa 
				where aa.JobId = tj.JobId and aa.StatusId = 2
			) applies
			where tj.Reptile = 0 and dateadd(d,0,datediff(d,0,getdate())) between tj.datefrom and tj.dateexpiry and  tj.statusid = 2
			and tj.DateDeleted is null and (tj.agentuserid is not null or tj.adminid is not null)
			and (tj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and tj.Disabled = 0 
		
		) x where (x.DatePublished >= @DateFrom or @DateFrom is null  ) 
		and (x.DatePublished < @DateTo+1 or @DateTo is null )
		and (x.CompanyName like '%' + @CompanyName + '%'   or @CompanyName is null )
		and (x.CompanyMobile like '%' + @Mobile + '%'   or @Mobile is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
		 and x.DateDeleted is null
	) sub 
	where RowNumber between @row_from and @row_to
	order by DatePublished Desc ,JobId 
end





GO
/****** Object:  StoredProcedure [dbo].[admin_get_promoter_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_promoter_list]
	@AdminId	int,
	@DateFrom	datetime,
	@DateTo		datetime,
	@PromoterName	nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on
	select p.PromoterId, p.UserName PromoterName, p.DateCreated PromoterCreated, t.Name TeamName, u.Mobile, u.FullName, u.UserId, m.DateCreated MemberCreated, m.Leader,
		SUM(case when u.UserId is null then 0 else 1 end) over(partition by p.PromoterId) PromoterCount, 
		count(0) over(partition by p.PromoterId) PromoterSpan, 
		SUM(case when u.UserId is null then 0 else 1 end) over(partition by t.teamId) TeamCount, 
		SUM(case when u.UserId is null then 0 else 1 end) over() TotalCount
	from Promoter p
	left join PromoterTeam t on t.PromoterId = p.PromoterId and t.DateDeleted is null
	left join PromoterTeamMember m on m.TeamId = t.TeamId
	left join [User] u on u.UserId = m.UserId
	where p.DateDeleted is null and (CreatedByAdminId = @AdminId or @AdminId is null)
		and (p.UserName like '%'+@PromoterName+'%' or isnull(@PromoterName,'')='')
		and (p.DateCreated > @DateFrom or @DateFrom is null)
		and (p.DateCreated < DateAdd(d,1,@DateTo) or @DateTo is null)
	order by p.DateCreated, t.DateCreated, m.DateCreated
end

GO
/****** Object:  StoredProcedure [dbo].[admin_get_role_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_role_list]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @table table(RoleId int, Role nvarchar(50), [Permissions] nvarchar(max), DateCreated datetime)
	insert into @table(RoleId, Role, DateCreated)
	select r.RoleId, r.Name, r.DateCreated
	from Role r 
	where r.Indentation = 2

	declare @permission_table table(RoleId int, [Group] nvarchar(50), Name nvarchar(50), RowNumber int)
	insert into @permission_table
	select *, row_number() over(partition by RoleId, [Group] order by Name)
	from
	(
		select r.RoleId, p.[Group], p.Name
		from Role r 
		join Role r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
		join RolePermission rp on rp.RoleId = r_sub.RoleId
		join Permission p on p.PermissionId = rp.PermissionId	
		where r.Indentation = 2
	) a

	update t
	set t.[Permissions] = (
		STUFF((SELECT case when RowNumber = 1 then '、；'+ p.[Group] + '：' else '、' end + p.Name
            FROM @permission_table p
            WHERE p.RoleId = t.RoleId
            FOR XML PATH('')
			), 1, 2, '')
	)
	from @table t

	update @table set [Permissions] = REPLACE([permissions],'、；','；')

	select * from @table
end	

-- agent_get_user_permission 2


GO
/****** Object:  StoredProcedure [dbo].[admin_get_role_permission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_role_permission]
	@RoleId		int
as
begin set transaction isolation level read uncommitted	set nocount on
	select distinct p.PermissionId, p.[Group], p.Name
	from Role r 
	join Role r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
	join RolePermission rp on rp.RoleId = r_sub.RoleId
	join Permission p on p.PermissionId = rp.PermissionId	
	where r.RoleId = @RoleId
end




GO
/****** Object:  StoredProcedure [dbo].[admin_get_root_regions]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_root_regions]
as
begin set transaction isolation level read uncommitted	set nocount on
	select r.RegionId, r.Name, isnull(p.ProvinceId,0) ProvinceId, isnull(p.Name,'直辖市') Province, isnull(p.Sequence,0) ProvinceSequence, r.Sequence CitySequence
	from Region r
	left join Province p on p.ProvinceId = r.ProvinceId
	where r.Indentation = 1
	order by p.Sequence, r.Sequence
end




GO
/****** Object:  StoredProcedure [dbo].[admin_get_undercarriage_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[admin_get_undercarriage_job_list]
	@CompanyName nvarchar(50),
	@Mobile nvarchar(50),
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select * 
	from( 
		select *, COUNT(0) over() TotalCount, row_number() over (order by DateExpiry Desc ,JobId ) RowNumber 
		from(
			select  aj.datefrom,aj.dateexpiry, 
			aj.JobId,aj.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,aj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,aj.DateDeleted,aj.DateCreated,aj.DateModified,aj.Recommended,aj.Sticky ,aj.AgentUserId,aj.AdminId
			from ActivityJob aj 
			join Region r on r.RegionId = aj.RegionId
			join JobType j on j.TypeId = aj.JobTypeId 
			left join Company c on c.CompanyId = aj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from ActivityJobApply aa 
				where aa.JobId = aj.JobId and aa.StatusId = 2
			) applies 
			where aj.Reptile = 0 and (dateadd(d,0,datediff(d,0,getdate())) not between aj.datefrom and aj.dateexpiry  or aj.statusid = 3)
			and aj.DateDeleted is null  and (aj.agentuserid is not null or aj.adminid is not null)
			and (aj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and aj.Disabled = 0 
			union all 
			select  cj.datefrom,cj.dateexpiry,
			cj.JobId,cj.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,cj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,cj.DateDeleted,cj.DateCreated,cj.DateModified,cj.Recommended ,cj.Sticky ,cj.AgentUserId,cj.AdminId
			from CampusJob cj 
			join Region r on r.RegionId = cj.RegionId
			join JobType j on j.TypeId = cj.JobTypeId 
			left join Company c on c.CompanyId = cj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from CampusJobApply aa 
				where aa.JobId = cj.JobId and aa.StatusId = 2
			) applies
			where  cj.Reptile = 0 and (dateadd(d,0,datediff(d,0,getdate())) not between cj.datefrom and cj.dateexpiry  or cj.statusid = 3)
			and cj.DateDeleted is null  and (cj.agentuserid is not null or cj.adminid is not null)
			and (cj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and cj.Disabled = 0 
			union all
			select  ij.datefrom,ij.dateexpiry,
			ij.JobId,ij.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,ij.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,ij.DateDeleted,ij.DateCreated,ij.DateModified,ij.Recommended,ij.Sticky ,ij.AgentUserId,ij.AdminId
			from InternJob ij 
			join Region r on r.RegionId = ij.RegionId
			join JobType j on j.TypeId = ij.JobTypeId 
			left join Company c on c.CompanyId = ij.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from InternJobApply aa 
				where aa.JobId = ij.JobId and aa.StatusId = 2
			) applies  
			where  ij.Reptile = 0 and (dateadd(d,0,datediff(d,0,getdate())) not between ij.datefrom and ij.dateexpiry  or ij.statusid = 3)
			and ij.DateDeleted is null  and (ij.agentuserid is not null or ij.adminid is not null)
			and (ij.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and ij.Disabled = 0 
			union all 
			select  sj.datefrom,sj.dateexpiry,
			sj.JobId,sj.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,sj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,sj.DateDeleted,sj.DateCreated,sj.DateModified,sj.Recommended,sj.Sticky  ,sj.AgentUserId,sj.AdminId
			from ServiceJob sj 
			join Region r on r.RegionId = sj.RegionId
			join JobType j on j.TypeId = sj.JobTypeId 
			left join Company c on c.CompanyId = sj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from ServiceJobApply aa 
				where aa.JobId = sj.JobId and aa.StatusId = 2 
			) applies
			where sj.Reptile = 0 and (dateadd(d,0,datediff(d,0,getdate())) not between sj.datefrom and sj.dateexpiry  or sj.statusid = 3)
			and sj.DateDeleted is null  and (sj.agentuserid is not null or sj.adminid is not null)
			and (sj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and sj.Disabled = 0 
			union all 
			select  tj.datefrom,tj.dateexpiry,
			tj.JobId,tj.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,tj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,tj.DateDeleted,tj.DateCreated,tj.DateModified,tj.Recommended,tj.Sticky   ,tj.AgentUserId,tj.AdminId
			from TutorJob tj 
			join Region r on r.RegionId = tj.RegionId
			join JobType j on j.TypeId = tj.JobTypeId 
			left join Company c on c.CompanyId = tj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from TutorJobApply aa 
				where aa.JobId = tj.JobId and aa.StatusId = 2
			) applies
			where tj.Reptile = 0 and (dateadd(d,0,datediff(d,0,getdate())) not between tj.datefrom and tj.dateexpiry or  tj.statusid = 3)
			and tj.DateDeleted is null  and (tj.agentuserid is not null or tj.adminid is not null)
			and (tj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and tj.Disabled = 0 
		
		) x where (x.dateexpiry >= @DateFrom or @DateFrom is null  ) 
		and (x.dateexpiry <@DateTo+1 or @DateTo is null )
		and (x.CompanyName like '%' + @CompanyName + '%'   or @CompanyName is null )
		and (x.CompanyMobile like '%' + @Mobile + '%'   or @Mobile is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
		 and x.DateDeleted is null
	) sub 
	where RowNumber between @row_from and @row_to
	order by DateExpiry Desc ,JobId 
end





GO
/****** Object:  StoredProcedure [dbo].[admin_get_user_apply]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[admin_get_user_apply]
as
begin set transaction isolation level read uncommitted	set nocount on
	select *
	from(
		select ur.UserId ,ur.FullName, ur.Mobile, co.FullName CompanyName, co.Mobile CompanyMobile, j.JobId, j.JobTypeId, j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, p.Name CategoryName, t.Name Term, j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, isnull(pr.Name + ' ','')+ r.Name Region, a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName
		from ActivityJobApply a
		join ActivityJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join WageUnit u on u.UnitId = j.WageUnitId 
		join ActivityJobPosition p on p.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		join Term t on t.TermId = j.TermId
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and a.StatusId in(1,2)
		union all
		select ur.UserId ,ur.FullName, ur.Mobile, co.FullName CompanyName, co.Mobile CompanyMobile, j.JobId, j.JobTypeId,  j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, cast(0 as bit) Deposit, c.Name CategoryName, '' Term, cast(0 as bit), cast(0 as bit), cast(0 as bit), j.Gender, 0, '', isnull(pr.Name + ' ','')+ r.Name Region, a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName
		from CampusJobApply a
		join CampusJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join CampusJobCategory c on c.CategoryId = j.CategoryId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and a.StatusId in(1,2)
		union all
		select ur.UserId ,ur.FullName, ur.Mobile, co.FullName CompanyName, co.Mobile CompanyMobile, j.JobId, j.JobTypeId,  j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,c.Name CategoryName, '' Term, j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, isnull(pr.Name + ' ','')+ r.Name Region, a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName
		from InternJobApply a
		join InternJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join WageUnit u on u.UnitId = j.WageUnitId 
		join InternJobCategory c on c.CategoryId = j.CategoryId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and a.StatusId in(1,2)
		union all
		select ur.UserId ,ur.FullName, ur.Mobile, co.FullName CompanyName, co.Mobile CompanyMobile, j.JobId, j.JobTypeId, j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,c.Name CategoryName, t.Name Term, j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, isnull(pr.Name + ' ','')+ r.Name Region, a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName
		from ServiceJobApply a
		join ServiceJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join WageUnit u on u.UnitId = j.WageUnitId 
		join ServiceJobPosition c on c.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		join Term t on t.TermId = j.TermId
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and a.StatusId in(1,2)
		union all
		select ur.UserId ,ur.FullName, ur.Mobile, co.FullName CompanyName, co.Mobile CompanyMobile, j.JobId, j.JobTypeId,  j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,p.Name CategoryName, t.Name Term, j.IncludeCommission,j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, isnull(pr.Name + ' ','')+ r.Name Region, a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName
		from TutorJobApply a
		join TutorJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join WageUnit u on u.UnitId = j.WageUnitId 
		join TutorJobPaper p on p.PaperId = j.PaperId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		join Term t on t.TermId = j.TermId
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and a.StatusId in(1,2)
	) sub
	order by sub.DateCreated desc
end



GO
/****** Object:  StoredProcedure [dbo].[admin_get_user_cash_in]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_user_cash_in]
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select uc.CashInId, u.Mobile, u.FullName, uc.Amount, uc.Balance, uc.DateCreated
	from usercashin uc
	join [user] u on u.userid = uc.userid
	where u.userid = @Userid
	order by uc.dateCreated desc
end



GO
/****** Object:  StoredProcedure [dbo].[admin_get_user_cash_out]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_user_cash_out]
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select uc.CashOutId, u.Mobile, u.FullName, uc.Amount, uc.Balance, s.Name Status, s.StatusId, uc.DateModified
	from usercashout uc
	join [user] u on u.userid = uc.userid
	join CashOutStatus s on s.statusid = uc.StatusId
	where u.userid = @Userid
	order by case when s.StatusId = 1 then 1 else 2 end, uc.DateModified desc
end


GO
/****** Object:  StoredProcedure [dbo].[admin_get_user_info]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[admin_get_user_info]
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
select u.UserId, Mobile, s.SchoolId, s.Name SchoolName, FullName, isnull(left(CONVERT(nvarchar, DateofBirth,126),10),'') DateofBirth, case when Gender = 0 then '女' when Gender =1 then '男' else '' end Gender,
			Tall, u.RegionId, isnull(pr.Name + ' ','') + r.Name as RegionName, ProfilePhoto, QQ, Email, Major, isnull(WorkExperience,'') WorkExperience, 
			Balance, isnull(ub.BankId,0) BankId, isnull(b.Name,'') BankName, isnull(ub.AccountName,'') AccountName,  u.VoiceAlert, u.Vibrate,
			isnull(left(ub.AccountNo,4)+'******' + Right(ub.AccountNo,4),'') AccountNo,ub.AccountNo AccountFullNo, isnull(DATEDIFF(hour,u.DateofBirth,GETDATE())/8766,0) AS Age
		from [User] u
		join School s on s.SchoolId = u.SchoolId
		left join Region r on r.RegionId = u.RegionId
		left join Region pr on pr.RegionId = r.ParentRegionId and pr.Indentation = 2
		left join UserAccount ub 
		     join Bank b on b.BankId = ub.BankId on ub.UserId = u.UserId and ub.[Default] = 1 and ub.DateDeleted is null
		where u.UserId = @UserId

end





GO
/****** Object:  StoredProcedure [dbo].[admin_get_useraccount]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_get_useraccount] 
	@UserID bigint
as
begin set transaction isolation level read uncommitted	set nocount on
select    AccountId ,  
        dbo.UserAccount.BankId  ,
     AccountNo,
      AccountName,   DateDeleted  , dbo.UserAccount.DateCreated  
       ,Name BankName   
from dbo.UserAccount 
inner join bank on dbo.UserAccount.BankId=bank.BankId
WHERE @UserID=dbo.UserAccount.UserID AND DateDeleted is  null
ORDER BY  dbo.UserAccount.DateCreated   DESC

end 
GO
/****** Object:  StoredProcedure [dbo].[admin_has_permission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_has_permission]
	@AdminId int,
	@RequiredPermission nvarchar(50)
as
begin 
	set transaction isolation level read uncommitted
	set nocount on
	
	declare @HasPermission bit = 0
	if exists(select 1
		from AdminRole ur 
		join [Role] r on r.RoleId = ur.RoleId
		join [Role] r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
		join RolePermission rp on rp.RoleId = r_sub.RoleId
		join Permission p on p.PermissionId = rp.PermissionId	
		where ur.AdminId = @AdminId and p.name = @RequiredPermission
			and not exists(select 1 from AdminPermission where AdminId = @AdminId and PermissionId = p.PermissionId and Denied = 1)
		union 
		select 1
		from AdminPermission ap
		join Permission p on p.PermissionId = ap.PermissionId
		where ap.AdminId = @AdminId and p.name = @RequiredPermission and ap.Denied = 0
	)
	begin
		select @HasPermission = 1
	end
	select @HasPermission HasPermission
end


GO
/****** Object:  StoredProcedure [dbo].[admin_has_role]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_has_role]
	@AdminId int,
	@RequiredRole nvarchar(50)
as
begin
	set transaction isolation level read uncommitted
	set nocount on
	
	declare @HasRole bit = 0
	if exists(select 1
		from AdminRole ur 
		join [Role] r on r.RoleId = ur.RoleId
		join [Role] r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
		where ur.AdminId = @AdminId and r_sub.name = @RequiredRole
	)
	begin
		set @HasRole = 1
	end
	select @HasRole HasRole
end




GO
/****** Object:  StoredProcedure [dbo].[admin_message_cash_in]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_message_cash_in]
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Device nvarchar(50), @DeviceToken nvarchar(255), @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @MessageId bigint, @BaiduUserId nvarchar(50)
	select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount 
	from [User]
	where DeviceToken is not null and IsLogin = 1 and UserId = @UserId

	insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read], DateCreated)
	values(0, @UserId, 0, 0, '[工资] 已到帐，点击提取', 2, 0, GETDATE())
	set @MessageId = SCOPE_IDENTITY()

	if (@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')
	begin
		update [User]
		set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
		where UserId = @UserId

		insert into notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount, DateCreated)
		values(@MessageId, '资金消息', 2, '[工资] 已到帐，点击提取', '资金到帐', 0, @UserId, 0, 0, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount, getdate())
	end
end




GO
/****** Object:  StoredProcedure [dbo].[admin_publish_activity_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[admin_publish_activity_job]
	@AgentUserId int,
	@CompanyName nvarchar(50),
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@Recommended	bit,
	@Sticky	bit,
	@StickyExpired	date,
	@PositionId	int,
	@RegionId	int,
	@WageUnitId	int,
	@Wage		money,
	@IncludeDinner	bit,
	@IncludeRoom	bit,
	@IncludeCommission bit,
	@TermId		int,
	@Gender		int,
	@Deposit		money,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone nvarchar(50),
	@Address	nvarchar(255),

	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
@MonMorning	bit,
	@TueMorning	bit,
	@WedMorning	bit,
	@ThuMorning	bit,
	@FriMorning	bit,
	@SatMorning	bit,
	@SunMorning	bit,

	@MonAfternoon bit,
	@TueAfternoon bit,
	@WedAfternoon bit,
	@ThuAfternoon bit,
	@FriAfternoon bit,
	@SatAfternoon bit,
	@SunAfternoon bit,

	@MonNight	bit,
	@TueNight	bit,
	@WedNight	bit,
	@ThuNight	bit,
	@FriNight	bit,
	@SatNight	bit,
	@SunNight	bit
as
begin
	if isnull(@PeopleRequired,0) < = 0 return
	declare @DateFrom date,@DateExpiry date
	set @DateFrom	= GETDATE()
	set @DateExpiry	= DATEADD(M,1,GETDATE())
	set @Gender = isnull(@Gender,2)
	if isnull(@Sticky,0)=0
	select  @StickyExpired=null

	insert into ActivityJob(CompanyId, Title,Recommended,Sticky,StickyExpired, JobTypeId, StatusId, PositionId, RegionId, WageUnitId, Wage, IncludeDinner, IncludeRoom,IncludeCommission, TermId, Gender,Deposit, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, DatePublished,AdminId,JobAllocateTypeId)
	values(@CompanyId, @Title,@Recommended,@Sticky,@StickyExpired, 1, 2, @PositionId, @RegionId, @WageUnitId, @Wage, @IncludeDinner, @IncludeRoom,@IncludeCommission, @TermId, @Gender,@Deposit, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight, getdate(),@AgentUserId,1)
end





GO
/****** Object:  StoredProcedure [dbo].[admin_publish_campus_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[admin_publish_campus_job]
	@AgentUserId int,
	@CompanyName nvarchar(50),
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@Recommended	bit,
	@Sticky	bit,
	@StickyExpired	date,
	@CategoryId	int,
	@SchoolId	int,
	@RegionId	int,
	@Gender		int,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone	nvarchar(50),
	@Address	nvarchar(255),

	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
	@MonMorning	bit,
	@TueMorning	bit,
	@WedMorning	bit,
	@ThuMorning	bit,
	@FriMorning	bit,
	@SatMorning	bit,
	@SunMorning	bit,

	@MonAfternoon bit,
	@TueAfternoon bit,
	@WedAfternoon bit,
	@ThuAfternoon bit,
	@FriAfternoon bit,
	@SatAfternoon bit,
	@SunAfternoon bit,

	@MonNight	bit,
	@TueNight	bit,
	@WedNight	bit,
	@ThuNight	bit,
	@FriNight	bit,
	@SatNight	bit,
	@SunNight	bit
as
begin
	if isnull(@PeopleRequired,0) < = 0 return
	declare @DateFrom date,@DateExpiry date
	set @DateFrom	= GETDATE()
	set @DateExpiry	= DATEADD(M,1,GETDATE())
	set @Gender = isnull(@Gender,2)
	if isnull(@Sticky,0)=0
	select  @StickyExpired=null
	insert into CampusJob(CompanyId, Title,Recommended,Sticky,StickyExpired, JobTypeId, StatusId, CategoryId, SchoolId, RegionId, Gender, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, DatePublished,AdminId,JobAllocateTypeId)
	values(@CompanyId, @Title,@Recommended,@Sticky,@StickyExpired, 2, 2, @CategoryId, @SchoolId, @RegionId, @Gender, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight, getdate(),@AgentUserId,1)
end





GO
/****** Object:  StoredProcedure [dbo].[admin_publish_intern_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[admin_publish_intern_job]
	@AgentUserId int,
	@CompanyName nvarchar(50),
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@Recommended	bit,
	@Sticky bit,
	@StickyExpired	date,
	@Category	int,
	@RegionId	int,
	@WageUnitId	int,
	@Wage		money,
	@IncludeDinner	bit,
	@IncludeRoom	bit,
	@IncludeCommission bit,
	@Gender		int,
	@Deposit		money,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone	nvarchar(50),
	@Address	nvarchar(255),

	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
@MonMorning	bit,
	@TueMorning	bit,
	@WedMorning	bit,
	@ThuMorning	bit,
	@FriMorning	bit,
	@SatMorning	bit,
	@SunMorning	bit,

	@MonAfternoon bit,
	@TueAfternoon bit,
	@WedAfternoon bit,
	@ThuAfternoon bit,
	@FriAfternoon bit,
	@SatAfternoon bit,
	@SunAfternoon bit,

	@MonNight	bit,
	@TueNight	bit,
	@WedNight	bit,
	@ThuNight	bit,
	@FriNight	bit,
	@SatNight	bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	if isnull(@PeopleRequired,0) < = 0 return
	declare @DateFrom date,@DateExpiry date
	set @DateFrom	= GETDATE()
	set @DateExpiry	= DATEADD(M,1,GETDATE())
	set @Gender = isnull(@Gender,2)
	if isnull(@Sticky,0)=0
	select  @StickyExpired=null
	insert into InternJob(CompanyId, Title,Recommended,Sticky,StickyExpired, JobTypeId, StatusId, CategoryId, RegionId, WageUnitId, Wage, IncludeDinner, IncludeRoom,IncludeCommission, Gender,Deposit, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, DatePublished,AdminId,JobAllocateTypeId)
	values(@CompanyId, @Title,@Recommended,@Sticky,@StickyExpired, 3, 2, @Category, @RegionId, @WageUnitId, @Wage, @IncludeDinner, @IncludeRoom,@IncludeCommission, @Gender,@Deposit, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight, getdate(),@AgentUserId,1)
end





GO
/****** Object:  StoredProcedure [dbo].[admin_publish_service_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[admin_publish_service_job]
	@AgentUserId int,
	@CompanyName nvarchar(50),
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@Recommended	bit,
	@Sticky bit,
	@StickyExpired	date,
	@CategoryId	int,
	@PositionId	int,
	@RegionId	int,
	@WageUnitId	int,
	@Wage		money,
	@IncludeDinner	bit,
	@IncludeRoom	bit,
	@IncludeCommission bit,
	@TermId		int,
	@Gender		int,
	@Deposit		money,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone	nvarchar(50),
	@Address	nvarchar(255),

	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
	@MonMorning	bit,
	@TueMorning	bit,
	@WedMorning	bit,
	@ThuMorning	bit,
	@FriMorning	bit,
	@SatMorning	bit,
	@SunMorning	bit,

	@MonAfternoon bit,
	@TueAfternoon bit,
	@WedAfternoon bit,
	@ThuAfternoon bit,
	@FriAfternoon bit,
	@SatAfternoon bit,
	@SunAfternoon bit,

	@MonNight	bit,
	@TueNight	bit,
	@WedNight	bit,
	@ThuNight	bit,
	@FriNight	bit,
	@SatNight	bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	if isnull(@PeopleRequired,0) < = 0 return
	declare @DateFrom date,@DateExpiry date
	set @DateFrom	= GETDATE()
	set @DateExpiry	= DATEADD(M,1,GETDATE())
	set @Gender = isnull(@Gender,2)
	if isnull(@Sticky,0)=0
	select  @StickyExpired=null
	insert into ServiceJob(CompanyId, Title,Recommended,Sticky,StickyExpired, JobTypeId, StatusId, CategoryId, PositionId, RegionId, WageUnitId, Wage, IncludeDinner, IncludeRoom,IncludeCommission, TermId, Gender,Deposit, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, DatePublished,AdminId,JobAllocateTypeId)
	values(@CompanyId, @Title,@Recommended,@Sticky,@StickyExpired, 4, 2, @CategoryId, @PositionId, @RegionId, @WageUnitId, @Wage, @IncludeDinner, @IncludeRoom,@IncludeCommission, @TermId, @Gender,@Deposit, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight, getdate(),@AgentUserId,1)
end







GO
/****** Object:  StoredProcedure [dbo].[admin_publish_tutor_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[admin_publish_tutor_job]
	@AgentUserId int,
	@CompanyName nvarchar(50),
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@Recommended	bit,
	@Sticky	bit,
	@StickyExpired	date,

	@LevelId	int,
	@PaperId	int,
	@RegionId	int,
	@WageUnitId	int,
	@Wage		money,
	@IncludeDinner	bit,
	@IncludeRoom	bit,
	@IncludeCommission bit,
	@TermId		int,
	@Gender		int,
	@Deposit		money,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone	nvarchar(50),
	@Address	nvarchar(255),

	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
	@MonMorning	bit,
	@TueMorning	bit,
	@WedMorning	bit,
	@ThuMorning	bit,
	@FriMorning	bit,
	@SatMorning	bit,
	@SunMorning	bit,

	@MonAfternoon bit,
	@TueAfternoon bit,
	@WedAfternoon bit,
	@ThuAfternoon bit,
	@FriAfternoon bit,
	@SatAfternoon bit,
	@SunAfternoon bit,

	@MonNight	bit,
	@TueNight	bit,
	@WedNight	bit,
	@ThuNight	bit,
	@FriNight	bit,
	@SatNight	bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	if isnull(@PeopleRequired,0) < = 0 return
	declare @DateFrom date,@DateExpiry date
	set @DateFrom	= GETDATE()
	set @DateExpiry	= DATEADD(M,1,GETDATE())
	set @Gender = isnull(@Gender,2)
	if isnull(@Sticky,0)=0
	select  @StickyExpired=null
	insert into TutorJob(CompanyId, Title,Recommended,Sticky,StickyExpired, JobTypeId, StatusId, LevelId, PaperId, RegionId, WageUnitId, Wage, IncludeDinner, IncludeRoom,IncludeCommission, TermId, Gender,Deposit, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, DatePublished,AdminId,JobAllocateTypeId)
	values(@CompanyId, @Title,@Recommended,@Sticky,@StickyExpired, 5, 2, @LevelId, @PaperId, @RegionId, @WageUnitId, @Wage, @IncludeDinner, @IncludeRoom,@IncludeCommission, @TermId, @Gender,@Deposit, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight, getdate(),@AgentUserId,1)
end






GO
/****** Object:  StoredProcedure [dbo].[admin_search_user_info]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[admin_search_user_info] 
	@RegionIds nvarchar(max),
	@SubRegionIds nvarchar(max),
	@SchoolRegionId		bigint,
	@RegionId		bigint,
	@Gender int,
	@TallFrom int,
	@TallTo int,
	@Mobile nvarchar(50),
	@School nvarchar(50),
	@LastestLogonDateFrom datetime,
	@LastestLogonDateTo datetime,
	@CreatedDateFrom datetime,
	@CreatedDateTo datetime,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from
	(
		select u.UserId, Mobile, s.SchoolId, s.Name SchoolName, FullName, isnull(left(CONVERT(nvarchar, DateofBirth,126),10),'') DateofBirth, case when Gender = 0 then '女' when Gender =1 then '男' else '' end Gender,
			Tall, u.RegionId, isnull(isnull(r.Name,sr.Name),'未知') RegionName, ProfilePhoto, QQ, Email, Major, isnull(WorkExperience,'') WorkExperience, 
			Balance, isnull(ub.BankId,0) BankId, isnull(b.Name,'') BankName, isnull(ub.AccountName,'') AccountName,  u.VoiceAlert, u.Vibrate,
			isnull(left(ub.AccountNo,4)+'******' + Right(ub.AccountNo,4),'') AccountNo, isnull(DATEDIFF(hour,u.DateofBirth,GETDATE())/8766,0) AS Age,u.DateCreated,ull.DateLogged,
			COUNT(0) over() TotalCount,
			row_number() over (order by u.DateCreated Desc) as [row]
		from [User] u
		join School s on s.SchoolId = u.SchoolId
		left join Region r on r.RegionId = u.RegionId
		left join Region sr on sr.RegionId = s.RegionId 
		left join UserAccount ub
				join Bank b on b.BankId = ub.BankId on ub.UserId = u.UserId and ub.[Default] = 1 and ub.DateDeleted is null
		join (select UserId, max(DateLogged) DateLogged from UserLogonLog group by UserId ) ull on ull.UserId = u.UserId
		where (u.Gender =  @Gender or @Gender is null ) 
			and ((u.Tall >  @TallFrom or @TallFrom is null ) and (u.Tall <=  @TallTo or @TallTo is null ) )
			and (u.Mobile like  '%'+@Mobile+'%' or @Mobile is null ) 
			and (s.Name like '%'+@School+'%' or @School is null )
			and (u.RegionId in (select string from dbo.fn_split_string_by(@SubRegionIds, ',')) or @SubRegionIds is null or (@RegionId is null and u.RegionId is null)) 
			and (u.RegionId =  @RegionId or @RegionId is null)
			and (u.DateCreated >= @CreatedDateFrom or @CreatedDateFrom is null  ) 
			and (u.DateCreated < @CreatedDateTo+1 or @CreatedDateTo is null )
			and (ull.DateLogged >= @LastestLogonDateFrom or @LastestLogonDateFrom is null  ) 
			and (ull.DateLogged < @LastestLogonDateTo+1 or @LastestLogonDateTo is null )
			and (s.RegionId =  @SchoolRegionId or @SchoolRegionId is null)
			and (s.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null or @SchoolRegionId is null)--(@SchoolRegionId is null and s.RegionId is null)) 
	) sub
	where sub.row between @row_from and @row_to
	order by [row]
end



GO
/****** Object:  StoredProcedure [dbo].[admin_system_message_create]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_system_message_create]
	@AdminId	int,
	@Message	nvarchar(50),
	@Content	nvarchar(max)
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @SystemMessageId int, @MessageId bigint
	insert into SystemMessage(AdminId, Title, Content, DateCreated)
	values(@AdminId, @Message, @Content, getdate())
	set @SystemMessageId = scope_identity()

	declare @UserId	bigint, @Device nvarchar(50), @DeviceToken nvarchar(255), @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @CompanyId bigint, @BaiduUserId nvarchar(50)
	declare cur_user cursor for 
	select UserId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount 
	from [User]
	where IsLogin = 1 

	open cur_user
	fetch next from cur_user into @UserId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount
	while @@FETCH_STATUS = 0
	begin
		
		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read], SystemMessageId, DateCreated)
		values(0, @UserId, 0, 0, '[消息] '+@Message, 1, 0, @SystemMessageId, GETDATE())
		set @MessageId = SCOPE_IDENTITY()
		
		if (@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount, DateCreated)
			values(@MessageId, '系统消息', 1, '[消息] '+@Message, '系统消息', 0, @UserId, 0, 0, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount, getdate())
		end
		fetch next from cur_user into @UserId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount
	end
	close cur_user
	deallocate cur_user


	select @BaiduUserId = null, @Device = null, @DeviceToken = null, @VoiceAlert = null, @Vibrate = null, @NotificationCount = null
	declare cur_company cursor for 
	select CompanyId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount 
	from Company
	where IsLogin = 1 

	open cur_company
	fetch next from cur_company into @CompanyId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount
	while @@FETCH_STATUS = 0
	begin
		
		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read], SystemMessageId, DateCreated)
		values(0, @CompanyId, 0, 0, '[消息] '+@Message, 1, 0, @SystemMessageId, GETDATE())
		set @MessageId = SCOPE_IDENTITY()

		if (@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')
		begin
			update Company
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where CompanyId = @CompanyId

			insert into notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount, DateCreated)
			values(@MessageId, '系统消息', 1, '[消息] '+@Message, '系统消息', 0, @CompanyId, 0, 0, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount, getdate())
		end

		fetch next from cur_company into @CompanyId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount
	end
	close cur_company
	deallocate cur_company
end


GO
/****** Object:  StoredProcedure [dbo].[admin_system_message_push_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[admin_system_message_push_user]
	@AdminId	int,
	@UserId		bigint,
	@Message	nvarchar(50),
	@Content	nvarchar(max)
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @SystemMessageId int, @MessageId bigint
	insert into SystemMessage(AdminId, Title, Content, DateCreated)
	values(@AdminId, @Message, @Content, getdate())
	set @SystemMessageId = scope_identity()

	declare @Device nvarchar(50), @DeviceToken nvarchar(255), @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @CompanyId bigint, @BaiduUserId nvarchar(50)
	select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount 
	from [User]
	where IsLogin = 1 and UserId = @UserId

	insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read], SystemMessageId, DateCreated)
	values(0, @UserId, 0, 0, @Message, 1, 0, @SystemMessageId, GETDATE())
	set @MessageId = SCOPE_IDENTITY()
		
	if (@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')
	begin
		update [User]
		set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
		where UserId = @UserId

		insert into notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount, DateCreated)
		values(@MessageId, '系统消息', 1, @Message, '系统消息', 0, @UserId, 0, 0, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount, getdate())
	end

end


GO
/****** Object:  StoredProcedure [dbo].[admin_update_enterprise_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[admin_update_enterprise_user]
	@CompanyId bigint,
	@FullName nvarchar(50),
	@PendingFullName  nvarchar(50),
	@Mobile nvarchar(50),
	@RegionId int,
	@Address nvarchar(255),
	@Status bit,
	@Verified bit,
	@Balance bit,
	@Email nvarchar(255)
as
begin set transaction isolation level read uncommitted	set nocount on
 
	UPDATE Company
   SET [RegionId] = @RegionId
      ,[Mobile] = @Mobile
      ,[Email] = @Email
      ,[FullName] = CASE  WHEN @Verified =1 and len(@PendingFullName)>0 THEN  @PendingFullName  ELSE @FullName END 
      ,[Address] = @Address
      ,[Status] = @Status
      ,[Verified] = @Verified
      ,[DateModified] = GETDATE() 
 WHERE CompanyId = @CompanyId


end



 


GO
/****** Object:  StoredProcedure [dbo].[admin_update_password]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [dbo].[admin_update_password]
	@AdminId	int,
	@hashedPassword	nvarchar(255),
	@salt		nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on 
UPDATE  [dbo].[Admin]
   SET  [Password] = @hashedPassword
      ,[Salt] = @salt
      ,[DateModified] = getdate()
 WHERE  [AdminId]=@AdminId
end
 

GO
/****** Object:  StoredProcedure [dbo].[agent_create_agent_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_create_agent_user]
	@AgentUserId	int,
	@RoleId		int,
	@Regions		nvarchar(max),
	@Username	nvarchar(50),
	@Password	nvarchar(255),
	@Salt		nvarchar(255),
	@Permissions	nvarchar(max)
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @userId int
	insert into AgentUser(username, Password, Salt, AdminAgentUserId, TypeId)
	values(@username, @password, @salt, @agentUserId, 2)
	set @userId = SCOPE_IDENTITY()

	insert into AgentUserAgentRole(UserId, RoleId) values (@userId, @RoleId)

	insert into AgentUserRegion(UserId, RegionId)
	select @userId, string
	from dbo.fn_split_string_by(@regions, ',')

	insert into AgentUserAgentPermission(userid, PermissionId)
	select @userId, string
	from dbo.fn_split_string_by(@permissions, ',')
	where string not in(select PermissionId from AgentRoleAgentPermission where RoleId = @RoleId)

	insert into AgentUserAgentPermission(userid, PermissionId, Denied)
	select @userId, PermissionId, 1
	from AgentRoleAgentPermission 
	where RoleId = @RoleId and PermissionId not in(select string from dbo.fn_split_string_by(@permissions, ','))
end


GO
/****** Object:  StoredProcedure [dbo].[agent_create_promoter]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_create_promoter]
	@AgentUserId	int,
	@Username	nvarchar(50),
	@Password	nvarchar(255),
	@Salt		nvarchar(255)
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @userId int
	insert into Promoter(username, Password, Salt, CreatedByAgentUserId)
	values(@username, @password, @salt, @agentUserId)
	set @userId = SCOPE_IDENTITY()

	select @userId PromoterId
end

GO
/****** Object:  StoredProcedure [dbo].[agent_create_promoter_team]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_create_promoter_team]
	@PromoterId	int,
	@TeamName	nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @userId int
	insert into PromoterTeam(PromoterId, Name)
	values(@PromoterId, @TeamName)
	set @userId = SCOPE_IDENTITY()

	select @userId TeamId
end

GO
/****** Object:  StoredProcedure [dbo].[agent_create_promoter_team_member]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_create_promoter_team_member]
	@TeamId	int,
	@IsLeader	bit,
	@UserId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	insert into PromoterTeamMember(UserId, TeamId, Leader)
	values(@UserId, @TeamId, @IsLeader)
end

GO
/****** Object:  StoredProcedure [dbo].[agent_create_role]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_create_role]
	@agentUserId	int,
	@roleId	int,
	@role	nvarchar(50),
	@permissions	nvarchar(max)
as
begin set transaction isolation level read uncommitted	set nocount on
	if @roleId is null
	begin
		insert into AgentRole(name, AdminAgentUserId, ParentRoleId) 
		select @role, @agentuserid, RoleId
		from AgentRole 
		where AdminAgentUserId = @agentUserId and Indentation = 1
		set @roleId = SCOPE_IDENTITY()
	end
	else
	begin
		update AgentRole set Name = @role where RoleId = @roleId
		delete from AgentRoleAgentPermission where RoleId = @roleId
	end

	insert into AgentRoleAgentPermission(RoleId, PermissionId)
	select @roleId, t.string
	from dbo.fn_split_string_by(@permissions, ',') t
end


GO
/****** Object:  StoredProcedure [dbo].[agent_create_sales_agent_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_create_sales_agent_user]
	@AgentUserId	int,
	@Regions		nvarchar(max),
	@Username	nvarchar(50),
	@Password	nvarchar(255),
	@Salt		nvarchar(255),
	@PromoterId	int,
	@Permissions	nvarchar(max)
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @userId int
	insert into AgentUser(username, Password, Salt, AdminAgentUserId, TypeId, PromoterId)
	values(@username, @password, @salt, @agentUserId, 3, @PromoterId)
	set @userId = SCOPE_IDENTITY()

	insert into AgentUserRegion(UserId, RegionId)
	select @userId, string
	from dbo.fn_split_string_by(@regions, ',')

	insert into AgentUserAgentPermission(userid, PermissionId)
	select @userId, string
	from dbo.fn_split_string_by(@permissions, ',')
	where string in(select PermissionId from AgentUserTypeAgentPermission where TypeId = 3)
end


GO
/****** Object:  StoredProcedure [dbo].[agent_delete_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[agent_delete_job]
	@JobId bigint,
	@JobTypeId int
as
begin set transaction isolation level read uncommitted	set nocount on
	if @JobTypeId = 1 
	begin
		update ActivityJob set DateDeleted = GETDATE() where jobid = @JobId and reptile = 0
	end
	if @JobTypeId = 2 
	begin
		update campusjob set DateDeleted = GETDATE() where jobid = @JobId and reptile = 0
	end
	if @JobTypeId = 3 
	begin
		update internJob set DateDeleted = GETDATE() where jobid = @JobId and reptile = 0
	end
	if @JobTypeId = 4 
	begin
		update servicejob set DateDeleted = GETDATE() where jobid = @JobId and reptile = 0
	end
	if @JobTypeId = 5 
	begin
		update tutorjob set DateDeleted = GETDATE() where jobid = @JobId and reptile = 0
	end
end




GO
/****** Object:  StoredProcedure [dbo].[agent_delete_reptile_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[agent_delete_reptile_job]
	@JobId bigint,
	@JobTypeId int
as
begin set transaction isolation level read uncommitted	set nocount on
	if @JobTypeId = 1 
	begin
		update ActivityJob set DateDeleted = GETDATE() where jobid = @JobId and reptile = 1
	end
	if @JobTypeId = 2 
	begin
		update campusjob set DateDeleted = GETDATE() where jobid = @JobId and reptile = 1
	end
	if @JobTypeId = 3 
	begin
		update internJob set DateDeleted = GETDATE() where jobid = @JobId and reptile = 1
	end
	if @JobTypeId = 4 
	begin
		update servicejob set DateDeleted = GETDATE() where jobid = @JobId and reptile = 1
	end
	if @JobTypeId = 5 
	begin
		update tutorjob set DateDeleted = GETDATE() where jobid = @JobId and reptile = 1
	end
end




GO
/****** Object:  StoredProcedure [dbo].[agent_edit_agent_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_edit_agent_user]
	@UserId	int,
	@AgentUserId	int,
	@RoleId		int,
	@Regions		nvarchar(max),
	@Username	nvarchar(50),
	@Permissions	nvarchar(max)
as
begin set transaction isolation level read uncommitted	set nocount on
	if not exists(select 1 from AgentUser where UserId = @UserId and AdminAgentUserId = @AgentUserId) return

	update AgentUser
	set UserName = @Username
	where UserId = @UserId and AdminAgentUserId = @AgentUserId

	delete from AgentUserAgentRole where UserId = @UserId
	insert into AgentUserAgentRole(UserId, RoleId) values (@userId, @RoleId)

	delete from AgentUserRegion where UserId = @UserId
	insert into AgentUserRegion(UserId, RegionId)
	select @userId, string
	from dbo.fn_split_string_by(@regions, ',')

	delete from AgentUserAgentPermission where UserId = @UserId
	insert into AgentUserAgentPermission(userid, PermissionId)
	select @userId, string
	from dbo.fn_split_string_by(@permissions, ',')
	where string not in(select PermissionId from AgentRoleAgentPermission where RoleId = @RoleId)

	insert into AgentUserAgentPermission(userid, PermissionId, Denied)
	select @userId, PermissionId, 1
	from AgentRoleAgentPermission 
	where RoleId = @RoleId and PermissionId not in(select string from dbo.fn_split_string_by(@permissions, ','))
end


GO
/****** Object:  StoredProcedure [dbo].[agent_edit_role]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_edit_role]
	@AgentUserId	int,
	@RoleId		int,
	@Rolename	nvarchar(50),
	@Permissions	nvarchar(max)
as
begin set transaction isolation level read uncommitted	set nocount on
	if not exists(select 1 from AgentRole where RoleId = @RoleId and AdminAgentUserId = @AgentUserId) return

	update AgentRole
	set Name = @Rolename
	where RoleId = @RoleId and AdminAgentUserId = @AgentUserId

	delete from AgentRoleAgentPermission where RoleId = @RoleId
	insert into AgentRoleAgentPermission(RoleId, PermissionId)
	select @RoleId, string
	from dbo.fn_split_string_by(@permissions, ',')
end


GO
/****** Object:  StoredProcedure [dbo].[agent_edit_sales_agent_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_edit_sales_agent_user]
	@UserId	int,
	@AgentUserId	int,
	@Regions		nvarchar(max),
	@Username	nvarchar(50),
	@PromoterId	int,
	@Permissions	nvarchar(max)
as
begin set transaction isolation level read uncommitted	set nocount on
	if not exists(select 1 from AgentUser where UserId = @UserId and AdminAgentUserId = @AgentUserId) return

	update AgentUser
	set UserName = @Username, PromoterId = @PromoterId
	where UserId = @UserId and AdminAgentUserId = @AgentUserId

	delete from AgentUserRegion where UserId = @UserId
	insert into AgentUserRegion(UserId, RegionId)
	select @userId, string
	from dbo.fn_split_string_by(@regions, ',')

	delete from AgentUserAgentPermission where UserId = @UserId
	insert into AgentUserAgentPermission(userid, PermissionId)
	select @userId, string
	from dbo.fn_split_string_by(@permissions, ',')
	where string in(select PermissionId from AgentUserTypeAgentPermission where TypeId = 3)
end


GO
/****** Object:  StoredProcedure [dbo].[agent_get_activity_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [dbo].[agent_get_activity_job]
	@JobId bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select Title,cm.CompanyId,cm.fullname CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,j.Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,j.Contact,ContactPhone,Sticky,StickyExpired,Recommended,
		t.name JobTypeName ,j.PositionId, p.Name PositionName ,j.JobId,j.JobTypeId,u.Name WageUnitName,r.RegionId ,r.Name RegionName,m.Name TermName  from activityJob j
		join jobtype t on j.jobtypeid = t.typeid 
		join region r on r.regionid = j.regionid
		join ActivityJobPosition p on j.positionid = p.positionid 
		left join Company cm on cm.CompanyId = j.CompanyId 
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId and reptile = 0 and DateDeleted is null
end

 



GO
/****** Object:  StoredProcedure [dbo].[agent_get_agent_regions]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_agent_regions]
	@UserId		int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @TypeId int
	select @TypeId = TypeId from AgentUser where UserId = @UserId
	if @TypeId = 1
	begin
		select r.RegionId CityId, r.Name City, sr.RegionId, sr.Name Region, r.Sequence CitySequence, sr.Sequence RegionSequence, r.Indentation CityIndentation, sr.Indentation RegionIndentation
		from Region r
		join AgentUserRegion u on u.RegionId = r.RegionId
		join Region sr on sr.ParentRegionId = r.RegionId
		where  u.UserId = @UserId
		order by r.Sequence, sr.Sequence
	end
	else
	begin
		select pr.RegionId CityId, pr.Name City, r.RegionId, r.Name Region, pr.Sequence CitySequence, r.Sequence RegionSequence, pr.Indentation CityIndentation, r.Indentation RegionIndentation
		from Region r
		join AgentUserRegion u on u.RegionId = r.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		where  u.UserId = @UserId
		order by pr.Sequence, r.Sequence
	end
end



GO
/****** Object:  StoredProcedure [dbo].[agent_get_agent_user_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_agent_user_list]
	@AgentUserId	int,
	@RoleId	int,
	@DateFrom	datetime,
	@DateTo		datetime,
	@SearchText	nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @table table(UserId int, UserName nvarchar(50), Role nvarchar(50), Regions nvarchar(max), [Permissions] nvarchar(max), DateCreated datetime, AgentType nvarchar(50))
	insert into @table(UserId, UserName, Role, DateCreated, AgentType)
	select u.UserId, u.UserName, r.Name, u.DateCreated, t.Name
	from AgentUserAgentRole ur 
	join AgentRole r on r.RoleId = ur.RoleId and r.Indentation = 2 
	join AgentUser u on u.UserId = ur.UserId
	join AgentUserType t on t.TypeId = u.TypeId
	where r.AdminAgentUserId =@AgentUserId and u.AdminAgentUserId = @AgentUserId and u.DateDeleted is null
		and (ur.RoleId = @RoleId or @RoleId is null)
		and (u.DateCreated >= @DateFrom or @DateFrom is null)
		and (u.DateCreated < DateAdd(d,1,@DateTo) or @DateTo is null)
		and (u.UserName like '%'+ @SearchText +'%' or isnull(@SearchText,'') = '')

	declare @permission_table table(UserId int, [Group] nvarchar(50), Name nvarchar(50), RowNumber int)
	insert into @permission_table
	select *, row_number() over(partition by UserId, [Group] order by Name)
	from
	(
		select ur.UserId, p.[Group], p.Name
		from AgentUserAgentRole ur 
		join AgentRole r on r.RoleId = ur.RoleId and r.Indentation = 2 
		join AgentRole r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
		join AgentRoleAgentPermission rp on rp.RoleId = r_sub.RoleId
		join AgentPermission p on p.PermissionId = rp.PermissionId	
		where r.AdminAgentUserId = @AgentUserId and not exists(select 1 from AgentUserAgentPermission where UserId = ur.UserId and PermissionId = p.PermissionId and Denied = 1)
		union 
		select ap.UserId, p.[Group], p.Name
		from AgentUserAgentPermission ap
		join AgentPermission p on p.PermissionId = ap.PermissionId
		join AgentUserAgentRole ur on ap.UserId = ur.UserId
		join AgentRole r on r.RoleId = ur.RoleId and r.Indentation = 2 
		where ap.Denied = 0 and r.AdminAgentUserId = @AgentUserId
	) a

	update t
	set t.[Permissions] = (
		STUFF((SELECT case when RowNumber = 1 then '、；'+ p.[Group] + '：' else '、' end + p.Name
            FROM @permission_table p
            WHERE p.UserId = t.UserId
            FOR XML PATH('')
			), 1, 2, '')
	)
	from @table t

	update @table set [Permissions] = REPLACE([permissions],'、；','；')

	declare @region_table table(UserId int, Province nvarchar(50), Name nvarchar(50), RowNumber int)
	insert into @region_table
	select *, row_number() over(partition by UserId, Province order by Name)
	from
	(
		select ur.UserId, pr.Name Province, r.Name
		from AgentUserRegion ur 
		join AgentUser u on u.UserId = ur.UserId
		join Region r on r.RegionId = ur.RegionId
		join Region pr  on pr.RegionId = r.ParentRegionId
		where u.AdminAgentUserId = @AgentUserId
	) a
	update t
	set t.Regions = (
		STUFF((SELECT case when RowNumber = 1 then '、；'+ p.Province + '：' else '、' end + p.Name
            FROM @region_table p
            WHERE p.UserId = t.UserId
            FOR XML PATH('')
			), 1, 2, '')
	)
	from @table t

	update @table set Regions = REPLACE(Regions,'、；','；')

	select * from @table
end

-- [agent_get_agent_user_list] 10, null, null, null,  null






GO
/****** Object:  StoredProcedure [dbo].[agent_get_business_approved_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_get_business_approved_job_list]
	@CompanyId		bigint,
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on

	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from(
	select AgentUserId,AdminId,JobId, JobTypeId, JobType,Recommended,Sticky, RegionId,Region, Title, Deposit, Verified, DateCreated,DatePublished, ViewTimes, StatusId, Status, PeopleRequired, IncludeDinner, IncludeCommission, IncludeRoom, Wage, WageUnit, Gender, Term, COUNT(0) over() TotalCount, row_number() over (order by DatePublished Desc ) RowNumber 
	from
	(
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region, j.Title, j.Deposit, c.Verified, j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ActivityJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ActivityJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies 
			where j.CompanyId = @CompanyId  and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and j.statusid = 2  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+   r.Name Region,j.Title, 0, c.Verified,cast(0 as bit), cast(0 as bit), cast(0 as bit), '' Wage, '' WageUnit, j.Gender, '' Term, j.DateCreated, j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from CampusJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from CampusJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry  and j.statusid = 2  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky, r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title, j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, '' Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from InternJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from InternJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies  
			where  j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and j.statusid  = 2  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId, ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ServiceJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ServiceJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2 
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and j.statusid  = 2  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId, ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from TutorJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from TutorJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and j.statusid  = 2  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		)x  where (x.DatePublished >= @DateFrom or @DateFrom is null  ) 
		and (x.DatePublished < @DateTo+1 or @DateTo is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
		 
	) sub
	where RowNumber between @row_from and @row_to
	
end




GO
/****** Object:  StoredProcedure [dbo].[agent_get_business_pending_approve_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_business_pending_approve_job_list]
	@CompanyId		bigint,
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on

	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from(
	select AgentUserId,AdminId,JobId, JobTypeId, JobType,Recommended,Sticky, RegionId,Region, Title, Deposit, Verified, DateCreated,DatePublished, ViewTimes, StatusId, Status, PeopleRequired, IncludeDinner, IncludeCommission, IncludeRoom, Wage, WageUnit, Gender, Term, COUNT(0) over() TotalCount, row_number() over (order by DateCreated Desc ) RowNumber 
	from
	(
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region, j.Title, j.Deposit, c.Verified, j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ActivityJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ActivityJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies 
			where j.CompanyId = @CompanyId  and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and applies.Applies < j.PeopleRequired and j.statusid = 1  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId, ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title, 0, c.Verified,cast(0 as bit), cast(0 as bit), cast(0 as bit), '' Wage, '' WageUnit, j.Gender, '' Term, j.DateCreated, j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from CampusJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from CampusJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and applies.Applies < j.PeopleRequired and j.statusid  = 1  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky, r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title, j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, '' Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from InternJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from InternJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies  
			where  j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and applies.Applies < j.PeopleRequired and j.statusid   = 1  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+   r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ServiceJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ServiceJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2 
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and applies.Applies < j.PeopleRequired and j.statusid   = 1  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+   r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from TutorJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from TutorJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry and applies.Applies < j.PeopleRequired  and j.statusid   = 1  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		)x  where (x.DateCreated >= @DateFrom or @DateFrom is null  ) 
		and (x.DateCreated < @DateTo + 1 or @DateTo is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
	) sub
	where RowNumber between @row_from and @row_to
	
end



GO
/****** Object:  StoredProcedure [dbo].[agent_get_business_undercarriage_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_get_business_undercarriage_job_list]
	@CompanyId		bigint,
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on

	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from(
	select AgentUserId,AdminId,JobId, JobTypeId, JobType,Recommended,Sticky, RegionId,Region, Title, Deposit, Verified, DateCreated,DatePublished, ViewTimes, StatusId, Status, PeopleRequired, IncludeDinner, IncludeCommission, IncludeRoom, Wage, WageUnit, Gender, Term, COUNT(0) over() TotalCount, row_number() over (order by DatePublished Desc ) RowNumber 
	from
	(
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region, j.Title, j.Deposit, c.Verified, j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ActivityJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ActivityJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies                     
			where j.CompanyId = @CompanyId  and j.Reptile = 0 
			and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry   or j.statusid = 3)   and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+   r.Name Region,j.Title, 0, c.Verified,cast(0 as bit), cast(0 as bit), cast(0 as bit), '' Wage, '' WageUnit, j.Gender, '' Term, j.DateCreated, j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from CampusJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from CampusJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry or   j.statusid = 3)  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky, r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title, j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, '' Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from InternJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from InternJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies  
			where  j.CompanyId = @CompanyId and j.Reptile = 0 
			and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry or   j.statusid = 3)  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+   r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ServiceJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ServiceJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2 
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry or   j.statusid = 3)  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		union all
		select JobId, j.JobTypeId, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+   r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from TutorJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId 
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from TutorJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.CompanyId = @CompanyId and j.Reptile = 0 
			and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry or   j.statusid = 3)  and j.DateDeleted is null
			and (j.AgentUserId is not null or (j.AgentUserId is null and j.AdminId is not null)) 
			and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and j.Disabled = 0 
		)x  where (x.DatePublished >= @DateFrom or @DateFrom is null  ) 
		and (x.DatePublished < @DateTo+1 or @DateTo is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
	) sub
	where RowNumber between @row_from and @row_to
	
end




GO
/****** Object:  StoredProcedure [dbo].[agent_get_campus_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_get_campus_job]
	@JobId bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select Title,cm.CompanyId,cm.fullname CompanyName,PeopleRequired,Gender,j.Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,j.Contact,ContactPhone,Sticky,StickyExpired,Recommended,
		t.name JobTypeName ,j.CategoryId,c.Name CategoryName, j.JobId,j.JobTypeId,r.RegionId,r.Name RegionName ,'' TermName  from campusjob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join Company cm on cm.CompanyId = j.CompanyId 
		left join CampusJobCategory c on c.categoryid = j.categoryid
		where jobid = @JobId and reptile = 0   and DateDeleted is null
end



GO
/****** Object:  StoredProcedure [dbo].[agent_get_company_approved_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_company_approved_job_list]
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on

	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from(
	select AgentUserId,AdminId,JobId, JobTypeId,CompanyName, JobType,Recommended,Sticky, RegionId,Region, Title, Deposit, Verified, DateCreated,DatePublished, ViewTimes, StatusId, Status, PeopleRequired, IncludeDinner, IncludeCommission, IncludeRoom, Wage, WageUnit, Gender, Term, COUNT(0) over() TotalCount, row_number() over (order by DatePublished Desc ) RowNumber 
	from
	(
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name Region, j.Title, j.Deposit, c.Verified, j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ActivityJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId 
		join region r on r.regionid = j.regionid
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ActivityJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies 
		where j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry 
		and applies.Applies < j.PeopleRequired and j.statusid = 2  and j.DateDeleted is null and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) 
		union all
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title, 0, c.Verified,cast(0 as bit), cast(0 as bit), cast(0 as bit), '' Wage, '' WageUnit, j.Gender, '' Term, j.DateCreated, j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from CampusJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		join region r on r.regionid = j.regionid
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from CampusJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
		where j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0  and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry 
		and applies.Applies < j.PeopleRequired and j.statusid = 2  and j.DateDeleted is null and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) 
		union all
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky, r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name Region,j.Title, j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, '' Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from InternJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		join region r on r.regionid = j.regionid
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from InternJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies  
			where  j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry 
			and applies.Applies < j.PeopleRequired and j.statusid  = 2  and j.DateDeleted is null and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) 
		union all
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ServiceJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join region r on r.regionid = j.regionid
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ServiceJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2 
			) applies
			where j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry 
			and applies.Applies < j.PeopleRequired and j.statusid  = 2  and j.DateDeleted is null and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) 
		union all
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky,r.RegionId, ISNULL(pr.Name + ' ','')+ r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from TutorJob j --*
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join region r on r.regionid = j.regionid
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from TutorJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry 
			and applies.Applies < j.PeopleRequired  and j.statusid  = 2  and j.DateDeleted is null and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) 
		)x  where (x.DatePublished >= @DateFrom or @DateFrom is null  ) 
		and (x.DatePublished < @DateTo+1 or @DateTo is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
		 
	) sub
	where RowNumber between @row_from and @row_to
	
end



GO
/****** Object:  StoredProcedure [dbo].[agent_get_company_pending_approve_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_company_pending_approve_job_list]
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on

	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from(
	select AgentUserId,AdminId,JobId, JobTypeId, CompanyName,JobType,Recommended,Sticky, RegionId,Region, Title, Deposit, Verified, DateCreated,DatePublished, ViewTimes, StatusId, Status, PeopleRequired, IncludeDinner, IncludeCommission, IncludeRoom, Wage, WageUnit, Gender, Term, COUNT(0) over() TotalCount, row_number() over (order by DateCreated Desc ) RowNumber 
	from
	(
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region, j.Title, j.Deposit, c.Verified, j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ActivityJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ActivityJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies 
		where j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 
		and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry 
		and applies.Applies < j.PeopleRequired and j.statusid = 1  and j.DateDeleted is null  and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) 
		union all
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky,r.RegionId, ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title, 0, c.Verified,cast(0 as bit), cast(0 as bit), cast(0 as bit), '' Wage, '' WageUnit, j.Gender, '' Term, j.DateCreated, j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from CampusJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from CampusJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
		where j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 
		and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry 
		and applies.Applies < j.PeopleRequired and j.statusid  = 1  and j.DateDeleted is null  and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) 
		union all
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky, r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title, j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, '' Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from InternJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from InternJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies  
			where  j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry 
			and applies.Applies < j.PeopleRequired and j.statusid   = 1  and j.DateDeleted is null and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) 
		union all
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky,r.RegionId, ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ServiceJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ServiceJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2 
			) applies
			where j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry 
			and applies.Applies < j.PeopleRequired and j.statusid   = 1  and j.DateDeleted is null and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) 
		union all
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+   r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from TutorJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from TutorJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 
			and dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry 
			and applies.Applies < j.PeopleRequired  and j.statusid   = 1  and j.DateDeleted is null and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) 
		)x  where (x.DateCreated >= @DateFrom or @DateFrom is null  ) 
		and (x.DateCreated < @DateTo + 1 or @DateTo is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
	) sub
	where RowNumber between @row_from and @row_to
	
end



GO
/****** Object:  StoredProcedure [dbo].[agent_get_company_undercarriage_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_company_undercarriage_job_list]
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on

	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from(
	select AgentUserId,AdminId,JobId, JobTypeId,CompanyName, JobType,Recommended,Sticky, RegionId,Region, Title, Deposit, Verified, DateCreated,DatePublished, ViewTimes, StatusId, Status, PeopleRequired, IncludeDinner, IncludeCommission, IncludeRoom, Wage, WageUnit, Gender, Term, COUNT(0) over() TotalCount, row_number() over (order by DateCreated Desc ) RowNumber 
	from
	(
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky,r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region, j.Title, j.Deposit, c.Verified, j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ActivityJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ActivityJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies                     
		where j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry or applies.Applies >= j.PeopleRequired or j.statusid = 3)   and j.DateDeleted is null
		union all
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky,r.RegionId, ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title, 0, c.Verified,cast(0 as bit), cast(0 as bit), cast(0 as bit), '' Wage, '' WageUnit, j.Gender, '' Term, j.DateCreated, j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from CampusJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from CampusJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
		where j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null)  and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry or applies.Applies >= j.PeopleRequired or j.statusid = 3)  and j.DateDeleted is null
		union all
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky, r.RegionId,ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title, j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, '' Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from InternJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from InternJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies  
			where  j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null)  and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry or applies.Applies >= j.PeopleRequired or j.statusid = 3)  and j.DateDeleted is null
		union all
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky,r.RegionId, ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from ServiceJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from ServiceJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2 
			) applies
			where j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null)  and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry or applies.Applies >= j.PeopleRequired or j.statusid = 3)  and j.DateDeleted is null
		union all
		select JobId, j.JobTypeId,c.FullName CompanyName, t.Name JobType,j.Recommended,j.Sticky,r.RegionId, ISNULL(pr.Name + ' ','')+  r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,j.DateCreated,  j.DatePublished, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired,j.AgentUserId,j.AdminId
		from TutorJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		outer apply(
				select COUNT(0) Applies
				from TutorJobApply aa 
				where aa.JobId = j.JobId and aa.StatusId = 2
			) applies
			where j.Reptile = 0 and j.AgentUserId is null and j.AdminId is null and j.Disabled = 0 and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null)  and (dateadd(d,0,datediff(d,0,getdate())) not between j.datefrom and j.dateexpiry or applies.Applies >= j.PeopleRequired or j.statusid = 3)  and j.DateDeleted is null
		)x  where (x.DatePublished >= @DateFrom or @DateFrom is null  ) 
		and (x.DatePublished < @DateTo+1 or @DateTo is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
	) sub
	where RowNumber between @row_from and @row_to
	
end



GO
/****** Object:  StoredProcedure [dbo].[agent_get_complained_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [dbo].[agent_get_complained_job]
	@JobId bigint,
	@JobTypeId int
as
begin set transaction isolation level read uncommitted	set nocount on
	if @JobTypeId = 1 
	begin
		select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName , p.Name PositionName ,j.JobId,j.JobTypeId,u.Name WageUnitName,r.Name RegionName,m.Name TermName  from activityJob j
		join jobtype t on j.jobtypeid = t.typeid 
		join region r on r.regionid = j.regionid
		join ActivityJobPosition p on j.positionid = p.positionid 
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId and reptile = 0 and DateDeleted is null
	end
	if @JobTypeId = 2 
	begin
		declare @Wage money,@IncludeDinner bit,@IncludeRoom bit,@IncludeCommission bit,@Deposit money
		select @Wage = 0.0,@IncludeDinner = 0,@IncludeRoom = 0,@IncludeCommission = 0,@Deposit = 0.0
		select Title,CompanyName,PeopleRequired,Gender,@Wage Wage,@IncludeDinner IncludeDinner,@IncludeRoom IncludeRoom,@IncludeCommission IncludeCommission,@Deposit Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,c.Name PositionName, j.JobId,j.JobTypeId,'' WageUnitName,r.Name RegionName ,'' TermName  from campusjob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join CampusJobCategory c on c.categoryid = j.categoryid
		where jobid = @JobId and reptile = 0   and DateDeleted is null
	end
	if @JobTypeId = 3 
	begin
		select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName , c.Name PositionName,j.JobId,j.JobTypeId,u.Name WageUnitName ,r.Name RegionName,'月结' TermName  from internJob j 
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join InternJobCategory c on c.categoryid = j.categoryid
		left join WageUnit u on j.WageUnitId = u.UnitId
		where jobid = @JobId and reptile = 0 and DateDeleted is null
	end
	if @JobTypeId = 4 
	begin
		select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,( c.Name + '|'+ p.Name ) PositionName,j.JobId,j.JobTypeId,u.Name WageUnitName,r.Name RegionName,m.Name TermName    from servicejob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join ServiceJobPosition p on p.positionid = j.positionid
		left join ServiceJobCategory c on c.categoryid = j.categoryid
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId and reptile = 0 and DateDeleted is null
	end
	if @JobTypeId = 5 
	begin
		select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,(l.Name + '|'+ p.Name ) PositionName,j.JobId,j.JobTypeId,u.Name WageUnitName,r.Name RegionName,m.Name TermName    from tutorjob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join TutorJobPaper p on p.PaperId = j.paperid
		left join TutorJobLevel l on l.levelid = j.LevelId
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId and reptile = 0 and DateDeleted is null
	end
end


GO
/****** Object:  StoredProcedure [dbo].[agent_get_enterprise_info]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_enterprise_info]
	@UserId int,
	@UserTypeId int,
	@CompanyName	nvarchar(50),
	@Mobile nvarchar(50),
	@DateFrom datetime,
	@DateTo datetime,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Verified bit,
	@Balance bit,
	@Status bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize
	
	select *
	from
	(
		select c.CompanyId,c.RegionId,r.Name RegionName, c.Mobile,c.Email ,c.Status,isnull(c.FullName,'') FullName, isnull(c.Address,'') Address, isnull(c.Introduction,'') Introduction, 
			isnull(c.LicensePhoto,'') LicensePhoto, isnull(c.AgentPhoto,'') AgentPhoto, c.Verified, c.Balance, c.VoiceAlert, c.Vibrate,c.DateCreated,c.AgentUserId,
			COUNT(0) over() TotalCount,row_number() over (order by c.DateCreated desc) as [row]
		from Company c
		left join Region r on r.RegionId = c.RegionId
		where (c.RegionId =  @RegionId or @RegionId is null or c.RegionId is null)
			and (c.Mobile like  '%'+@Mobile+'%' or @Mobile is null ) 
			and (c.FullName like '%'+@CompanyName+'%' or @CompanyName is null )
			and (c.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null or c.RegionId is null) 
			and (c.Verified =  @Verified or @Verified is null )
			and ((@Balance = 1 and c.Balance > 0) or @Balance is null or (@Balance = 0 and c.Balance = 0))
			and (c.Status =  @Status or @Status is null )
			and (c.DateCreated >= @DateFrom or @DateFrom is null  ) 
			and (c.DateCreated < @DateTo+1 or @DateTo is null )
			and (@UserTypeId != 3 or (@UserTypeId = 3 and c.AgentUserId = @UserId))
	) sub
	where sub.row between @row_from and @row_to
	order by [row]
end

GO
/****** Object:  StoredProcedure [dbo].[agent_get_enterprise_user_info]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_enterprise_user_info]
	@CompanyId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select c.CompanyId, Mobile,c.Email,c.Status, r.RegionId,r.Name RegionName, isnull(c.FullName,'') FullName ,[PendingFullName], isnull(c.Address,'') Address, isnull(c.Introduction,'') Introduction, 
		isnull(c.LicensePhoto,'') LicensePhoto, isnull(c.AgentPhoto,'') AgentPhoto, c.Verified, c.Balance, c.VoiceAlert, c.Vibrate
	from Company c
	left join region r on r.RegionId = c.RegionId
	where CompanyId =  @CompanyId
	
end



GO
/****** Object:  StoredProcedure [dbo].[agent_get_intern_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_intern_job]
	@JobId bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select Title,cm.CompanyId,cm.fullname CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,j.Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,j.Contact,ContactPhone,Sticky,StickyExpired,Recommended,
		t.name JobTypeName ,j.CategoryId, c.Name CategoryName,j.JobId,j.JobTypeId,u.Name WageUnitName ,r.RegionId ,r.Name RegionName,'月结' TermName  from internJob j 
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join Company cm on cm.CompanyId = j.CompanyId 
		left join InternJobCategory c on c.categoryid = j.categoryid
		left join WageUnit u on j.WageUnitId = u.UnitId
		where jobid = @JobId and reptile = 0  and DateDeleted is null
end


GO
/****** Object:  StoredProcedure [dbo].[agent_get_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[agent_get_job]
	@JobId bigint,
	@JobTypeId int
as
begin set transaction isolation level read uncommitted	set nocount on
	if @JobTypeId = 1 
	begin
		select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName , p.Name PositionName ,j.JobId,j.JobTypeId,u.Name WageUnitName,r.Name RegionName,m.Name TermName,j.Reptile   from activityJob j
		join jobtype t on j.jobtypeid = t.typeid 
		join region r on r.regionid = j.regionid
		join ActivityJobPosition p on j.positionid = p.positionid 
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId  and DateDeleted is null
	end
	if @JobTypeId = 2 
	begin
		declare @Wage money,@IncludeDinner bit,@IncludeRoom bit,@IncludeCommission bit,@Deposit money
		select @Wage = 0.0,@IncludeDinner = 0,@IncludeRoom = 0,@IncludeCommission = 0,@Deposit = 0.0
		select Title,CompanyName,PeopleRequired,Gender,@Wage Wage,@IncludeDinner IncludeDinner,@IncludeRoom IncludeRoom,@IncludeCommission IncludeCommission,@Deposit Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,c.Name PositionName, j.JobId,j.JobTypeId,'' WageUnitName,r.Name RegionName ,'' TermName ,j.Reptile  from campusjob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join CampusJobCategory c on c.categoryid = j.categoryid
		where jobid = @JobId  and DateDeleted is null
	end
	if @JobTypeId = 3 
	begin
		select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName , c.Name PositionName,j.JobId,j.JobTypeId,u.Name WageUnitName ,r.Name RegionName,'月结' TermName ,j.Reptile  from internJob j 
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join InternJobCategory c on c.categoryid = j.categoryid
		left join WageUnit u on j.WageUnitId = u.UnitId
		where jobid = @JobId and DateDeleted is null
	end
	if @JobTypeId = 4 
	begin
		select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,( c.Name + '|'+ p.Name ) PositionName,j.JobId,j.JobTypeId,u.Name WageUnitName,r.Name RegionName,m.Name TermName,j.Reptile     from servicejob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join ServiceJobPosition p on p.positionid = j.positionid
		left join ServiceJobCategory c on c.categoryid = j.categoryid
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId and DateDeleted is null
	end
	if @JobTypeId = 5 
	begin
		select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,(l.Name + '|'+ p.Name ) PositionName,j.JobId,j.JobTypeId,u.Name WageUnitName,r.Name RegionName,m.Name TermName,j.Reptile     from tutorjob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join TutorJobPaper p on p.PaperId = j.paperid
		left join TutorJobLevel l on l.levelid = j.LevelId
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId  and DateDeleted is null
	end
end




GO
/****** Object:  StoredProcedure [dbo].[agent_get_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[agent_get_job_list]
	@UserId int,
	@UserTypeId int,
	@DateFrom datetime,
	@DateTo datetime,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select * 
	from( 
		select *, COUNT(0) over() TotalCount, row_number() over (order by LastApplyDate Desc ,JobId ) RowNumber 
		from(
			select  aj.JobId,aj.CompanyId,c.FullName CompanyName,Title,JobTypeId,j.Name JobTypeName,aj.StatusId,r.RegionId,r.Name RegionName,DatePublished,aj.DateDeleted,aj.DateCreated,aj.DateModified,a.LastApplyDate,aj.AgentUserId,aj.AdminId
			from ActivityJob aj ,Region r,JobType j ,Company c ,
			(select x.JobId ,y.ApplyCount,LastApplyDate from 
			(select * ,max(DateCreated) over(partition by JobId) as LastApplyDate from ActivityJobApply) x ,
			(select JobId, count(JobId) as ApplyCount from ActivityJobApply where statusId =1  group by JobId) y
			where x.DateCreated = LastApplyDate and y.jobid = x.JobId ) a 
			where c.CompanyId = aj.CompanyId and a.JobId = aj.JobId and r.RegionId = aj.RegionId and j.TypeId = aj.JobTypeId and aj.Reptile = '0' 
			union all 
			select  cj.JobId,cj.CompanyId,c.FullName CompanyName,Title,JobTypeId,j.Name JobTypeName,cj.StatusId,r.RegionId,r.Name RegionName,DatePublished,cj.DateDeleted,cj.DateCreated,cj.DateModified,a.LastApplyDate ,cj.AgentUserId,cj.AdminId
			from CampusJob cj ,Region r,JobType j ,Company c ,
			(select x.JobId ,y.ApplyCount,LastApplyDate from 
			(select * ,max(DateCreated) over(partition by JobId) as LastApplyDate from CampusJobApply) x ,
			(select JobId, count(JobId) as ApplyCount from CampusJobApply where statusId =1  group by JobId) y
			where x.DateCreated = LastApplyDate and y.jobid = x.JobId) a  
			where c.CompanyId = cj.CompanyId and a.JobId = cj.JobId and r.RegionId = cj.RegionId and j.TypeId = cj.JobTypeId  and cj.Reptile = '0' 
			union all
			select  ij.JobId,ij.CompanyId,c.FullName CompanyName,Title,JobTypeId,j.Name JobTypeName,ij.StatusId,r.RegionId,r.Name RegionName,DatePublished,ij.DateDeleted,ij.DateCreated,ij.DateModified,a.LastApplyDate ,ij.AgentUserId,ij.AdminId
			from InternJob ij ,Region r,JobType j ,Company c ,
			(select x.JobId ,y.ApplyCount,LastApplyDate from 
			(select * ,max(DateCreated) over(partition by JobId) as LastApplyDate from InternJobApply) x ,
			(select JobId, count(JobId) as ApplyCount from InternJobApply where statusId =1  group by JobId) y
			where x.DateCreated = LastApplyDate and y.jobid = x.JobId ) a  
			where c.CompanyId = ij.CompanyId and a.JobId = ij.JobId and r.RegionId = ij.RegionId and j.TypeId = ij.JobTypeId  and ij.Reptile = '0' 
			union all 
			select  sj.JobId,sj.CompanyId,c.FullName CompanyName,Title,JobTypeId,j.Name JobTypeName,sj.StatusId,r.RegionId,r.Name RegionName,DatePublished,sj.DateDeleted,sj.DateCreated,sj.DateModified,a.LastApplyDate,sj.AgentUserId,sj.AdminId
			from ServiceJob sj ,Region r,JobType j ,Company c ,
			(select x.JobId ,y.ApplyCount,LastApplyDate from 
			(select * ,max(DateCreated) over(partition by JobId) as LastApplyDate from ServiceJobApply) x ,
			(select JobId, count(JobId) as ApplyCount from ServiceJobApply where statusId =1  group by JobId) y
			where x.DateCreated = LastApplyDate and y.jobid = x.JobId ) a  
			where c.CompanyId = sj.CompanyId and a.JobId = sj.JobId and r.RegionId = sj.RegionId and j.TypeId = sj.JobTypeId  and sj.Reptile = '0' 
			union all 
			select  tj.JobId,tj.CompanyId,c.FullName CompanyName,Title,JobTypeId,j.Name JobTypeName,tj.StatusId,r.RegionId,r.Name RegionName,DatePublished,tj.DateDeleted,tj.DateCreated,tj.DateModified,a.LastApplyDate ,tj.AgentUserId,tj.AdminId
			from TutorJob tj ,Region r,JobType j ,Company c ,
			(select x.JobId ,y.ApplyCount,LastApplyDate from 
			(select * ,max(DateCreated) over(partition by JobId) as LastApplyDate from TutorJobApply) x ,
			(select JobId, count(JobId) as ApplyCount from TutorJobApply where statusId =1  group by JobId) y
			where x.DateCreated = LastApplyDate and y.jobid = x.JobId) a  
			where c.CompanyId = tj.CompanyId and a.JobId = tj.JobId and r.RegionId = tj.RegionId and j.TypeId = tj.JobTypeId  and tj.Reptile = '0' 
		
		) x where (x.LastApplyDate >= @DateFrom or @DateFrom is null  ) 
		and (x.LastApplyDate < @DateTo+1 or @DateTo is null )
		and (@UserTypeId != 3 or (@UserTypeId = 3 and x.AgentUserId = @UserId))
		and x.DateDeleted is null
	) sub 
	where RowNumber between @row_from and @row_to
	order by LastApplyDate Desc ,JobId 
end



GO
/****** Object:  StoredProcedure [dbo].[agent_get_normal_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[agent_get_normal_job_list]
	@CompanyName nvarchar(50),
	@Mobile nvarchar(50),
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select * 
	from( 
		select *, COUNT(0) over() TotalCount, row_number() over (order by DatePublished Desc ,JobId ) RowNumber 
		from(
			select  aj.datefrom,aj.dateexpiry, 
			aj.JobId,aj.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,aj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,aj.DateDeleted,aj.DateCreated,aj.DateModified,aj.Recommended,aj.Sticky ,aj.AgentUserId,aj.AdminId
			from ActivityJob aj 
			join Region r on r.RegionId = aj.RegionId
			join JobType j on j.TypeId = aj.JobTypeId 
			left join Company c on c.CompanyId = aj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from ActivityJobApply aa 
				where aa.JobId = aj.JobId and aa.StatusId = 2
			) applies 
			where aj.Reptile = 0 and dateadd(d,0,datediff(d,0,getdate())) between aj.datefrom and aj.dateexpiry and  aj.statusid = 2
			and (aj.AgentUserId is not null or (aj.AgentUserId is null and aj.AdminId is not null)) and aj.DateDeleted is null 
			and (aj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and aj.Disabled = 0 
			union all 
			select  cj.datefrom,cj.dateexpiry,
			cj.JobId,cj.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,cj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,cj.DateDeleted,cj.DateCreated,cj.DateModified,cj.Recommended,cj.Sticky ,cj.AgentUserId,cj.AdminId
			from CampusJob cj 
			join Region r on r.RegionId = cj.RegionId
			join JobType j on j.TypeId = cj.JobTypeId 
			left join Company c on c.CompanyId = cj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from CampusJobApply aa 
				where aa.JobId = cj.JobId and aa.StatusId = 2
			) applies
			where  cj.Reptile = 0 and dateadd(d,0,datediff(d,0,getdate())) between cj.datefrom and cj.dateexpiry  and cj.statusid = 2
			and (cj.AgentUserId is not null or (cj.AgentUserId is null and cj.AdminId is not null)) and cj.DateDeleted is null 
			and (cj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and cj.Disabled = 0 
			union all
			select  ij.datefrom,ij.dateexpiry,
			ij.JobId,ij.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,ij.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,ij.DateDeleted,ij.DateCreated,ij.DateModified,ij.Recommended,ij.Sticky ,ij.AgentUserId,ij.AdminId
			from InternJob ij 
			join Region r on r.RegionId = ij.RegionId
			join JobType j on j.TypeId = ij.JobTypeId 
			left join Company c on c.CompanyId = ij.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from InternJobApply aa 
				where aa.JobId = ij.JobId and aa.StatusId = 2
			) applies  
			where  ij.Reptile = 0 and dateadd(d,0,datediff(d,0,getdate())) between ij.datefrom and ij.dateexpiry  and ij.statusid = 2
			and (ij.AgentUserId is not null or (ij.AgentUserId is null and ij.AdminId is not null)) and ij.DateDeleted is null 
			and (ij.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and ij.Disabled = 0 
			union all 
			select  sj.datefrom,sj.dateexpiry,
			sj.JobId,sj.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,sj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,sj.DateDeleted,sj.DateCreated,sj.DateModified,sj.Recommended,sj.Sticky ,sj.AgentUserId,sj.AdminId
			from ServiceJob sj 
			join Region r on r.RegionId = sj.RegionId
			join JobType j on j.TypeId = sj.JobTypeId 
			left join Company c on c.CompanyId = sj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from ServiceJobApply aa 
				where aa.JobId = sj.JobId and aa.StatusId = 2 
			) applies
			where sj.Reptile = 0 and dateadd(d,0,datediff(d,0,getdate())) between sj.datefrom and sj.dateexpiry and sj.statusid = 2
			and (sj.AgentUserId is not null or (sj.AgentUserId is null and sj.AdminId is not null)) and sj.DateDeleted is null 
			and (sj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and sj.Disabled = 0 
			union all 
			select  tj.datefrom,tj.dateexpiry,
			tj.JobId,tj.CompanyId,c.FullName CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,tj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,tj.DateDeleted,tj.DateCreated,tj.DateModified,tj.Recommended,tj.Sticky  ,tj.AgentUserId,tj.AdminId
			from TutorJob tj 
			join Region r on r.RegionId = tj.RegionId
			join JobType j on j.TypeId = tj.JobTypeId 
			left join Company c on c.CompanyId = tj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from TutorJobApply aa 
				where aa.JobId = tj.JobId and aa.StatusId = 2
			) applies
			where tj.Reptile = 0 and dateadd(d,0,datediff(d,0,getdate())) between tj.datefrom and tj.dateexpiry and tj.statusid = 2
			and (tj.AgentUserId is not null or (tj.AgentUserId is null and tj.AdminId is not null)) and tj.DateDeleted is null 
			and (tj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and tj.Disabled = 0 
		
		) x where (x.DatePublished >= @DateFrom or @DateFrom is null  ) 
		and (x.DatePublished < @DateTo+1 or @DateTo is null )
		and (x.CompanyName like '%' + @CompanyName + '%'   or @CompanyName is null )
		and (x.CompanyMobile like '%' + @Mobile + '%'   or @Mobile is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
		 and x.DateDeleted is null
	) sub 
	where RowNumber between @row_from and @row_to
	order by DatePublished Desc ,JobId 
end






GO
/****** Object:  StoredProcedure [dbo].[agent_get_promoter_detail]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_promoter_detail]
	@PromoterId	int
as
begin set transaction isolation level read uncommitted	set nocount on
	select p.PromoterId, p.UserName PromoterName, p.DateCreated PromoterCreated, t.Name TeamName, t.TeamId, u.Mobile, u.FullName, u.UserId, m.DateCreated MemberCreated, m.Leader,
		SUM(case when u.UserId is null then 0 else 1 end) over(partition by p.PromoterId) PromoterCount, 
		SUM(case when u.UserId is null then 0 else 1 end) over(partition by t.teamId) TeamCount, 
		SUM(case when u.UserId is null then 0 else 1 end) over() TotalCount
	from Promoter p
	left join PromoterTeam t on t.PromoterId = p.PromoterId and t.DateDeleted is null
	left join PromoterTeamMember m on m.TeamId = t.TeamId
	left join [User] u on u.UserId = m.UserId
	where p.PromoterId = @PromoterId
	order by p.DateCreated, t.DateCreated, m.DateCreated
end

GO
/****** Object:  StoredProcedure [dbo].[agent_get_promoter_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_promoter_list]
	@AgentUserId	int,
	@DateFrom	datetime,
	@DateTo		datetime,
	@PromoterName	nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on
	--declare @AgentUserTypeId int
	--select @AgentUserTypeId = TypeId from AgentUser where UserId = @AgentUserId
	select  *,SUM(case when sub.UserId is null then 0 else 1 end) over(partition by sub.PromoterId) PromoterCount, 
			count(0) over(partition by sub.PromoterId) PromoterSpan, 
			SUM(case when sub.UserId is null then 0 else 1 end) over(partition by sub.teamId) TeamCount, 
			SUM(case when sub.UserId is null then 0 else 1 end) over(partition by sub.PromoterId) TotalCount 
	from(
		-- 所有联盟账号都由总代创建 
		-- 市总代创建的 联盟账号 (包括分配给总代内部和市代的所有联盟） -- 如果是市代理登录，则不会有值
		select distinct   p.PromoterId, p.UserName PromoterName, p.DateCreated PromoterCreated,t.TeamId, t.Name TeamName, t.DateCreated TeamCreated, u.Mobile, u.FullName, u.UserId, m.DateCreated MemberCreated, m.Leader
			 
		from Promoter p    
		inner join AgentUser on  p.CreatedByAgentUserId=AdminAgentUserID or p.CreatedByAgentUserId=userid or  AgentUser.promoterid=p.promoterid 
		left join PromoterTeam t on t.PromoterId = p.PromoterId and t.DateDeleted is null
		left join PromoterTeamMember m on m.TeamId = t.TeamId
		left join [User] u on u.UserId = m.UserId
		where p.DateDeleted is null and (p.CreatedByAgentUserId = @AgentUserId OR (@AgentUserId=AdminAgentUserID or @AgentUserId=AgentUser.userid))--市总代其下属部门创建相关联盟
			and (p.UserName like '%'+@PromoterName+'%' or isnull(@PromoterName,'')='')
			and (p.DateCreated > @DateFrom or @DateFrom is null)
			and (p.DateCreated < DateAdd(d,1,@DateTo) or @DateTo is null)
			and TypeId = 1  -- 市总代 
			
		-- 如果是市代理登录，则只显示分配给市代自己的联盟
		union all
		select  distinct   p.PromoterId, p.UserName PromoterName, p.DateCreated PromoterCreated, t.TeamId, t.Name TeamName, t.DateCreated TeamCreated, u.Mobile, u.FullName, u.UserId, m.DateCreated MemberCreated, m.Leader 
		from Promoter p
		join AgentUser au on au.PromoterId = p.PromoterId
		left join PromoterTeam t on t.PromoterId = p.PromoterId and t.DateDeleted is null
		left join PromoterTeamMember m on m.TeamId = t.TeamId
		left join [User] u on u.UserId = m.UserId
		where p.DateDeleted is null and au.UserId = @AgentUserId
			and (p.UserName like '%'+@PromoterName+'%' or isnull(@PromoterName,'')='')
			and (p.DateCreated > @DateFrom or @DateFrom is null)
			and (p.DateCreated < DateAdd(d,1,@DateTo) or @DateTo is null)
			and TypeId = 3  -- 市代
	) sub
	order by PromoterCreated, TeamCreated, MemberCreated
end



GO
/****** Object:  StoredProcedure [dbo].[agent_get_reptile_activity_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[agent_get_reptile_activity_job]
	@JobId bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,j.Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,j.PositionId, p.Name PositionName ,j.JobId,j.JobTypeId,u.Name WageUnitName,r.RegionId,r.Name RegionName,m.Name TermName  from activityJob j
		join jobtype t on j.jobtypeid = t.typeid 
		join region r on r.regionid = j.regionid
		join ActivityJobPosition p on j.positionid = p.positionid 
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId and reptile = 1 and DateDeleted is null
end






GO
/****** Object:  StoredProcedure [dbo].[agent_get_reptile_campus_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[agent_get_reptile_campus_job]
	@JobId bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select Title,CompanyName,PeopleRequired,Gender,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,j.Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,j.CategoryId,c.Name CategoryName, j.JobId,j.JobTypeId,r.RegionId,r.Name RegionName ,'' TermName  from campusjob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join CampusJobCategory c on c.categoryid = j.categoryid
		where jobid = @JobId and reptile = 1  and DateDeleted is null
end






GO
/****** Object:  StoredProcedure [dbo].[agent_get_reptile_intern_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[agent_get_reptile_intern_job]
	@JobId bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,j.CategoryId, c.Name CategoryName,j.JobId,j.JobTypeId,u.Name WageUnitName ,r.RegionId,r.Name RegionName,'月结' TermName  from internJob j 
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join InternJobCategory c on c.categoryid = j.categoryid
		left join WageUnit u on j.WageUnitId = u.UnitId
		where jobid = @JobId and reptile = 1 and DateDeleted is null
end





GO
/****** Object:  StoredProcedure [dbo].[agent_get_reptile_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[agent_get_reptile_job]
	@JobId bigint,
	@JobTypeId int
as
begin set transaction isolation level read uncommitted	set nocount on
	if @JobTypeId = 1 
	begin
		select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName , p.Name PositionName ,j.JobId,j.JobTypeId,u.Name WageUnitName,r.Name RegionName,m.Name TermName  from activityJob j
		join jobtype t on j.jobtypeid = t.typeid 
		join region r on r.regionid = j.regionid
		join ActivityJobPosition p on j.positionid = p.positionid 
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId and reptile = 1 and DateDeleted is null and Disabled = 0
	end
	if @JobTypeId = 2 
	begin
		select Title,CompanyName,PeopleRequired,Gender,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,c.Name PositionName, j.JobId,j.JobTypeId,r.Name RegionName ,'' TermName  from campusjob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join CampusJobCategory c on c.categoryid = j.categoryid
		where jobid = @JobId and reptile = 1   and DateDeleted is null and Disabled = 0
	end
	if @JobTypeId = 3 
	begin
		select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName , c.Name PositionName,j.JobId,j.JobTypeId,u.Name WageUnitName ,r.Name RegionName,'月结' TermName  from internJob j 
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join InternJobCategory c on c.categoryid = j.categoryid
		left join WageUnit u on j.WageUnitId = u.UnitId
		where jobid = @JobId and reptile = 1 and DateDeleted is null and Disabled = 0
	end
	if @JobTypeId = 4 
	begin
		select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,( c.Name + '|'+ p.Name ) PositionName,j.JobId,j.JobTypeId,u.Name WageUnitName,r.Name RegionName,m.Name TermName    from servicejob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join ServiceJobPosition p on p.positionid = j.positionid
		left join ServiceJobCategory c on c.categoryid = j.categoryid
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId and reptile = 1 and DateDeleted is null and Disabled = 0
	end
	if @JobTypeId = 5 
	begin
		select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,(l.Name + '|'+ p.Name ) PositionName,j.JobId,j.JobTypeId,u.Name WageUnitName,r.Name RegionName,m.Name TermName    from tutorjob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join TutorJobPaper p on p.PaperId = j.paperid
		left join TutorJobLevel l on l.levelid = j.LevelId
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId and reptile = 1 and DateDeleted is null and Disabled = 0
	end
end




GO
/****** Object:  StoredProcedure [dbo].[agent_get_reptile_normal_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[agent_get_reptile_normal_job_list]
	@CompanyName nvarchar(50),
	@Mobile nvarchar(50),
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select * 
	from( 
		select *, COUNT(0) over() TotalCount, row_number() over (order by DatePublished Desc ,JobId ) RowNumber 
		from(
			select  aj.datefrom,aj.dateexpiry, 
			aj.JobId,aj.CompanyId,CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,aj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,aj.DateDeleted,aj.DateCreated,aj.DateModified,aj.Recommended,aj.Sticky ,aj.AgentUserId,aj.AdminId
			from ActivityJob aj 
			join Region r on r.RegionId = aj.RegionId
			join JobType j on j.TypeId = aj.JobTypeId 
			left join Company c on c.CompanyId = aj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where aj.Reptile = 1 and dateadd(d,0,datediff(d,0,getdate())) between aj.datefrom and aj.dateexpiry  and aj.statusid = 2
			and  aj.DateDeleted is null and (aj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and aj.Disabled = 0 
			union all 
			select  cj.datefrom,cj.dateexpiry,
			cj.JobId,cj.CompanyId,CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,cj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,cj.DateDeleted,cj.DateCreated,cj.DateModified,cj.Recommended,cj.Sticky ,cj.AgentUserId,cj.AdminId
			from CampusJob cj 
			join Region r on r.RegionId = cj.RegionId
			join JobType j on j.TypeId = cj.JobTypeId 
			left join Company c on c.CompanyId = cj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where  cj.Reptile = 1 and dateadd(d,0,datediff(d,0,getdate())) between cj.datefrom and cj.dateexpiry and cj.statusid = 2
			and  cj.DateDeleted is null and (cj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and cj.Disabled = 0 
			union all
			select  ij.datefrom,ij.dateexpiry,
			ij.JobId,ij.CompanyId,CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,ij.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,ij.DateDeleted,ij.DateCreated,ij.DateModified,ij.Recommended,ij.Sticky ,ij.AgentUserId,ij.AdminId
			from InternJob ij 
			join Region r on r.RegionId = ij.RegionId
			join JobType j on j.TypeId = ij.JobTypeId 
			left join Company c on c.CompanyId = ij.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where  ij.Reptile = 1 and dateadd(d,0,datediff(d,0,getdate())) between ij.datefrom and ij.dateexpiry  and ij.statusid = 2
			and  ij.DateDeleted is null and (ij.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and ij.Disabled = 0 
			union all 
			select  sj.datefrom,sj.dateexpiry,
			sj.JobId,sj.CompanyId,CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,sj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,sj.DateDeleted,sj.DateCreated,sj.DateModified,sj.Recommended,sj.Sticky ,sj.AgentUserId,sj.AdminId
			from ServiceJob sj 
			join Region r on r.RegionId = sj.RegionId
			join JobType j on j.TypeId = sj.JobTypeId 
			left join Company c on c.CompanyId = sj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where sj.Reptile = 1 and dateadd(d,0,datediff(d,0,getdate())) between sj.datefrom and sj.dateexpiry and sj.statusid = 2
			and  sj.DateDeleted is null and (sj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and sj.Disabled = 0 
			union all 
			select  tj.datefrom,tj.dateexpiry,
			tj.JobId,tj.CompanyId,tj.CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,tj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,tj.DateDeleted,tj.DateCreated,tj.DateModified,tj.Recommended,tj.Sticky   ,tj.AgentUserId,tj.AdminId
			from TutorJob tj 
			join Region r on r.RegionId = tj.RegionId
			join JobType j on j.TypeId = tj.JobTypeId 
			left join Company c on c.CompanyId = tj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where tj.Reptile = 1 and dateadd(d,0,datediff(d,0,getdate())) between tj.datefrom and tj.dateexpiry   and tj.statusid = 2
			and  tj.DateDeleted is null and (tj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and tj.Disabled = 0 
		) x where (x.DatePublished >= @DateFrom or @DateFrom is null  ) 
		and (x.DatePublished <@DateTo+1 or @DateTo is null )
		and (x.CompanyName like '%' + @CompanyName + '%'   or @CompanyName is null )
		and (x.CompanyMobile like '%' + @Mobile + '%'   or @Mobile is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null ) 
		and x.DateDeleted is null
	) sub 
	where RowNumber between @row_from and @row_to
	order by DatePublished Desc ,JobId 
end





GO
/****** Object:  StoredProcedure [dbo].[agent_get_reptile_pending_approve_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create procedure [dbo].[agent_get_reptile_pending_approve_job_list]
	@CompanyName nvarchar(50),
	@Mobile nvarchar(50),
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select * 
	from( 
		select *, COUNT(0) over() TotalCount, row_number() over (order by DatePublished Desc ,JobId ) RowNumber 
		from(
			select  aj.datefrom,aj.dateexpiry,
			aj.JobId,aj.CompanyId,CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,aj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,aj.DateDeleted,aj.DateCreated,aj.DateModified,aj.Recommended,aj.Sticky ,aj.AgentUserId,aj.AdminId
			from ActivityJob aj 
			join Region r on r.RegionId = aj.RegionId
			join JobType j on j.TypeId = aj.JobTypeId 
			left join Company c on c.CompanyId = aj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where aj.Reptile = 1  and  aj.statusid = 1
			and  aj.DateDeleted is null and (aj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and aj.Disabled = 0 
			union all 
			select  cj.datefrom,cj.dateexpiry,
			cj.JobId,cj.CompanyId,CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,cj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,cj.DateDeleted,cj.DateCreated,cj.DateModified,cj.Recommended,cj.Sticky ,cj.AgentUserId,cj.AdminId
			from CampusJob cj 
			join Region r on r.RegionId = cj.RegionId
			join JobType j on j.TypeId = cj.JobTypeId 
			left join Company c on c.CompanyId = cj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where  cj.Reptile = 1  and cj.statusid = 1
			and  cj.DateDeleted is null and (cj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and cj.Disabled = 0 
			union all
			select  ij.datefrom,ij.dateexpiry,
			ij.JobId,ij.CompanyId,CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,ij.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,ij.DateDeleted,ij.DateCreated,ij.DateModified,ij.Recommended,ij.Sticky ,ij.AgentUserId,ij.AdminId
			from InternJob ij 
			join Region r on r.RegionId = ij.RegionId
			join JobType j on j.TypeId = ij.JobTypeId 
			left join Company c on c.CompanyId = ij.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where  ij.Reptile = 1 and ij.statusid = 1
			and  ij.DateDeleted is null and (ij.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and ij.Disabled = 0 
			union all 
			select  sj.datefrom,sj.dateexpiry,
			sj.JobId,sj.CompanyId,CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,sj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,sj.DateDeleted,sj.DateCreated,sj.DateModified,sj.Recommended,sj.Sticky ,sj.AgentUserId,sj.AdminId
			from ServiceJob sj 
			join Region r on r.RegionId = sj.RegionId
			join JobType j on j.TypeId = sj.JobTypeId 
			left join Company c on c.CompanyId = sj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where sj.Reptile = 1  and sj.statusid = 1
			and  sj.DateDeleted is null and (sj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and sj.Disabled = 0 
			union all 
			select  tj.datefrom,tj.dateexpiry,
			tj.JobId,tj.CompanyId,tj.CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,tj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,tj.DateDeleted,tj.DateCreated,tj.DateModified,tj.Recommended,tj.Sticky   ,tj.AgentUserId,tj.AdminId
			from TutorJob tj 
			join Region r on r.RegionId = tj.RegionId
			join JobType j on j.TypeId = tj.JobTypeId 
			left join Company c on c.CompanyId = tj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where tj.Reptile = 1  and tj.statusid = 1
			and  tj.DateDeleted is null and (tj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and tj.Disabled = 0 
		) x where (x.DatePublished >= @DateFrom or @DateFrom is null  ) 
		and (x.DatePublished <@DateTo+1 or @DateTo is null )
		and (x.CompanyName like '%' + @CompanyName + '%'   or @CompanyName is null )
		and (x.CompanyMobile like '%' + @Mobile + '%'   or @Mobile is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null ) 
		and x.DateDeleted is null
	) sub 
	where RowNumber between @row_from and @row_to
	order by DatePublished Desc ,JobId 
end




GO
/****** Object:  StoredProcedure [dbo].[agent_get_reptile_service_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[agent_get_reptile_service_job]
	@JobId bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,j.Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,j.PositionId , p.Name PositionName , j.CategoryId , c.Name CategoryName,j.JobId,j.JobTypeId,u.Name WageUnitName,r.RegionId,r.Name RegionName,m.Name TermName    from servicejob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join ServiceJobPosition p on p.positionid = j.positionid
		left join ServiceJobCategory c on c.categoryid = j.categoryid
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId and reptile = 1 and DateDeleted is null
end






GO
/****** Object:  StoredProcedure [dbo].[agent_get_reptile_tutor_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[agent_get_reptile_tutor_job]
	@JobId bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select Title,CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,j.Contact,ContactPhone,Sticky,Recommended,
		t.name JobTypeName ,j.PaperId ,p.Name Papername , j.LevelId , l.Name LevelName,j.JobId,j.JobTypeId,u.Name WageUnitName,r.RegionId,r.Name RegionName,m.Name TermName    from tutorjob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join TutorJobPaper p on p.PaperId = j.paperid
		left join TutorJobLevel l on l.levelid = j.LevelId
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId and reptile = 1  and DateDeleted is null
end






GO
/****** Object:  StoredProcedure [dbo].[agent_get_reptile_undercarriage_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[agent_get_reptile_undercarriage_job_list]
	@CompanyName nvarchar(50),
	@Mobile nvarchar(50),
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select * 
	from( 
		select *, COUNT(0) over() TotalCount, row_number() over (order by DateExpiry Desc ,JobId ) RowNumber 
		from(
			select  aj.datefrom,aj.dateexpiry, 
			aj.JobId,aj.CompanyId,CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,aj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,aj.DateDeleted,aj.DateCreated,aj.DateModified,aj.Recommended,aj.Sticky ,aj.AgentUserId,aj.AdminId
			from ActivityJob aj 
			join Region r on r.RegionId = aj.RegionId
			join JobType j on j.TypeId = aj.JobTypeId 
			left join Company c on c.CompanyId = aj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where aj.Reptile = 1 and (dateadd(d,0,datediff(d,0,getdate())) not between aj.datefrom and aj.dateexpiry  or aj.statusid = 3)
			and aj.DateDeleted is null and (aj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and aj.Disabled = 0 
			union all 
			select  cj.datefrom,cj.dateexpiry,
			cj.JobId,cj.CompanyId,CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,cj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,cj.DateDeleted,cj.DateCreated,cj.DateModified,cj.Recommended ,cj.Sticky ,cj.AgentUserId,cj.AdminId
			from CampusJob cj 
			join Region r on r.RegionId = cj.RegionId
			join JobType j on j.TypeId = cj.JobTypeId 
			left join Company c on c.CompanyId = cj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where  cj.Reptile = 1 and (dateadd(d,0,datediff(d,0,getdate())) not between cj.datefrom and cj.dateexpiry  or cj.statusid = 3)
			and cj.DateDeleted is null and (cj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and cj.Disabled = 0 
			union all
			select  ij.datefrom,ij.dateexpiry,
			ij.JobId,ij.CompanyId,CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,ij.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,ij.DateDeleted,ij.DateCreated,ij.DateModified,ij.Recommended,ij.Sticky ,ij.AgentUserId,ij.AdminId
			from InternJob ij 
			join Region r on r.RegionId = ij.RegionId
			join JobType j on j.TypeId = ij.JobTypeId 
			left join Company c on c.CompanyId = ij.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where  ij.Reptile = 1 and (dateadd(d,0,datediff(d,0,getdate())) not between ij.datefrom and ij.dateexpiry or ij.statusid = 3)
			and ij.DateDeleted is null and (ij.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and ij.Disabled = 0 
			union all 
			select  sj.datefrom,sj.dateexpiry,
			sj.JobId,sj.CompanyId,CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,sj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,sj.DateDeleted,sj.DateCreated,sj.DateModified,sj.Recommended,sj.Sticky  ,sj.AgentUserId,sj.AdminId
			from ServiceJob sj 
			join Region r on r.RegionId = sj.RegionId
			join JobType j on j.TypeId = sj.JobTypeId 
			left join Company c on c.CompanyId = sj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where sj.Reptile = 1 and (dateadd(d,0,datediff(d,0,getdate())) not between sj.datefrom and sj.dateexpiry  or sj.statusid = 3)
			and sj.DateDeleted is null and (sj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and sj.Disabled = 0 
			union all 
			select  tj.datefrom,tj.dateexpiry,
			tj.JobId,tj.CompanyId,tj.CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,tj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,tj.DateDeleted,tj.DateCreated,tj.DateModified,tj.Recommended,tj.Sticky  ,tj.AgentUserId,tj.AdminId
			from TutorJob tj 
			join Region r on r.RegionId = tj.RegionId
			join JobType j on j.TypeId = tj.JobTypeId 
			left join Company c on c.CompanyId = tj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			where tj.Reptile = 1 and (dateadd(d,0,datediff(d,0,getdate())) not between tj.datefrom and tj.dateexpiry  or tj.statusid = 3)
			and tj.DateDeleted is null and (tj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and tj.Disabled = 0 
		
		) x where (x.dateexpiry >= @DateFrom or @DateFrom is null  ) 
		and (x.dateexpiry <  @DateTo+1 or @DateTo is null )
		and (x.CompanyName like '%' + @CompanyName + '%'   or @CompanyName is null )
		and (x.CompanyMobile like '%' + @Mobile + '%'   or @Mobile is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
		and x.DateDeleted is null
	) sub 
	where RowNumber between @row_from and @row_to
	order by DateExpiry Desc ,JobId 
end





GO
/****** Object:  StoredProcedure [dbo].[agent_get_role_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_role_list]
	@AgentUserId int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @table table(RoleId int, Role nvarchar(50), [Permissions] nvarchar(max), DateCreated datetime)
	insert into @table(RoleId, Role, DateCreated)
	select r.RoleId, r.Name, r.DateCreated
	from AgentRole r 
	where r.AdminAgentUserId =@AgentUserId and r.Indentation = 2

	declare @permission_table table(RoleId int, [Group] nvarchar(50), Name nvarchar(50), RowNumber int)
	insert into @permission_table
	select *, row_number() over(partition by RoleId, [Group] order by Name)
	from
	(
		select r.RoleId, p.[Group], p.Name
		from AgentRole r 
		join AgentRole r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
		join AgentRoleAgentPermission rp on rp.RoleId = r_sub.RoleId
		join AgentPermission p on p.PermissionId = rp.PermissionId	
		where r.AdminAgentUserId = @AgentUserId and r.Indentation = 2
	) a

	update t
	set t.[Permissions] = (
		STUFF((SELECT case when RowNumber = 1 then '、；'+ p.[Group] + '：' else '、' end + p.Name
            FROM @permission_table p
            WHERE p.RoleId = t.RoleId
            FOR XML PATH('')
			), 1, 2, '')
	)
	from @table t

	update @table set [Permissions] = REPLACE([permissions],'、；','；')

	select * from @table
end	

-- agent_get_user_permission 2


GO
/****** Object:  StoredProcedure [dbo].[agent_get_role_permission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_role_permission]
	@RoleId		int
as
begin set transaction isolation level read uncommitted	set nocount on
	select distinct p.PermissionId, p.[Group], p.Name
	from AgentRole r 
	join AgentRole r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
	join AgentRoleAgentPermission rp on rp.RoleId = r_sub.RoleId
	join AgentPermission p on p.PermissionId = rp.PermissionId	
	where r.RoleId = @RoleId
end




GO
/****** Object:  StoredProcedure [dbo].[agent_get_root_regions]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_root_regions]
	@UserId		int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @AdminAgentUserId int
	select @AdminAgentUserId = AdminAgentUserId from AgentUser where UserId = @UserId
	if @AdminAgentUserId is null
	begin
		select distinct r.RegionId, r.Name, isnull(p.ProvinceId,0) ProvinceId, isnull(p.Name,'直辖市') Province, isnull(p.Sequence,0) ProvinceSequence, r.Sequence CitySequence
		from Region r
		join AgentUserRegion u on u.RegionId = r.RegionId
		left join Province p on p.ProvinceId = r.ProvinceId
		where u.UserId = @UserId
		order by isnull(p.Sequence,0), r.Sequence
	end
	else
	begin
		select distinct pr.RegionId, pr.Name, isnull(p.ProvinceId,0) ProvinceId, isnull(p.Name,'直辖市') Province, isnull(p.Sequence,0) ProvinceSequence, pr.Sequence CitySequence
		from Region r
		join AgentUserRegion u on u.RegionId = r.RegionId
		left join Province p on p.ProvinceId = r.ProvinceId
		join Region pr on pr.RegionId = r.RootRegionId
		where u.UserId = @UserId
		order by isnull(p.Sequence,0), pr.Sequence
	end
end



GO
/****** Object:  StoredProcedure [dbo].[agent_get_sales_agent_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_sales_agent_list]
	@AgentUserId	int,
	@DateFrom	datetime,
	@DateTo		datetime,
	@SearchText	nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @table table(UserId int, UserName nvarchar(50), Regions nvarchar(max), [Permissions] nvarchar(max), DateCreated datetime, PromoterName nvarchar(50))
	insert into @table(UserId, UserName, DateCreated, PromoterName)
	select u.UserId, u.UserName, u.DateCreated, ISNULL(p.UserName,'')
	from AgentUser u 
	join AgentUserType t on t.TypeId = u.TypeId
	left join Promoter p on p.PromoterId = u.PromoterId
	where u.AdminAgentUserId = @AgentUserId and u.TypeId = 3 and u.DateDeleted is null
		and (u.DateCreated >= @DateFrom or @DateFrom is null)
		and (u.DateCreated < DateAdd(d,1,@DateTo) or @DateTo is null)
		and (u.UserName like '%'+ @SearchText +'%' or isnull(@SearchText,'') = '')

	declare @permission_table table(UserId int, [Group] nvarchar(50), Name nvarchar(50), RowNumber int)
	insert into @permission_table
	select *, row_number() over(partition by UserId, [Group] order by Name)
	from
	(
		select u.UserId, p.[Group], p.Name
		from AgentUser u 
		join AgentUserAgentPermission ap on ap.UserId = u.UserId
		join AgentPermission p on p.PermissionId = ap.PermissionId	
		where u.AdminAgentUserId = @AgentUserId and u.TypeId = 3 and u.DateDeleted is null 
	) a

	update t
	set t.[Permissions] = (
		STUFF((SELECT case when RowNumber = 1 then '、；'+ p.[Group] + '：' else '、' end + p.Name
            FROM @permission_table p
            WHERE p.UserId = t.UserId
            FOR XML PATH('')
			), 1, 2, '')
	)
	from @table t

	update @table set [Permissions] = REPLACE([permissions],'、；','；')

	declare @region_table table(UserId int, Province nvarchar(50), Name nvarchar(50), RowNumber int)
	insert into @region_table
	select *, row_number() over(partition by UserId, Province order by Name)
	from
	(
		select ur.UserId, pr.Name Province, r.Name
		from AgentUserRegion ur 
		join AgentUser u on u.UserId = ur.UserId
		join Region r on r.RegionId = ur.RegionId
		join Region pr  on pr.RegionId = r.ParentRegionId
		where u.AdminAgentUserId = @AgentUserId
	) a
	update t
	set t.Regions = (
		STUFF((SELECT case when RowNumber = 1 then '、；'+ p.Province + '：' else '、' end + p.Name
            FROM @region_table p
            WHERE p.UserId = t.UserId
            FOR XML PATH('')
			), 1, 2, '')
	)
	from @table t

	update @table set Regions = REPLACE(Regions,'、；','；')

	select * from @table
end

-- [agent_get_agent_user_list] 10, null, null, null,  null






GO
/****** Object:  StoredProcedure [dbo].[agent_get_school]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_get_school]
	@RegionId int
as
begin set transaction isolation level read uncommitted	set nocount on
	select SchoolId, s.Name, r.Name RegionName,s.RegionId
	from School s
	join Region r on r.RegionId = s.RegionId
	where r.RegionId = @RegionId or @RegionId is null
	union all
	select SchoolId, Name, '',RegionId
	from School 
	where RegionId = -1
end



GO
/****** Object:  StoredProcedure [dbo].[agent_get_school_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_get_school_list]
	@RegionIds nvarchar(max)
as
begin set transaction isolation level read uncommitted	set nocount on
	select s.SchoolId, s.Name SchoolName , s.RegionId , r.Name RegionName 
	from School s
	left join Region r on r.RegionId = s.RegionId
	where (s.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) 
end
GO
/****** Object:  StoredProcedure [dbo].[agent_get_service_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[agent_get_service_job]
	@JobId bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select Title,cm.CompanyId,cm.fullname CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,j.Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,j.Contact,ContactPhone,Sticky,StickyExpired,Recommended,
		t.name JobTypeName ,j.PositionId , p.Name PositionName , j.CategoryId , c.Name CategoryName,j.JobId,j.JobTypeId,u.Name WageUnitName,r.RegionId ,r.Name RegionName,m.Name TermName    from servicejob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join Company cm on cm.CompanyId = j.CompanyId 
		left join ServiceJobPosition p on p.positionid = j.positionid
		left join ServiceJobCategory c on c.categoryid = j.categoryid
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId and reptile = 0
end


GO
/****** Object:  StoredProcedure [dbo].[agent_get_tutor_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[agent_get_tutor_job]
	@JobId bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select Title,cm.CompanyId,cm.fullname CompanyName,PeopleRequired,Gender,Wage,IncludeDinner,IncludeRoom,IncludeCommission,Deposit,j.Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
		FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
		MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,j.Contact,ContactPhone,Sticky,StickyExpired,Recommended,
		t.name JobTypeName ,j.PaperId ,p.Name Papername , j.LevelId , l.Name LevelName,j.JobId,j.JobTypeId,u.Name WageUnitName,r.RegionId,r.Name RegionName,m.Name TermName  
		  from tutorjob j
		join jobtype t on j.jobtypeid = t.typeid
		join region r on r.regionid = j.regionid
		left join Company cm on cm.CompanyId = j.CompanyId 
		left join TutorJobPaper p on p.PaperId = j.paperid
		left join TutorJobLevel l on l.levelid = j.LevelId
		left join WageUnit u on j.WageUnitId = u.UnitId
		left join Term m on m.TermId = j.TermId 
		where jobid = @JobId and reptile = 0  and DateDeleted is null
end




GO
/****** Object:  StoredProcedure [dbo].[agent_get_undercarriage_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[agent_get_undercarriage_job_list]
	@CompanyName nvarchar(50),
	@Mobile nvarchar(50),
	@DateFrom datetime,
	@DateTo datetime,
	@JobTypeId int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Recommended bit,
	@Sticky bit,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select * 
	from( 
		select *, COUNT(0) over() TotalCount, row_number() over (order by DateExpiry Desc ,JobId ) RowNumber 
		from(
			select  aj.datefrom,aj.dateexpiry, 
			aj.JobId,aj.CompanyId,c.fullname CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,aj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,aj.DateDeleted,aj.DateCreated,aj.DateModified,aj.Recommended,aj.Sticky ,aj.AgentUserId,aj.AdminId
			from ActivityJob aj 
			join Region r on r.RegionId = aj.RegionId
			join JobType j on j.TypeId = aj.JobTypeId 
			left join Company c on c.CompanyId = aj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from ActivityJobApply aa 
				where aa.JobId = aj.JobId and aa.StatusId = 2
			) applies 
			where aj.Reptile = 0 and (dateadd(d,0,datediff(d,0,getdate())) not between aj.datefrom and aj.dateexpiry or aj.statusid = 3)
			and (aj.AgentUserId is not null or (aj.AgentUserId is null and aj.AdminId is not null)) and aj.DateDeleted is null 
			and (aj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and aj.Disabled = 0 
			union all 
			select  cj.datefrom,cj.dateexpiry,
			cj.JobId,cj.CompanyId,c.fullname CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,cj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,cj.DateDeleted,cj.DateCreated,cj.DateModified,cj.Recommended ,cj.Sticky ,cj.AgentUserId,cj.AdminId
			from CampusJob cj 
			join Region r on r.RegionId = cj.RegionId
			join JobType j on j.TypeId = cj.JobTypeId 
			left join Company c on c.CompanyId = cj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from CampusJobApply aa 
				where aa.JobId = cj.JobId and aa.StatusId = 2
			) applies
			where  cj.Reptile = 0 and (dateadd(d,0,datediff(d,0,getdate())) not between cj.datefrom and cj.dateexpiry or  cj.statusid = 3)
			and (cj.AgentUserId is not null or (cj.AgentUserId is null and cj.AdminId is not null)) and cj.DateDeleted is null 
			and (cj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and cj.Disabled = 0 
			union all
			select  ij.datefrom,ij.dateexpiry,
			ij.JobId,ij.CompanyId,c.fullname CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,ij.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,ij.DateDeleted,ij.DateCreated,ij.DateModified,ij.Recommended,ij.Sticky ,ij.AgentUserId,ij.AdminId
			from InternJob ij 
			join Region r on r.RegionId = ij.RegionId
			join JobType j on j.TypeId = ij.JobTypeId 
			left join Company c on c.CompanyId = ij.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from InternJobApply aa 
				where aa.JobId = ij.JobId and aa.StatusId = 2
			) applies  
			where  ij.Reptile = 0 and (dateadd(d,0,datediff(d,0,getdate())) not between ij.datefrom and ij.dateexpiry or ij.statusid = 3)
			and (ij.AgentUserId is not null or (ij.AgentUserId is null and ij.AdminId is not null)) and ij.DateDeleted is null 
			and (ij.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and ij.Disabled = 0 
			union all 
			select  sj.datefrom,sj.dateexpiry,
			sj.JobId,sj.CompanyId,c.fullname CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,sj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,sj.DateDeleted,sj.DateCreated,sj.DateModified,sj.Recommended,sj.Sticky  ,sj.AgentUserId,sj.AdminId
			from ServiceJob sj 
			join Region r on r.RegionId = sj.RegionId
			join JobType j on j.TypeId = sj.JobTypeId 
			left join Company c on c.CompanyId = sj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from ServiceJobApply aa 
				where aa.JobId = sj.JobId and aa.StatusId = 2 
			) applies
			where sj.Reptile = 0 and (dateadd(d,0,datediff(d,0,getdate())) not between sj.datefrom and sj.dateexpiry or sj.statusid = 3)
			and (sj.AgentUserId is not null or (sj.AgentUserId is null and sj.AdminId is not null)) and sj.DateDeleted is null 
			and (sj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and sj.Disabled = 0 
			union all 
			select  tj.datefrom,tj.dateexpiry,
			tj.JobId,tj.CompanyId,c.fullname CompanyName,c.Mobile CompanyMobile,Title,JobTypeId,j.Name JobTypeName,tj.StatusId,r.RegionId,ISNULL(pr.Name + ' ','')+ r.Name RegionName,
			DatePublished,tj.DateDeleted,tj.DateCreated,tj.DateModified,tj.Recommended,tj.Sticky   ,tj.AgentUserId,tj.AdminId
			from TutorJob tj 
			join Region r on r.RegionId = tj.RegionId
			join JobType j on j.TypeId = tj.JobTypeId 
			left join Company c on c.CompanyId = tj.CompanyId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			outer apply(
				select COUNT(0) Applies
				from TutorJobApply aa 
				where aa.JobId = tj.JobId and aa.StatusId = 2
			) applies
			where tj.Reptile = 0 and (dateadd(d,0,datediff(d,0,getdate())) not between tj.datefrom and tj.dateexpiry or  tj.statusid = 3)
			and (tj.AgentUserId is not null or (tj.AgentUserId is null and tj.AdminId is not null)) and tj.DateDeleted is null 
			and (tj.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null) and tj.Disabled = 0 
		
		) x where (x.dateexpiry >= @DateFrom or @DateFrom is null  ) 
		and (x.dateexpiry <@DateTo+1 or @DateTo is null )
		and (x.CompanyName like '%' + @CompanyName + '%'   or @CompanyName is null )
		and (x.CompanyMobile like '%' + @Mobile + '%'   or @Mobile is null )
		and (x.JobTypeId = @JobTypeId   or @JobTypeId is null )
		and (x.RegionId  = @RegionId   or @RegionId is null )
		and (x.Recommended = @Recommended  or @Recommended is null )
		and (x.Sticky = @Sticky  or @Sticky is null )
		 and x.DateDeleted is null
	) sub 
	where RowNumber between @row_from and @row_to
	order by DateExpiry Desc ,JobId 
end






GO
/****** Object:  StoredProcedure [dbo].[agent_get_user_apply]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_get_user_apply]
as
begin set transaction isolation level read uncommitted	set nocount on
	select *
	from(
		select ur.UserId ,ur.FullName, isnull(left(ur.Mobile,3)+'****' + Right(ur.Mobile,4),'') Mobile, co.FullName CompanyName, co.Mobile CompanyMobile, j.JobId, j.JobTypeId, j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, p.Name CategoryName, t.Name Term, j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, isnull(pr.Name + ' ','')+ r.Name Region, a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName
		from ActivityJobApply a
		join ActivityJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join WageUnit u on u.UnitId = j.WageUnitId 
		join ActivityJobPosition p on p.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		join Term t on t.TermId = j.TermId
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and a.StatusId in(1,2)
		union all
		select ur.UserId ,ur.FullName, isnull(left(ur.Mobile,3)+'****' + Right(ur.Mobile,4),'') Mobile, co.FullName CompanyName, co.Mobile CompanyMobile, j.JobId, j.JobTypeId,  j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, cast(0 as bit) Deposit, c.Name CategoryName, '' Term, cast(0 as bit), cast(0 as bit), cast(0 as bit), j.Gender, 0, '', isnull(pr.Name + ' ','')+ r.Name Region, a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName
		from CampusJobApply a
		join CampusJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join CampusJobCategory c on c.CategoryId = j.CategoryId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and a.StatusId in(1,2)
		union all
		select ur.UserId ,ur.FullName, isnull(left(ur.Mobile,3)+'****' + Right(ur.Mobile,4),'') Mobile, co.FullName CompanyName, co.Mobile CompanyMobile, j.JobId, j.JobTypeId,  j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,c.Name CategoryName, '' Term, j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, isnull(pr.Name + ' ','')+ r.Name Region, a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName
		from InternJobApply a
		join InternJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join WageUnit u on u.UnitId = j.WageUnitId 
		join InternJobCategory c on c.CategoryId = j.CategoryId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and a.StatusId in(1,2)
		union all
		select ur.UserId ,ur.FullName, isnull(left(ur.Mobile,3)+'****' + Right(ur.Mobile,4),'') Mobile, co.FullName CompanyName, co.Mobile CompanyMobile, j.JobId, j.JobTypeId, j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,c.Name CategoryName, t.Name Term, j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, isnull(pr.Name + ' ','')+ r.Name Region, a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName
		from ServiceJobApply a
		join ServiceJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join WageUnit u on u.UnitId = j.WageUnitId 
		join ServiceJobPosition c on c.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		join Term t on t.TermId = j.TermId
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and a.StatusId in(1,2)
		union all
		select ur.UserId ,ur.FullName, isnull(left(ur.Mobile,3)+'****' + Right(ur.Mobile,4),'') Mobile, co.FullName CompanyName, co.Mobile CompanyMobile, j.JobId, j.JobTypeId,  j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,p.Name CategoryName, t.Name Term, j.IncludeCommission,j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, isnull(pr.Name + ' ','')+ r.Name Region, a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName
		from TutorJobApply a
		join TutorJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join WageUnit u on u.UnitId = j.WageUnitId 
		join TutorJobPaper p on p.PaperId = j.PaperId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		join Term t on t.TermId = j.TermId
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and a.StatusId in(1,2)
	) sub
	order by sub.DateCreated desc
end



GO
/****** Object:  StoredProcedure [dbo].[agent_get_user_apply_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_get_user_apply_list]
	@DateFrom datetime,
	@DateTo datetime,
	@Gender int,
	@TallFrom int,
	@TallTo int,
	@RegionIds nvarchar(max),
	@RegionId int,
	@Mobile nvarchar(50),
	@School nvarchar(50),
	@StatusId int,
	@JobId bigint,
	@JobTypeId int,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from(
	select *, COUNT(0) over() TotalCount, row_number() over (order by DateCreated Desc ) RowNumber 
		from(
		select ur.UserId ,ur.FullName, ur.Mobile,ur.Tall,isnull(DATEDIFF(hour,ur.DateofBirth,GETDATE())/8766,0) AS Age, co.FullName CompanyName, co.Mobile CompanyMobile, 
		j.JobId, j.JobTypeId, j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, 
		cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, p.Name CategoryName, t.Name Term, 
		j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, ur.Gender, j.Wage, u.Name WageUnit, r.Name Region,r.RegionId, 
		a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName,sc.SchoolId,j.AgentUserId,j.AdminId
		from ActivityJobApply a
		join ActivityJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join WageUnit u on u.UnitId = j.WageUnitId 
		join ActivityJobPosition p on p.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId 
		join Term t on t.TermId = j.TermId
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and @JobTypeId = 1 and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null)
		union all
		select ur.UserId ,ur.FullName, ur.Mobile,ur.Tall,isnull(DATEDIFF(hour,ur.DateofBirth,GETDATE())/8766,0) AS Age, co.FullName CompanyName, co.Mobile CompanyMobile, 
		j.JobId, j.JobTypeId,  j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, 
		cast(0 as bit) Deposit, c.Name CategoryName, '' Term, 
		cast(0 as bit), cast(0 as bit), cast(0 as bit), ur.Gender, 0, '', r.Name Region,r.RegionId, 
		a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName,sc.SchoolId,j.AgentUserId,j.AdminId
		from CampusJobApply a
		join CampusJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join CampusJobCategory c on c.CategoryId = j.CategoryId
		join Region r on r.RegionId = j.RegionId 
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and @JobTypeId = 2 and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null)
		union all
		select ur.UserId ,ur.FullName, ur.Mobile,ur.Tall,isnull(DATEDIFF(hour,ur.DateofBirth,GETDATE())/8766,0) AS Age, co.FullName CompanyName, co.Mobile CompanyMobile, 
		j.JobId, j.JobTypeId,  j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, 
		cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,c.Name CategoryName, '' Term,
		 j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, ur.Gender, j.Wage, u.Name WageUnit, r.Name Region,r.RegionId,
		  a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName,sc.SchoolId,j.AgentUserId,j.AdminId
		from InternJobApply a
		join InternJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join WageUnit u on u.UnitId = j.WageUnitId 
		join InternJobCategory c on c.CategoryId = j.CategoryId
		join Region r on r.RegionId = j.RegionId 
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and @JobTypeId = 3 and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null)
		union all
		select ur.UserId ,ur.FullName, ur.Mobile,ur.Tall,isnull(DATEDIFF(hour,ur.DateofBirth,GETDATE())/8766,0) AS Age, co.FullName CompanyName, co.Mobile CompanyMobile, 
		j.JobId, j.JobTypeId, j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, 
		cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,c.Name CategoryName, t.Name Term, 
		j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, ur.Gender, j.Wage, u.Name WageUnit, r.Name Region,r.RegionId, 
		 a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName,sc.SchoolId,j.AgentUserId,j.AdminId
		from ServiceJobApply a
		join ServiceJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join WageUnit u on u.UnitId = j.WageUnitId 
		join ServiceJobPosition c on c.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId 
		join Term t on t.TermId = j.TermId
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and @JobTypeId = 4 and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null)
		union all
		select ur.UserId ,ur.FullName, ur.Mobile,ur.Tall,isnull(DATEDIFF(hour,ur.DateofBirth,GETDATE())/8766,0) AS Age, co.FullName CompanyName, co.Mobile CompanyMobile, 
		j.JobId, j.JobTypeId,  j.Title,j.PeopleRequired, co.Verified, j.ViewTimes, j.DatePublished, 
		cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,p.Name CategoryName, t.Name Term, 
		j.IncludeCommission,j.IncludeDinner, j.IncludeRoom, ur.Gender, j.Wage, u.Name WageUnit, r.Name Region,r.RegionId, 
		a.DateCreated, a.DateHired, s.Name Status, s.StatusId,sc.Name SchoolName,sc.SchoolId ,j.AgentUserId,j.AdminId
		from TutorJobApply a
		join TutorJob j on j.JobId = a.JobId 
		join Company co on co.CompanyId = j.CompanyId
		join WageUnit u on u.UnitId = j.WageUnitId 
		join TutorJobPaper p on p.PaperId = j.PaperId
		join Region r on r.RegionId = j.RegionId 
		join Term t on t.TermId = j.TermId
		join ApplyStatus s on s.StatusId = a.StatusId
		join [User] ur on ur.UserId = a.UserId
		join School sc on sc.SchoolId = ur.SchoolId 
		where a.DateDeleted is null and j.StatusId = 2 and @JobTypeId = 5 and (j.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null)
		)x  where (x.DateCreated >= @DateFrom or @DateFrom is null  ) 
		and (x.DateCreated < @DateTo+1 or @DateTo is null )
		and (x.RegionId =  @RegionId or @RegionId is null )
		and (x.Gender =  @Gender or @Gender is null ) 
		and ((x.Tall >  @TallFrom or @TallFrom is null ) and (x.Tall <=  @TallTo or @TallTo is null ))
		and (x.RegionId =  @RegionId or @RegionId is null ) 
		and (x.StatusId =  @StatusId or @StatusId is null ) 
		and (x.JobId =  @JobId or @JobId is null ) 
		and (x.Mobile like  '%'+@Mobile+'%' or @Mobile is null ) 
		and (x.SchoolName like '%'+@School+'%' or @School is null )
	) sub
	where RowNumber between @row_from and @row_to
	order by sub.DateCreated desc
end

GO
/****** Object:  StoredProcedure [dbo].[agent_get_user_cash_in]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_get_user_cash_in]
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select uc.CashInId, u.Mobile, u.FullName, uc.Amount, uc.Balance, uc.Note, uc.DateCreated
	from usercashin uc
	join [user] u on u.userid = uc.userid
	where u.userid = @UserId
	order by uc.dateCreated desc
end




GO
/****** Object:  StoredProcedure [dbo].[agent_get_user_cash_in_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[agent_get_user_cash_in_list]
	@UserId		bigint,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from
	(
		select uc.CashInId, u.Mobile, u.FullName, uc.Amount, uc.Balance, uc.Note, uc.DateCreated ,COUNT(0) over() TotalCount,row_number() over (order by uc.dateCreated desc) as [row]
		from usercashin uc
		join [user] u on u.userid = uc.userid
		where u.userid = @UserId
		
	) sub
	where sub.row between @row_from and @row_to
	order by sub.dateCreated desc
end





GO
/****** Object:  StoredProcedure [dbo].[agent_get_user_cash_out_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_get_user_cash_out_list]
	@DateFrom datetime,
	@DateTo datetime,
	@AccountNo nvarchar(50),
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	
	select *
	from
	(
		select uc.CashOutId,u.UserId, u.Mobile, u.FullName,b.Name BankName,ub.AccountName,ub.AccountNo, 
		uc.Amount, uc.Balance, s.Name Status, s.StatusId,uc.DateCreated, uc.DateModified,
		COUNT(0) over() TotalCount,row_number() over (order by uc.dateCreated desc) as [row]
		from usercashout uc
		join [user] u on u.userid = uc.userid
		join CashOutStatus s on s.statusid = uc.StatusId
		join UserAccount ub
		join Bank b on b.BankId = ub.BankId   on ub.UserId = u.UserId and ub.AccountId = uc.AccountId
		where s.StatusId = 1 and (ub.AccountNo like '%'+@AccountNo+'%' or @AccountNo is null)
		
	) sub
	where sub.row between @row_from and @row_to and 
	(sub.DateCreated >= @DateFrom or @DateFrom is null  ) and 
	(sub.DateCreated <@DateTo+1 or @DateTo is null )
	order by sub.dateCreated desc

end


GO
/****** Object:  StoredProcedure [dbo].[agent_get_user_info]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[agent_get_user_info]
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
select u.UserId,isnull(left(u.Mobile,3)+'****' + Right(u.Mobile,4),'')  Mobile, s.SchoolId, s.Name SchoolName, FullName, isnull(left(CONVERT(nvarchar, DateofBirth,126),10),'') DateofBirth, case when Gender = 0 then '女' when Gender =1 then '男' else '' end Gender,
			Tall, u.RegionId, isnull(pr.Name + ' ','') + r.Name as RegionName, ProfilePhoto, QQ, Email, Major, isnull(WorkExperience,'') WorkExperience, 
			Balance, isnull(ub.BankId,0) BankId, isnull(b.Name,'') BankName, isnull(ub.AccountName,'') AccountName,  u.VoiceAlert, u.Vibrate,
			isnull(left(ub.AccountNo,4)+'******' + Right(ub.AccountNo,4),'') AccountNo,ub.AccountNo AccountFullNo, isnull(DATEDIFF(hour,u.DateofBirth,GETDATE())/8766,0) AS Age
		from [User] u
		join School s on s.SchoolId = u.SchoolId
		left join Region r on r.RegionId = u.RegionId
		left join UserAccount ub on ub.UserId = u.UserId and ub.[Default] = 1 and ub.DateDeleted is null
		left join Bank b on b.BankId = ub.BankId
		left join Region pr on pr.RegionId = r.ParentRegionId and pr.Indentation = 2
		where u.UserId = @UserId

end




GO
/****** Object:  StoredProcedure [dbo].[agent_get_user_job_complain_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[agent_get_user_job_complain_list]
	@DateFrom datetime,
	@DateTo datetime,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on

	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from(
		select * ,COUNT(0) over() TotalCount,row_number() over (order by DateCreated DESC) as [row] 
		from (
			select c.DateCreated,u.FullName ,u.Mobile,u.Device,jt.Name JobTypeName,j.Title,cs.Name Description ,j.JobId,j.JobTypeId
			from ActivityJobComplain c,[User] u , ActivityJob j ,JobType jt,ComplainStatus cs
			where c.UserId = u.UserId and c.JobId = j.JobId and jt.TypeId = j.JobTypeId  and cs.StatusId = c.StatusId
			union all
			select c.DateCreated,u.FullName ,u.Mobile,u.Device,jt.Name JobTypeName,j.Title,cs.Name Description ,j.JobId,j.JobTypeId
			from CampusJobComplain c,[User] u , CampusJob j ,JobType jt,ComplainStatus cs
			where c.UserId = u.UserId and c.JobId = j.JobId and jt.TypeId = j.JobTypeId  and cs.StatusId = c.StatusId
			union all
			select c.DateCreated,u.FullName ,u.Mobile,u.Device,jt.Name JobTypeName,j.Title,cs.Name Description ,j.JobId,j.JobTypeId
			from InternJobComplain c,[User] u , InternJob j ,JobType jt,ComplainStatus cs
			where c.UserId = u.UserId and c.JobId = j.JobId and jt.TypeId = j.JobTypeId  and cs.StatusId = c.StatusId
			union all
			select c.DateCreated,u.FullName ,u.Mobile,u.Device,jt.Name JobTypeName,j.Title,cs.Name Description ,j.JobId,j.JobTypeId
			from TutorJobComplain c,[User] u , TutorJob j ,JobType jt,ComplainStatus cs
			where c.UserId = u.UserId and c.JobId = j.JobId and jt.TypeId = j.JobTypeId  and cs.StatusId = c.StatusId
			union all
			select c.DateCreated,u.FullName ,u.Mobile,u.Device,jt.Name JobTypeName,j.Title,cs.Name Description ,j.JobId,j.JobTypeId
			from ServiceJobComplain c,[User] u , ServiceJob j ,JobType jt,ComplainStatus cs
			where c.UserId = u.UserId and c.JobId = j.JobId and jt.TypeId = j.JobTypeId  and cs.StatusId = c.StatusId
		) x 
		where (x.DateCreated >= @DateFrom or @DateFrom is null  ) and 
		(x.DateCreated <@DateTo+1 or @DateTo is null )
	) sub
	where sub.row between @row_from and @row_to 
	order by sub.DateCreated desc
end




GO
/****** Object:  StoredProcedure [dbo].[agent_get_user_permission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_get_user_permission]
	@UserId int
as
begin set transaction isolation level read uncommitted	set nocount on
	select p.PermissionId, p.[Group], p.Name
	from AgentUserAgentRole ur 
	join AgentRole r on r.RoleId = ur.RoleId
	join AgentRole r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
	join AgentRoleAgentPermission rp on rp.RoleId = r_sub.RoleId
	join AgentPermission p on p.PermissionId = rp.PermissionId	
	where ur.UserId = @UserId and not exists(select 1 from AgentUserAgentPermission where UserId = @UserId and PermissionId = p.PermissionId and Denied = 1)
	union 
	select p.PermissionId, p.[Group], p.Name
	from AgentUserAgentPermission ap
	join AgentPermission p on p.PermissionId = ap.PermissionId
	where ap.UserId = @UserId and ap.Denied = 0
end	

-- agent_get_user_permission 2


GO
/****** Object:  StoredProcedure [dbo].[agent_job_company_hire]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_job_company_hire]
	@CompanyId		bigint,
	@JobId			bigint,
	@UserId			bigint,
	@JobTypeId		int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Applies int = 0, @PeopleRequired int = 0, @Message nvarchar(50) = '', @JobTitle nvarchar(255), @MessageId bigint, @Device nvarchar(50), @DeviceToken nvarchar(255)
	declare @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @IsLogin bit, @BaiduUserId nvarchar(50)
	select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId , @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin from [User] where UserId = @UserId
	
	if @JobTypeId = 1
	begin
		select @Applies = COUNT(0)
		from ActivityJobApply a
		join ActivityJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.StatusId = 2

		select @PeopleRequired = isnull(PeopleRequired,0) from ActivityJob where JobId = @JobId and CompanyId = @CompanyId

		if @Applies < @PeopleRequired
		begin
			update a
			set a.StatusId = 2, DateHired = GETDATE(), @JobTitle = j.Title
			from ActivityJobApply a
			join ActivityJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
			where a.JobId = @JobId and a.UserId = @UserId

			insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
			values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 已录用', 4, 0)
			set @MessageId = SCOPE_IDENTITY()

			if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
			begin
				update [User]
				set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
				where UserId = @UserId

				insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
				values(@MessageId, '已录用', 4, '[申请] 已录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
			end
		end
		else
		begin
			set @Message = '该岗位已经录用满，请重新发布新的岗位'
		end
	end

	else if @JobTypeId = 2
	begin
		select @Applies = COUNT(0)
		from CampusJobApply a
		join CampusJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.StatusId = 2

		select @PeopleRequired = isnull(PeopleRequired,0) from CampusJob where JobId = @JobId and CompanyId = @CompanyId

		if @Applies < @PeopleRequired
		begin
			update a
			set a.StatusId = 2, DateHired = GETDATE(), @JobTitle = j.Title
			from CampusJobApply a
			join CampusJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
			where a.JobId = @JobId and a.UserId = @UserId

			insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
			values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 已录用', 4, 0)
			set @MessageId = SCOPE_IDENTITY()
			if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
			begin
				update [User]
				set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
				where UserId = @UserId

				insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
				values(@MessageId, '已录用', 4, '[申请] 已录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
			end
		end
		else
		begin
			set @Message = '该岗位已经录用满，请重新发布新的岗位'
		end
	end


	else if @JobTypeId = 3
	begin
		select @Applies = COUNT(0)
		from InternJobApply a
		join InternJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.StatusId = 2
		select @PeopleRequired = isnull(PeopleRequired,0) from InternJob where JobId = @JobId and CompanyId = @CompanyId

		if @Applies < @PeopleRequired
		begin
			update a
			set a.StatusId = 2, DateHired = GETDATE(), @JobTitle = j.Title
			from InternJobApply a
			join InternJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
			where a.JobId = @JobId and a.UserId = @UserId

			insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
			values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 已录用', 4, 0)
			set @MessageId = SCOPE_IDENTITY()
			if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
			begin
				update [User]
				set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
				where UserId = @UserId

				insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
				values(@MessageId, '已录用', 4, '[申请] 已录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
			end
		end
		else
		begin
			set @Message = '该岗位已经录用满，请重新发布新的岗位'
		end
	end


	else if @JobTypeId = 4
	begin
		select @Applies = COUNT(0)
		from ServiceJobApply a
		join ServiceJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.StatusId = 2
		select @PeopleRequired = isnull(PeopleRequired,0) from ServiceJob where JobId = @JobId and CompanyId = @CompanyId

		if @Applies < @PeopleRequired
		begin
			update a
			set a.StatusId = 2, DateHired = GETDATE(), @JobTitle = j.Title
			from ServiceJobApply a
			join ServiceJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
			where a.JobId = @JobId and a.UserId = @UserId

			insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
			values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 已录用', 4, 0)
			set @MessageId = SCOPE_IDENTITY()
			if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
			begin
				update [User]
				set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
				where UserId = @UserId

				insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
				values(@MessageId, '已录用', 4, '[申请] 已录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
			end
		end
		else
		begin
			set @Message = '该岗位已经录用满，请重新发布新的岗位'
		end
	end


	else if @JobTypeId = 5
	begin
		select @Applies = COUNT(0)
		from TutorJobApply a
		join TutorJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.StatusId = 2
		select @PeopleRequired = isnull(PeopleRequired,0) from TutorJob where JobId = @JobId and CompanyId = @CompanyId

		if @Applies < @PeopleRequired
		begin
			update a
			set a.StatusId = 2, DateHired = GETDATE(), @JobTitle = j.Title
			from TutorJobApply a
			join TutorJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
			where a.JobId = @JobId and a.UserId = @UserId

			insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
			values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 已录用', 4, 0)
			set @MessageId = SCOPE_IDENTITY()
			if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
			begin
				update [User]
				set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
				where UserId = @UserId

				insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
				values(@MessageId, '已录用', 4, '[申请] 已录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
			end
		end
		else
		begin
			set @Message = '该岗位已经录用满，请重新发布新的岗位'
		end
	end

	select @Message Message
end



GO
/****** Object:  StoredProcedure [dbo].[agent_job_company_reject]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_job_company_reject]
	@CompanyId		bigint,
	@JobId			bigint,
	@UserId			bigint,
	@JobTypeId		int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @JobTitle nvarchar(255), @MessageId bigint, @Device nvarchar(50), @DeviceToken nvarchar(255)
	declare @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @IsLogin bit, @BaiduUserId nvarchar(50)
	select @Device = Device, @DeviceToken = DeviceToken,  @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin from [User] where UserId = @UserId
	if @JobTypeId = 1
	begin
		update a
		set a.StatusId = 4, @JobTitle = j.Title
		from ActivityJobApply a
		join ActivityJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 未被录用', 6, 0)
		set @MessageId = SCOPE_IDENTITY()

		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '退回申请', 6, '[申请] 未被录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end

	else if @JobTypeId = 2
	begin
		update a
		set a.StatusId = 4, @JobTitle = j.Title
		from CampusJobApply a
		join CampusJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 未被录用', 6, 0)
		set @MessageId = SCOPE_IDENTITY()
		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '退回申请', 6, '[申请] 未被录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end


	else if @JobTypeId = 3
	begin
		update a
		set a.StatusId = 4, @JobTitle = j.Title
		from InternJobApply a
		join InternJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 未被录用', 6, 0)
		set @MessageId = SCOPE_IDENTITY()
		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '退回申请', 6, '[申请] 未被录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end


	else if @JobTypeId = 4
	begin
		update a
		set a.StatusId = 4, @JobTitle = j.Title
		from ServiceJobApply a
		join ServiceJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 未被录用', 6, 0)
		set @MessageId = SCOPE_IDENTITY()
		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '退回申请', 6, '[申请] 未被录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end


	else if @JobTypeId = 5
	begin
		update a
		set a.StatusId = 4, @JobTitle = j.Title
		from TutorJobApply a
		join TutorJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 未被录用', 6, 0)
		set @MessageId = SCOPE_IDENTITY()
		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '退回申请', 6, '[申请] 未被录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end

end



GO
/****** Object:  StoredProcedure [dbo].[agent_job_status_approved]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_job_status_approved]
	@JobId	bigint,
	@JobTypeId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @CompanyId	bigint, @JobTitle nvarchar(255), @MessageId	bigint, @Device nvarchar(50), @DeviceToken nvarchar(255)
	declare @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @IsLogin bit, @BaiduUserId nvarchar(50)
	if @JobTypeId = 1
	begin
		select @CompanyId = CompanyId, @JobTitle = Title from ActivityJob where JobId = @JobId
	end
	else if @JobTypeId = 2
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from CampusJob where JobId = @JobId
	end
	else if @JobTypeId = 3
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from InternJob where JobId = @JobId
	end
	else if @JobTypeId = 4
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from ServiceJob where JobId = @JobId
	end
	else if @JobTypeId = 5
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from TutorJob where JobId = @JobId
	end
	select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin from Company where CompanyId = @CompanyId

	if @CompanyId is not null
	begin
		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(0, @CompanyId, @JobId, @JobTypeId, '[岗位] 已通过审核', 7, 0)
		set @MessageId = SCOPE_IDENTITY()

		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update Company
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where CompanyId = @CompanyId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '已审核', 7, '[岗位] 已通过审核', @JobTitle, 0, @CompanyId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end
end



GO
/****** Object:  StoredProcedure [dbo].[agent_job_status_rejected]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_job_status_rejected]
	@JobId	bigint,
	@JobTypeId	bigint
as
begin
	declare @CompanyId	bigint, @JobTitle nvarchar(255), @MessageId	bigint, @Device nvarchar(50), @DeviceToken nvarchar(255)
	declare @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @IsLogin bit, @BaiduUserId nvarchar(50)
	if @JobTypeId = 1
	begin
		select @CompanyId = CompanyId, @JobTitle = Title from ActivityJob where JobId = @JobId
	end
	else if @JobTypeId = 2
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from CampusJob where JobId = @JobId
	end
	else if @JobTypeId = 3
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from InternJob where JobId = @JobId
	end
	else if @JobTypeId = 4
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from ServiceJob where JobId = @JobId
	end
	else if @JobTypeId = 5
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from TutorJob where JobId = @JobId
	end

	if @CompanyId is not null
	begin
		select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin from Company where CompanyId = @CompanyId
		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(0, @CompanyId, @JobId, @JobTypeId, '[岗位] 未通过审核', 8, 0)
		set @MessageId = SCOPE_IDENTITY()

		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update Company
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where CompanyId = @CompanyId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '审核失败', 8, '[岗位] 未通过审核', @JobTitle, 0, @CompanyId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end
end


GO
/****** Object:  StoredProcedure [dbo].[agent_message_cash_in]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_message_cash_in]
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Device nvarchar(50), @DeviceToken nvarchar(255), @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @MessageId bigint, @BaiduUserId nvarchar(50)
	select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount 
	from [User]
	where DeviceToken is not null and IsLogin = 1 and UserId = @UserId

	insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read], DateCreated)
	values(0, @UserId, 0, 0, '[工资] 已到帐，点击提取', 2, 0, GETDATE())
	set @MessageId = SCOPE_IDENTITY()

	if (@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')
	begin
		update [User]
		set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
		where UserId = @UserId

		insert into notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount, DateCreated)
		values(@MessageId, '资金消息', 2, '[工资] 已到帐，点击提取', '资金到帐', 0, @UserId, 0, 0, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount, getdate())
	end
end





GO
/****** Object:  StoredProcedure [dbo].[agent_publish_activity_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_publish_activity_job]
	@AgentUserId int,
	@CompanyName nvarchar(50),
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@Recommended	bit,
	@Sticky	bit,
	@PositionId	int,
	@RegionId	int,
	@WageUnitId	int,
	@Wage		money,
	@IncludeDinner	bit,
	@IncludeRoom	bit,
	@IncludeCommission bit,
	@TermId		int,
	@Gender		int,
	@Deposit		money,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone nvarchar(50),
	@Address	nvarchar(255),

	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
@MonMorning	bit,
	@TueMorning	bit,
	@WedMorning	bit,
	@ThuMorning	bit,
	@FriMorning	bit,
	@SatMorning	bit,
	@SunMorning	bit,

	@MonAfternoon bit,
	@TueAfternoon bit,
	@WedAfternoon bit,
	@ThuAfternoon bit,
	@FriAfternoon bit,
	@SatAfternoon bit,
	@SunAfternoon bit,

	@MonNight	bit,
	@TueNight	bit,
	@WedNight	bit,
	@ThuNight	bit,
	@FriNight	bit,
	@SatNight	bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @JobAllocateTypeId int,@UserTypeId int,@StickyExpired date 
	select @UserTypeId = TypeId from agentuser where UserId = @AgentUserId
	if isnull(@Sticky,0)=1	select @StickyExpired= dateadd(day,3,getdate()) 
	if @UserTypeId = 1
	begin 
		set @JobAllocateTypeId = 2
	end
	else if @UserTypeId = 2
	begin
		set @JobAllocateTypeId = 3
	end
	else if @UserTypeId = 3
	begin
		set @JobAllocateTypeId = 4
	end
	if isnull(@PeopleRequired,0) < = 0 return
	declare @DateFrom date,@DateExpiry date
	set @DateFrom	= GETDATE()
	set @DateExpiry	= DATEADD(M,1,GETDATE())
	set @Gender = isnull(@Gender,2)
	insert into ActivityJob(CompanyId, Title,Recommended,Sticky,StickyExpired, JobTypeId,  StatusId, PositionId, RegionId, WageUnitId, Wage, IncludeDinner, IncludeRoom,IncludeCommission, TermId, Gender,Deposit, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, DatePublished,AgentUserId,JobAllocateTypeId)
	values(@CompanyId, @Title,@Recommended,@Sticky,@StickyExpired, 1, 2, @PositionId, @RegionId, @WageUnitId, @Wage, @IncludeDinner, @IncludeRoom,@IncludeCommission, @TermId, @Gender,@Deposit, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight, getdate(),@AgentUserId,@JobAllocateTypeId)
end





GO
/****** Object:  StoredProcedure [dbo].[agent_publish_campus_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_publish_campus_job]
	@AgentUserId int,
	@CompanyName nvarchar(50),
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@Recommended	bit,
	@Sticky	bit,
	@CategoryId	int,
	@SchoolId	int,
	@RegionId	int,
	@Gender		int,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone	nvarchar(50),
	@Address	nvarchar(255),

	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
	@MonMorning	bit,
	@TueMorning	bit,
	@WedMorning	bit,
	@ThuMorning	bit,
	@FriMorning	bit,
	@SatMorning	bit,
	@SunMorning	bit,

	@MonAfternoon bit,
	@TueAfternoon bit,
	@WedAfternoon bit,
	@ThuAfternoon bit,
	@FriAfternoon bit,
	@SatAfternoon bit,
	@SunAfternoon bit,

	@MonNight	bit,
	@TueNight	bit,
	@WedNight	bit,
	@ThuNight	bit,
	@FriNight	bit,
	@SatNight	bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @JobAllocateTypeId int,@UserTypeId int,@StickyExpired date 
	select @UserTypeId = TypeId from agentuser where UserId = @AgentUserId
	if isnull(@Sticky,0)=1	select @StickyExpired= dateadd(day,3,getdate()) 

	if @UserTypeId = 1
	begin 
		set @JobAllocateTypeId = 2
	end
	else if @UserTypeId = 2
	begin
		set @JobAllocateTypeId = 3
	end
	else if @UserTypeId = 3
	begin
		set @JobAllocateTypeId = 4
	end
	if isnull(@PeopleRequired,0) < = 0 return
	declare @DateFrom date,@DateExpiry date
	set @DateFrom	= GETDATE()
	set @DateExpiry	= DATEADD(M,1,GETDATE())
	set @Gender = isnull(@Gender,2)
	insert into CampusJob(CompanyId, Title,Recommended,Sticky,StickyExpired, JobTypeId,  StatusId, CategoryId, SchoolId, RegionId, Gender, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, DatePublished,AgentUserId,JobAllocateTypeId)
	values(@CompanyId, @Title,@Recommended,@Sticky,@StickyExpired, 2, 2, @CategoryId, @SchoolId, @RegionId, @Gender, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight, getdate(),@AgentUserId,@JobAllocateTypeId)
end





GO
/****** Object:  StoredProcedure [dbo].[agent_publish_intern_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_publish_intern_job]
	@AgentUserId int,
	@CompanyName nvarchar(50),
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@Recommended	bit,
	@Sticky bit,
	@Category	int,
	@RegionId	int,
	@WageUnitId	int,
	@Wage		money,
	@IncludeDinner	bit,
	@IncludeRoom	bit,
	@IncludeCommission bit,
	@Gender		int,
	@Deposit		money,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone	nvarchar(50),
	@Address	nvarchar(255),

	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
@MonMorning	bit,
	@TueMorning	bit,
	@WedMorning	bit,
	@ThuMorning	bit,
	@FriMorning	bit,
	@SatMorning	bit,
	@SunMorning	bit,

	@MonAfternoon bit,
	@TueAfternoon bit,
	@WedAfternoon bit,
	@ThuAfternoon bit,
	@FriAfternoon bit,
	@SatAfternoon bit,
	@SunAfternoon bit,

	@MonNight	bit,
	@TueNight	bit,
	@WedNight	bit,
	@ThuNight	bit,
	@FriNight	bit,
	@SatNight	bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @JobAllocateTypeId int,@UserTypeId int,@StickyExpired date 
	select @UserTypeId = TypeId from agentuser where UserId = @AgentUserId
	if isnull(@Sticky,0)=1	select @StickyExpired= dateadd(day,3,getdate()) 

	if @UserTypeId = 1
	begin 
		set @JobAllocateTypeId = 2
	end
	else if @UserTypeId = 2
	begin
		set @JobAllocateTypeId = 3
	end
	else if @UserTypeId = 3
	begin
		set @JobAllocateTypeId = 4
	end
	if isnull(@PeopleRequired,0) < = 0 return
	declare @DateFrom date,@DateExpiry date
	set @DateFrom	= GETDATE()
	set @DateExpiry	= DATEADD(M,1,GETDATE())
	set @Gender = isnull(@Gender,2)
	insert into InternJob(CompanyId, Title,Recommended,Sticky,StickyExpired, JobTypeId,  StatusId, CategoryId, RegionId, WageUnitId, Wage, IncludeDinner, IncludeRoom,IncludeCommission, Gender,Deposit, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, DatePublished,AgentUserId,JobAllocateTypeId)
	values(@CompanyId, @Title,@Recommended,@Sticky,@StickyExpired, 3, 2, @Category, @RegionId, @WageUnitId, @Wage, @IncludeDinner, @IncludeRoom,@IncludeCommission, @Gender,@Deposit, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight, getdate(),@AgentUserId,@JobAllocateTypeId)
end





GO
/****** Object:  StoredProcedure [dbo].[agent_publish_service_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[agent_publish_service_job]
	@AgentUserId int,
	@CompanyName nvarchar(50),
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@Recommended	bit,
	@Sticky bit,
	@CategoryId	int,
	@PositionId	int,
	@RegionId	int,
	@WageUnitId	int,
	@Wage		money,
	@IncludeDinner	bit,
	@IncludeRoom	bit,
	@IncludeCommission bit,
	@TermId		int,
	@Gender		int,
	@Deposit		money,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone	nvarchar(50),
	@Address	nvarchar(255),

	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
	@MonMorning	bit,
	@TueMorning	bit,
	@WedMorning	bit,
	@ThuMorning	bit,
	@FriMorning	bit,
	@SatMorning	bit,
	@SunMorning	bit,

	@MonAfternoon bit,
	@TueAfternoon bit,
	@WedAfternoon bit,
	@ThuAfternoon bit,
	@FriAfternoon bit,
	@SatAfternoon bit,
	@SunAfternoon bit,

	@MonNight	bit,
	@TueNight	bit,
	@WedNight	bit,
	@ThuNight	bit,
	@FriNight	bit,
	@SatNight	bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @JobAllocateTypeId int,@UserTypeId int,@StickyExpired date 
	select @UserTypeId = TypeId from agentuser where UserId = @AgentUserId
	if isnull(@Sticky,0)=1	select @StickyExpired= dateadd(day,3,getdate()) 

	if @UserTypeId = 1
	begin 
		set @JobAllocateTypeId = 2
	end
	else if @UserTypeId = 2
	begin
		set @JobAllocateTypeId = 3
	end
	else if @UserTypeId = 3
	begin
		set @JobAllocateTypeId = 4
	end
	if isnull(@PeopleRequired,0) < = 0 return
	declare @DateFrom date,@DateExpiry date
	set @DateFrom	= GETDATE()
	set @DateExpiry	= DATEADD(M,1,GETDATE())
	set @Gender = isnull(@Gender,2)
	insert into ServiceJob(CompanyId, Title,Recommended,Sticky,StickyExpired, JobTypeId,  StatusId, CategoryId, PositionId, RegionId, WageUnitId, Wage, IncludeDinner, IncludeRoom,IncludeCommission, TermId, Gender,Deposit, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, DatePublished,AgentUserId,JobAllocateTypeId)
	values(@CompanyId, @Title,@Recommended,@Sticky,@StickyExpired, 4, 2, @CategoryId, @PositionId, @RegionId, @WageUnitId, @Wage, @IncludeDinner, @IncludeRoom,@IncludeCommission, @TermId, @Gender,@Deposit, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight, getdate(),@AgentUserId,@JobAllocateTypeId)
end






GO
/****** Object:  StoredProcedure [dbo].[agent_publish_tutor_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[agent_publish_tutor_job]
	@AgentUserId int,
	@CompanyName nvarchar(50),
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@Recommended	bit,
	@Sticky	bit,
	@LevelId	int,
	@PaperId	int,
	@RegionId	int,
	@WageUnitId	int,
	@Wage		money,
	@IncludeDinner	bit,
	@IncludeRoom	bit,
	@IncludeCommission bit,
	@TermId		int,
	@Gender		int,
	@Deposit		money,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone	nvarchar(50),
	@Address	nvarchar(255),

	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
	@MonMorning	bit,
	@TueMorning	bit,
	@WedMorning	bit,
	@ThuMorning	bit,
	@FriMorning	bit,
	@SatMorning	bit,
	@SunMorning	bit,

	@MonAfternoon bit,
	@TueAfternoon bit,
	@WedAfternoon bit,
	@ThuAfternoon bit,
	@FriAfternoon bit,
	@SatAfternoon bit,
	@SunAfternoon bit,

	@MonNight	bit,
	@TueNight	bit,
	@WedNight	bit,
	@ThuNight	bit,
	@FriNight	bit,
	@SatNight	bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @JobAllocateTypeId int,@UserTypeId int,@StickyExpired date 
	select @UserTypeId = TypeId from agentuser where UserId = @AgentUserId
	if isnull(@Sticky,0)=1	select @StickyExpired= dateadd(day,3,getdate()) 

	if @UserTypeId = 1
	begin 
		set @JobAllocateTypeId = 2
	end
	else if @UserTypeId = 2
	begin
		set @JobAllocateTypeId = 3
	end
	else if @UserTypeId = 3
	begin
		set @JobAllocateTypeId = 4
	end
	if isnull(@PeopleRequired,0) < = 0 return
	declare @DateFrom date,@DateExpiry date
	set @DateFrom	= GETDATE()
	set @DateExpiry	= DATEADD(M,1,GETDATE())
	set @Gender = isnull(@Gender,2)
	insert into TutorJob(CompanyId, Title,Recommended,Sticky,StickyExpired, JobTypeId,  StatusId, LevelId, PaperId, RegionId, WageUnitId, Wage, IncludeDinner, IncludeRoom,IncludeCommission, TermId, Gender,Deposit, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, DatePublished,AgentUserId,JobAllocateTypeId)
	values(@CompanyId, @Title,@Recommended,@Sticky,@StickyExpired, 5, 2, @LevelId, @PaperId, @RegionId, @WageUnitId, @Wage, @IncludeDinner, @IncludeRoom,@IncludeCommission, @TermId, @Gender,@Deposit, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight, getdate(),@AgentUserId,@JobAllocateTypeId)
end






GO
/****** Object:  StoredProcedure [dbo].[agent_register_enterprise_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_register_enterprise_user]
	@FullName nvarchar(50),
	@Mobile nvarchar(50),
	@HashedPassword nvarchar(255),
	@Salt	nvarchar(50),
	@RegionId int,
	@Address nvarchar(255),
	@Status bit,
	@Verified bit,
	@Email nvarchar(255),
	@AgentUserId int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @CompanyId bigint

	insert into Company(Mobile, FullName, Salt, Password,Verified,Status,Address,RegionId,Email,AgentUserId,DateCreated)
		values(@Mobile, @FullName, @Salt, @HashedPassword, @Verified, @Status, @Address, @RegionId,@Email,@AgentUserId,GETDATE())
	set @CompanyId = SCOPE_IDENTITY()

end


GO
/****** Object:  StoredProcedure [dbo].[agent_search_user_info]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[agent_search_user_info]
	@RegionIds nvarchar(max),
	@SubRegionIds nvarchar(max),
	@SchoolRegionId		bigint,
	@RegionId		bigint,
	@Gender int,
	@TallFrom int,
	@TallTo int,
	@Mobile nvarchar(50),
	@School nvarchar(50),
	@LastestLogonDateFrom datetime,
	@LastestLogonDateTo datetime,
	@CreatedDateFrom datetime,
	@CreatedDateTo datetime,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select *
	from
	(
		select u.UserId,isnull(left(u.Mobile,3)+'****' + Right(u.Mobile,4),'')  Mobile, s.SchoolId, s.Name SchoolName, FullName, isnull(left(CONVERT(nvarchar, DateofBirth,126),10),'') DateofBirth, case when Gender = 0 then '女' when Gender =1 then '男' else '' end Gender,
			Tall, u.RegionId, isnull(isnull(r.Name,sr.Name),'未知') RegionName, ProfilePhoto, QQ, Email, Major, isnull(WorkExperience,'') WorkExperience, 
			Balance, isnull(ub.BankId,0) BankId, isnull(b.Name,'') BankName, isnull(ub.AccountName,'') AccountName,  u.VoiceAlert, u.Vibrate,
			isnull(left(ub.AccountNo,4)+'******' + Right(ub.AccountNo,4),'') AccountNo, isnull(DATEDIFF(hour,u.DateofBirth,GETDATE())/8766,0) AS Age,u.DateCreated,ull.DateLogged,
			COUNT(0) over() TotalCount,
			row_number() over (order by u.DateCreated Desc) as [row]
		from [User] u
		join School s on s.SchoolId = u.SchoolId
		left join Region r on r.RegionId = u.RegionId
		left join Region sr on sr.RegionId = s.RegionId 
		left join UserAccount ub on ub.UserId = u.UserId and ub.[Default] = 1 and ub.DateDeleted is null
		left join Bank b on b.BankId = ub.BankId
		left join (select UserId, max(DateLogged) DateLogged from UserLogonLog group by UserId ) ull on ull.UserId = u.UserId
		where (u.Gender =  @Gender or @Gender is null ) 
			and ((u.Tall >  @TallFrom or @TallFrom is null ) and (u.Tall <=  @TallTo or @TallTo is null ) )
			and (u.Mobile like  '%'+@Mobile+'%' or @Mobile is null ) 
			and (s.Name like '%'+@School+'%' or @School is null )
			and (u.RegionId in (select string from dbo.fn_split_string_by(@SubRegionIds, ',')) or @SubRegionIds is null or (@RegionId is null and u.RegionId is null)) 
			and (u.RegionId =  @RegionId or @RegionId is null)
			and (u.DateCreated >= @CreatedDateFrom or @CreatedDateFrom is null  ) 
			and (u.DateCreated < @CreatedDateTo+1 or @CreatedDateTo is null )
			and (ull.DateLogged >= @LastestLogonDateFrom or @LastestLogonDateFrom is null  ) 
			and (ull.DateLogged < @LastestLogonDateTo+1 or @LastestLogonDateTo is null )
			and (s.RegionId =  @SchoolRegionId or @SchoolRegionId is null)
			and (s.RegionId in (select string from dbo.fn_split_string_by(@RegionIds, ',')) or @RegionIds is null or @SchoolRegionId is null)--(@SchoolRegionId is null and s.RegionId is null)) 
	) sub
	where sub.row between @row_from and @row_to
	order by [row]
end



GO
/****** Object:  StoredProcedure [dbo].[agent_undercarriage_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[agent_undercarriage_job]
	@JobId bigint,
	@JobTypeId int
as
begin set transaction isolation level read uncommitted	set nocount on
	if @JobTypeId = 1 
	begin
		update ActivityJob set DateExpiry =  DATEADD(dd,-1,convert(nvarchar,GETDATE(),111))
		where jobid = @JobId and reptile = 0
	end
	if @JobTypeId = 2 
	begin
		update campusjob set DateExpiry =  DATEADD(dd,-1,convert(nvarchar,GETDATE(),111))
		where jobid = @JobId and reptile = 0
		
	end
	if @JobTypeId = 3 
	begin
		update internJob set DateExpiry =  DATEADD(dd,-1,convert(nvarchar,GETDATE(),111))
		where jobid = @JobId and reptile = 0
		
	end
	if @JobTypeId = 4 
	begin
		update servicejob set DateExpiry =  DATEADD(dd,-1,convert(nvarchar,GETDATE(),111))
		where jobid = @JobId and reptile = 0
		
	end
	if @JobTypeId = 5 
	begin
		update tutorjob set DateExpiry =  DATEADD(dd,-1,convert(nvarchar,GETDATE(),111))
		where jobid = @JobId and reptile = 0
	end
end




GO
/****** Object:  StoredProcedure [dbo].[agent_undercarriage_reptile_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[agent_undercarriage_reptile_job]
	@JobId bigint,
	@JobTypeId int
as
begin set transaction isolation level read uncommitted	set nocount on
	if @JobTypeId = 1 
	begin
		update ActivityJob set DateExpiry =  DATEADD(dd,-1,convert(nvarchar,GETDATE(),111))
		where jobid = @JobId and reptile = 1
	end
	if @JobTypeId = 2 
	begin
		update campusjob set DateExpiry =  DATEADD(dd,-1,convert(nvarchar,GETDATE(),111))
		where jobid = @JobId and reptile = 1
		
	end
	if @JobTypeId = 3 
	begin
		update internJob set DateExpiry =  DATEADD(dd,-1,convert(nvarchar,GETDATE(),111))
		where jobid = @JobId and reptile = 1
		
	end
	if @JobTypeId = 4 
	begin
		update servicejob set DateExpiry =  DATEADD(dd,-1,convert(nvarchar,GETDATE(),111))
		where jobid = @JobId and reptile = 1
		
	end
	if @JobTypeId = 5 
	begin
		update tutorjob set DateExpiry =  DATEADD(dd,-1,convert(nvarchar,GETDATE(),111))
		where jobid = @JobId and reptile = 1
	end
end




GO
/****** Object:  StoredProcedure [dbo].[agent_update_enterprise_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_update_enterprise_user]
	@CompanyId bigint,
	@FullName nvarchar(50),
	@Mobile nvarchar(50),
	@RegionId int,
	@Address nvarchar(255),
	@Status bit,
	@Verified bit,
	@Balance bit,
	@Email nvarchar(255)
as
begin set transaction isolation level read uncommitted	set nocount on
	UPDATE Company
   SET [RegionId] = @RegionId
      ,[Mobile] = @Mobile
      ,[Email] = @Email
      ,[FullName] = @FullName
      ,[Address] = @Address
      ,[Status] = @Status
      ,[Verified] = @Verified
      ,[DateModified] = GETDATE()
 WHERE CompanyId = @CompanyId


end







GO
/****** Object:  StoredProcedure [dbo].[agent_update_password]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[agent_update_password]
	@UserId	int,
	@hashedPassword	nvarchar(255),
	@salt		nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on 
UPDATE  [dbo].[AgentUser]
   SET  [Password] = @hashedPassword
      ,[Salt] = @salt
      ,[DateModified] = getdate()
 WHERE  [UserId]=@UserId
end

SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[agent_user_has_permission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_user_has_permission]
	@UserId int,
	@RequiredPermission nvarchar(50)
as
begin
	set transaction isolation level read uncommitted
	set nocount on
	
	declare @HasPermission bit = 0
	if exists(select 1
		from AgentUserAgentRole ur 
		join AgentRole r on r.RoleId = ur.RoleId
		join AgentRole r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
		join AgentRoleAgentPermission rp on rp.RoleId = r_sub.RoleId
		join AgentPermission p on p.PermissionId = rp.PermissionId	
		where ur.UserId = @UserId and p.name = @RequiredPermission
			and not exists(select 1 from AgentUserAgentPermission where UserId = @UserId and PermissionId = p.PermissionId and Denied = 1)
		union 
		select 1
		from AgentUserAgentPermission ap
		join AgentPermission p on p.PermissionId = ap.PermissionId
		where ap.UserId = @UserId and p.name = @RequiredPermission and ap.Denied = 0
	)
	begin
		select @HasPermission = 1
	end
	select @HasPermission HasPermission
end



GO
/****** Object:  StoredProcedure [dbo].[agent_user_has_role]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[agent_user_has_role]
	@UserId int,
	@RequiredRole nvarchar(50)
as
begin
	set transaction isolation level read uncommitted
	set nocount on
	
	declare @HasRole bit = 0
	if exists(select 1
		from AgentUserAgentRole ur 
		join AgentRole r on r.RoleId = ur.RoleId
		join AgentRole r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
		where ur.UserId = @UserId and r_sub.name = @RequiredRole
	)
	begin
		set @HasRole = 1
	end
	select @HasRole HasRole
end
















 
 


GO
/****** Object:  StoredProcedure [dbo].[alipay_job_trade_payment_confirmed]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[alipay_job_trade_payment_confirmed]
	@TradeId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on

begin tran

	-- 这个很重要，千万别去掉这个判断
	if exists(select 1 from Trade where TradeId = @TradeId and DatePaymentConfirmed is not null) return

	-- 如果没有回调过，PASS
	if not exists(select 1 from paymentnotify where out_trade_no = cast(@TradeId as nvarchar(50)) and trade_status = 'TRADE_SUCCESS') return

	-- 如果金额不对，PASS
	declare @paid_amount money, @should_pay_amount money
	select @paid_amount = total_fee from paymentnotify where out_trade_no = cast(@TradeId as nvarchar(50)) and trade_status = 'TRADE_SUCCESS'
	select @should_pay_amount = sum(cast(isnull(o.updatedamount,o.amount) as int)) from trade t join [order] o on o.orderid = t.orderid
	if @paid_amount < @should_pay_amount return

	update t
	set t.DatePaymentConfirmed = getdate()
	from Trade t
	where t.TradeId = @TradeId 

	update o
	set o.DatePaymentConfirmed = getdate()
	from [Order] o
	join Trade t on t.OrderId = o.OrderId
	where t.TradeId = @TradeId 

	update CompanyCashIn set DatePaymentConfirmed = getdate() where TradeId = @TradeId

	declare @CompanyId bigint
	select top 1 @CompanyId = CompanyId from [Order] o join Trade t on t.OrderId = o.OrderId where t.TradeId = @TradeId
	-- 确保状态为PAID， 以防支付宝没有回调成功
	exec api_job_trade_paid @CompanyId, @TradeId

	declare @Balance money, @Amount money
	select @Balance = Balance from Company where CompanyId = @CompanyId

	-- 充值成功后，先进行充值数据插入
	--更新充状态
	select @Amount = Amount from CompanyCashIn where TradeId = @TradeId and CompanyId = @CompanyId

	--插入充值金额
	insert into CompanyCashFlow(CompanyId, Balance, Payment, FlowTypeId) values(@CompanyId, @Balance + @Amount, @Amount,1)
	update Company set Balance = Balance + @Amount where CompanyId = @CompanyId

	--扣除金额，进行工资结算
	declare @TotalPayment money
	select @TotalPayment = sum(isnull(UpdatedAmount,Amount)) from [Order] o join Trade t on t.OrderId = o.OrderId where t.TradeId = @TradeId

	update Company set Balance = Balance - @TotalPayment where CompanyId = @CompanyId
	insert into CompanyCashFlow(CompanyId, Balance, Payment, FlowTypeId) values(@CompanyId, @Balance+@Amount-@TotalPayment, -@TotalPayment,2)

		
	-- 记录对学生的充值
	insert into UserCashIn(UserId, Amount, Balance, Note)
	select u.UserId, sum(isnull(ol.UpdatedAmount, ol.Amount)), sum(isnull(ol.UpdatedAmount, ol.Amount)) + u.Balance, '结算充值'
	from [User] u
	join OrderLine ol on ol.UserId = u.UserId
	join [Order] o on o.OrderId = ol.OrderId
	join Trade t on t.OrderId = o.OrderId
	where t.TradeId = @TradeId
	group by u.UserId, u.Balance

	--对学生进行充值
	update u
	set u.Balance = u.Balance + sub.Amount
	from [User] u
	cross apply (
		select sum(isnull(ol.UpdatedAmount, ol.Amount)) Amount
		from OrderLine ol 
		join [Order] o on o.OrderId = ol.OrderId
		join Trade t on t.OrderId = o.OrderId
		where t.TradeId = @TradeId and ol.userid = u.userid
		group by ol.userid
	) sub

commit tran
end

GO
/****** Object:  StoredProcedure [dbo].[api_company_login]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_company_login]
	@CompanyId	bigint,
	@Mobile nvarchar(50),
	@Device nvarchar(50),
	@DeviceToken nvarchar(255),
	@IPAddress	nvarchar(255),
	@DownloadFromApplicationId int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Token nvarchar(255), @TokenExpiryDate datetime

	set @Token = NEWID()
	set @TokenExpiryDate = DATEADD(month,1,getdate())
	set @DownloadFromApplicationId = Nullif(@DownloadFromApplicationId,0)
	update Company
	set DeviceToken = @DeviceToken,
		Device = @Device,
		DownloadFromApplicationId = @DownloadFromApplicationId,
		IsLogin = 1
	where CompanyId = @CompanyId

	if exists(select 1 from CompanyLogon where CompanyId = @CompanyId)
	begin
		update CompanyLogon
		set Token = @Token,
		TokenExpiryDate = @TokenExpiryDate,
		DateLogon = GETDATE(),
		IPAddress = @IPAddress
		where CompanyId = @CompanyId
	end
	else
	begin
		insert into CompanyLogon(CompanyId, Token, TokenExpiryDate, DateLogon, IPAddress)
		values(@CompanyId, @Token, @TokenExpiryDate, GETDATE(), @IPAddress)
	end

	select @Token Token, @TokenExpiryDate TokenExpiryDate

end

GO
/****** Object:  StoredProcedure [dbo].[api_create_search_filter_by_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_create_search_filter_by_user]
	@UserId		bigint,
	@Gender		int,
	@Regions	nvarchar(max),
	@ActivityJobPositions	nvarchar(max),
	@CampusJobCategories	nvarchar(max),
	@InternJobCategories	nvarchar(max),
	@ServiceJobPositions	nvarchar(max),
	@TutorJobPapers	nvarchar(max),
	@MonMorning	bit,
	@MonAfternoon bit,
	@MonNight	bit,
	@TueMorning	bit,
	@TueAfternoon bit,
	@TueNight	bit,
	@WedMorning	bit,
	@WedAfternoon bit,
	@WedNight	bit,
	@ThuMorning	bit,
	@ThuAfternoon bit,
	@ThuNight	bit,
	@FriMorning	bit,
	@FriAfternoon bit,
	@FriNight	bit,
	@SatMorning	bit,
	@SatAfternoon bit,
	@SatNight	bit,
	@SunMorning	bit,
	@SunAfternoon bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	if exists(select 1 from FilterGender where userid = @userid)
	begin
		update filtergender set gender = @gender where userid = @UserId
	end
	else
	begin
		insert into filtergender(UserId, Gender) values(@UserId, @gender)
	end

	delete from FilterRegion where UserId = @UserId
	insert into FilterRegion(UserId, RegionId)
	select @UserId, convert(int,string)
	from dbo.fn_split_string_by(@Regions, ',')

	delete from FilterActivityJob where UserId = @UserId
	insert into FilterActivityJob(UserId, PositionId)
	select @UserId, convert(int,string)
	from dbo.fn_split_string_by(@ActivityJobPositions, ',')

	delete from FilterCampusJob where UserId = @UserId
	insert into FilterCampusJob(UserId, CategoryId)
	select @UserId, convert(int,string)
	from dbo.fn_split_string_by(@CampusJobCategories, ',')

	delete from FilterInternJob where UserId = @UserId
	insert into FilterInternJob(UserId, CategoryId)
	select @UserId, convert(int,string)
	from dbo.fn_split_string_by(@InternJobCategories, ',')

	delete from FilterServiceJob where UserId = @UserId
	insert into FilterServiceJob(UserId, PositionId)
	select @UserId, convert(int,string)
	from dbo.fn_split_string_by(@ServiceJobPositions, ',')

	delete from FilterTutorJob where UserId = @UserId
	insert into FilterTutorJob(UserId, PaperId)
	select @UserId, convert(int,string)
	from dbo.fn_split_string_by(@TutorJobPapers, ',')

	if exists(select 1 from FilterWorkTime where userid = @UserId)
	begin
		update FilterWorkTime
		set MonMorning = @MonMorning,
			MonAfternoon = @MonAfternoon,
			MonNight = @MonNight,
			TueMorning = @TueMorning,
			TueAfternoon = @TueAfternoon,
			TueNight = @TueNight,
			WedMorning = @WedMorning,
			WedAfternoon = @WedAfternoon,
			WedNight = @WedNight,
			ThuMorning = @ThuMorning,
			ThuAfternoon = @ThuAfternoon,
			ThuNight = @ThuNight,
			FriMorning = @FriMorning,
			FriAfternoon = @FriAfternoon,
			FriNight = @FriNight,
			SatMorning = @SatMorning,
			SatAfternoon = @SatAfternoon,
			SatNight = @SatNight,
			SunMorning = @SunMorning,
			SunAfternoon = @SunAfternoon,
			SunNight = @SunNight
		where userid = @UserId
	end
	else
	begin
		insert into filterworktime(UserId, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
			ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight)
		values(@UserId, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
			@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight)
	end
end

GO
/****** Object:  StoredProcedure [dbo].[api_create_user_bank_account]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_create_user_bank_account]
	@UserId		bigint,
	@AccountName nvarchar(50),
	@AccountNo	nvarchar(50),
	@BankId		int
as
begin set transaction isolation level read uncommitted	set nocount on
	if not exists(select 1 from UserAccount where userid = @userid and bankid = @bankid and datedeleted is null)
	begin
		declare @Default bit = 0
		if not exists(select 1 from UserAccount where userid = @userid and datedeleted is null)
		begin
			set @Default = 1
		end
		insert into UserAccount(UserId, BankId, AccountName, AccountNo, [Default])
		values(@userid, @bankid, @AccountName, @AccountNo, @Default)	
	end

end

GO
/****** Object:  StoredProcedure [dbo].[api_delete_company_job_list_employee]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_delete_company_job_list_employee]
	@CompanyId		bigint,
	@JobId	bigint,
	@JobTypeId int
as
begin set transaction isolation level read uncommitted	set nocount on
IF 1 = @jobtypeId
BEGIN 
	update ActivityJob
	set DateEmployeeManagementDeleted = getdate()
	where jobid = @Jobid   and companyid = @companyId
	END
ELSE IF 2 = @jobtypeId
	update Campusjob
	set DateEmployeeManagementDeleted = getdate()
	where jobid = @Jobid   and companyid = @companyId
	
ELSE IF 3 = @jobtypeId
	update InternJob
	set DateEmployeeManagementDeleted = getdate()
	where jobid = @Jobid   and companyid = @companyId
	
ELSE IF 4 = @jobtypeId
	update ServiceJob
	set DateEmployeeManagementDeleted = getdate()
	where jobid = @Jobid  and companyid = @companyId

ELSE IF 5 = @jobtypeId
	update TutorJob
	set DateEmployeeManagementDeleted = getdate()
	where jobid = @Jobid   and companyid = @companyId
end


GO
/****** Object:  StoredProcedure [dbo].[api_get_activity_job_detail]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_activity_job_detail]
	@JobId		bigint,
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select j.JobId, j.Title, p.Name PositionName, isnull(t.Name,'') Term, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission,
		case when j.Gender = 1 then '男' when j.Gender = 0 then '女' else '' end Gender, 
		isnull(j.Wage,0) Wage, Isnull(u.Name,'') WageUnit,  r.Name Region, isnull(applies.Applies,0) Applies, isnull(j.PeopleRequired,0) PeopleRequired, 
		isnull(j.Description,'') Description, isnull(j.Address,'') Address, isnull(j.Contact,'') Contact, isnull(j.ContactPhone,'') ContactPhone, 
		isnull(right(CONVERT(nchar(10), j.DateFrom,126),5),'') DateFrom,  isnull(right(CONVERT(nchar(10), j.DateExpiry,126),5),'') DateExpire,
		isnull(right(CONVERT(nchar(10), j.WorkFrom,126),5),'') WorkFrom, isnull(right(CONVERT(nchar(10), j.WorkEnd,126),5),'') WorkEnd, 
		isnull(j.FakeViewTimes,0) ViewTimes, 
		isnull(isnull(c.FullName,j.CompanyName),'') FullName, isnull(c.Verified,0) Verified, j.Deposit, Reptile, IgnoreTimeSheet, Sticky, ISNULL(j.SourceWebSite,'') SourceWebSite,
		cast(case when exists(select 1 from UserFavoriteJob where UserId = @UserId and JobId = @JobId and JobTypeId = 1) then 1 else 0 end as bit) Favorite,
		MonMorning, MonAfternoon, MonNight,
		TueMorning, TueAfternoon, TueNight,
		WedMorning, WedAfternoon, WedNight,
		ThuMorning, ThuAfternoon, ThuNight,
		FriMorning, FriAfternoon, FriNight,
		SatMorning, SatAfternoon, SatNight,
		SunMorning, SunAfternoon, SunNight
	from ActivityJob j
		left join WageUnit u on u.UnitId = j.WageUnitId 
		join ActivityJobPosition p on p.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId 
		left join Term t on t.TermId = j.TermId
		left join Company c on c.CompanyId = j.CompanyId
		outer apply(
			select COUNT(0) Applies
			from ActivityJobApply a 
			where a.JobId = j.JobId and a.StatusId = 2
		) applies
	where j.JobId = @JobId

	update ActivityJob
	set ViewTimes = ISNULL(ViewTimes,0) + 1, FakeViewTimes = FakeViewTimes + 1
	where JobId = @JobId
end



GO
/****** Object:  StoredProcedure [dbo].[api_get_advertising_home_page]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_advertising_home_page]
as
begin set transaction isolation level read uncommitted	set nocount on
	select isnull(Title,'') Title, ImagePath, isnull(Link,'') Link, isnull(JobId,0) JobId, isnull(JobTypeId,0) JobTypeId, isnull(a.TypeId,0) TypeId, isnull(t.Name,'') AdvertisingType,
		isnull(a.NavImagePath,'') NavImagePath
	from Advertising a
	left join AdvertisingType t on t.TypeId = a.TypeId
	where PositionId = 1 and dateadd(d,0,datediff(d,0,GETDATE())) between DateFrom and DateTo
end


GO
/****** Object:  StoredProcedure [dbo].[api_get_campus_job_detail]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_campus_job_detail]
	@JobId		bigint,
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select j.JobId, j.Title, c.Name CategoryName, 
		case when j.Gender = 1 then '男' when j.Gender = 0 then '女' else '' end Gender, 
		r.Name Region, isnull(applies.Applies,0) Applies, isnull(j.PeopleRequired,0) PeopleRequired, 
		isnull(j.Description,'') Description, isnull(j.Address,'') Address, isnull(j.Contact,'') Contact, 
		isnull(j.ContactPhone,'') ContactPhone, s.Name SchoolName,
		isnull(right(CONVERT(nchar(10), j.DateFrom,126),5),'') DateFrom,  isnull(right(CONVERT(nchar(10), j.DateExpiry,126),5),'') DateExpire,
		isnull(right(CONVERT(nchar(10), j.WorkFrom,126),5),'') WorkFrom, isnull(right(CONVERT(nchar(10), j.WorkEnd,126),5),'') WorkEnd, isnull(j.FakeViewTimes,0) ViewTimes,
		isnull(isnull(co.FullName,j.CompanyName),'') FullName, isnull(co.Verified,0) Verified, Reptile, IgnoreTimeSheet, Sticky,ISNULL(j.SourceWebSite,'') SourceWebSite,
		cast(case when exists(select 1 from UserFavoriteJob where UserId = @UserId and JobId = @JobId and JobTypeId = 2) then 1 else 0 end as bit) Favorite,
		MonMorning, MonAfternoon, MonNight,
		TueMorning, TueAfternoon, TueNight,
		WedMorning, WedAfternoon, WedNight,
		ThuMorning, ThuAfternoon, ThuNight,
		FriMorning, FriAfternoon, FriNight,
		SatMorning, SatAfternoon, SatNight,
		SunMorning, SunAfternoon, SunNight
	from CampusJob j
		join CampusJobCategory c on c.CategoryId = j.CategoryId
		join School s on s.SchoolId = j.SchoolId
		join Region r on r.RegionId = j.RegionId 
		left join Company co on co.CompanyId = j.CompanyId
		outer apply(
			select COUNT(0) Applies
			from CampusJobApply a 
			where a.JobId = j.JobId and a.StatusId = 2
		) applies
	where j.JobId = @JobId

	update CampusJob
	set ViewTimes = ISNULL(ViewTimes,0) + 1, FakeViewTimes = FakeViewTimes + 1
	where JobId = @JobId
end

GO
/****** Object:  StoredProcedure [dbo].[api_get_company_info]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_company_info]
	@CompanyId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select c.CompanyId, Mobile, isnull(c.FullName,'') FullName, isnull(c.Address,'') Address, isnull(c.Introduction,'') Introduction, 
		isnull(c.LicensePhoto,'') LicensePhoto, isnull(c.AgentPhoto,'') AgentPhoto, c.Verified, c.Balance, c.VoiceAlert, c.Vibrate,
		cast(case when isnull(c.PaymentPassword,'') = '' then 0 else 1 end as bit) PaymentPasswordSet
	from Company c
	where CompanyId =  @CompanyId
end

GO
/****** Object:  StoredProcedure [dbo].[api_get_company_job_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_company_job_list]
	@CompanyId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select JobId, JobTypeId, JobType, Region, Title, Deposit, Verified, DateCreated, ViewTimes, StatusId, Status, PeopleRequired, IncludeDinner, IncludeCommission, IncludeRoom, Wage, WageUnit, Gender, Term
	from
	(
		select JobId, j.JobTypeId, t.Name JobType, r.Name Region, j.Title, j.Deposit, c.Verified, j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,  CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired, j.DateCreated DateCreatedDate
		from ActivityJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		where j.CompanyId = @CompanyId
		union all
		select JobId, j.JobTypeId, t.Name JobType, r.Name Region,j.Title, 0, c.Verified,cast(0 as bit), cast(0 as bit), cast(0 as bit), '' Wage, '' WageUnit, j.Gender, '' Term, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired, j.DateCreated DateCreatedDate
		from CampusJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		where j.CompanyId = @CompanyId
		union all
		select JobId, j.JobTypeId, t.Name JobType, r.Name Region,j.Title, j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, '' Term, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired, j.DateCreated DateCreatedDate
		from InternJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		where j.CompanyId = @CompanyId
		union all
		select JobId, j.JobTypeId, t.Name JobType, r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired, j.DateCreated DateCreatedDate
		from ServiceJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		where j.CompanyId = @CompanyId
		union all
		select JobId, j.JobTypeId, t.Name JobType, r.Name Region,j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term, CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.StatusId, s.Name Status, j.PeopleRequired, j.DateCreated DateCreatedDate
		from TutorJob j 
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		where j.CompanyId = @CompanyId
	) sub
	order by DateCreatedDate desc, JobId desc
end


GO
/****** Object:  StoredProcedure [dbo].[api_get_company_job_list_employee]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_company_job_list_employee]
	@CompanyId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select JobId, JobTypeId, JobType,Region, Title, isnull(Deposit,0) Deposit, Verified, DateCreated, ViewTimes, StatusId, Status, isnull(PeopleRequired,0) PeopleRequired, 
		isnull(IncludeDinner,0) IncludeDinner, isnull(IncludeCommission,0) IncludeCommission, isnull(IncludeRoom,0) IncludeRoom, 
		isnull(Wage,'') Wage, isnull(WageUnit,'') WageUnit, Gender, isnull(Term,'') Term, isnull(CompanyName,'') CompanyName, isnull(CategoryName,'') CategoryName
	from
	(
		select JobId, j.JobTypeId, t.Name JobType,r.Name Region, c.FullName CompanyName, isnull(j.SubCategoryName,j.CategoryName) CategoryName, j.Title, j.Deposit, c.Verified, j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,  
			CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.PeopleRequired, j.DateCreated DateCreatedDate,
			case when dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry then j.StatusId else 3 end StatusId, 
			case when dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry then s.Name else '历史记录' end Status
		from view_job j 
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		where j.CompanyId = @CompanyId and j.StatusId = 2 and j.DateEmployeeManagementDeleted is null
	) sub
	order by DateCreatedDate desc, JobId desc
end

GO
/****** Object:  StoredProcedure [dbo].[api_get_company_job_list_new]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_company_job_list_new]
	@CompanyId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select JobId, JobTypeId, JobType,Region, Title, Deposit, Verified, DateCreated, ViewTimes, StatusId, Status, PeopleRequired, 
		IncludeDinner, IncludeCommission, IncludeRoom, Wage, WageUnit, Gender, Term, isnull(CompanyName,'') CompanyName, Category
	from
	(
		select JobId, j.JobTypeId, t.Name JobType,r.Name Region, c.FullName CompanyName, j.Title, j.Deposit, c.Verified, j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term,  
			CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.PeopleRequired, j.DateCreated DateCreatedDate,
			case when dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry then j.StatusId else 3 end StatusId, 
			case when dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry then s.Name else '历史记录' end Status,
			p.name Category
		from ActivityJob j 
			join ActivityJobPosition p on p.PositionId = j.PositionId
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		where j.CompanyId = @CompanyId
		union all
		select JobId, j.JobTypeId, t.Name JobType, r.Name Region,c.FullName CompanyName, j.Title, 0, c.Verified,cast(0 as bit), cast(0 as bit), cast(0 as bit), '' Wage, '' WageUnit, j.Gender, '' Term, 
			CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.PeopleRequired, j.DateCreated DateCreatedDate,
			case when dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry then j.StatusId else 3 end StatusId, 
			case when dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry then s.Name else '历史记录' end Status,
			cat.name Category
		from CampusJob j 
			join CampusJobCategory cat on cat.CategoryId = j.CategoryId
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		where j.CompanyId = @CompanyId
		union all
		select JobId, j.JobTypeId, t.Name JobType,r.Name Region, c.FullName CompanyName, j.Title, j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, '' Term, 
			CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.PeopleRequired, j.DateCreated DateCreatedDate,
			case when dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry then j.StatusId else 3 end StatusId, 
			case when dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry then s.Name else '历史记录' end Status,
			cat.name Category
		from InternJob j 
			join InternJobCategory cat on cat.CategoryId = j.CategoryId
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		where j.CompanyId = @CompanyId
		union all
		select JobId, j.JobTypeId, t.Name JobType, r.Name Region,c.FullName CompanyName, j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term, 
			CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.PeopleRequired, j.DateCreated DateCreatedDate,
			case when dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry then j.StatusId else 3 end StatusId, 
			case when dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry then s.Name else '历史记录' end Status,
			cat.name Category
		from ServiceJob j 
			join ServiceJobPosition cat on cat.PositionId = j.PositionId
		join JobStatus s on s.StatusId = j.StatusId
		join JobType t on t.TypeId = j.JobTypeId
		join Company c on c.CompanyId = j.CompanyId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		where j.CompanyId = @CompanyId
		union all
		select JobId, j.JobTypeId, t.Name JobType, r.Name Region,c.FullName CompanyName, j.Title,j.Deposit, c.Verified,j.IncludeDinner, j.IncludeCommission, j.IncludeRoom, j.Wage, u.Name WageUnit, j.Gender, tm.Name Term, 
			CONVERT(nchar(10), j.DateCreated,126) DateCreated, j.ViewTimes, j.PeopleRequired, j.DateCreated DateCreatedDate,
			case when dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry then j.StatusId else 3 end StatusId, 
			case when dateadd(d,0,datediff(d,0,getdate())) between j.datefrom and j.dateexpiry then s.Name else '历史记录' end Status,
			p.name Category
		from TutorJob j 
			join TutorJobPaper p on p.PaperId = j.PaperId
		join JobStatus s on s.StatusId = j.StatusId
		join Company c on c.CompanyId = j.CompanyId
		join JobType t on t.TypeId = j.JobTypeId
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term tm on tm.TermId = j.TermId
		join Region r on r.RegionId = j.RegionId 
		left join Region pr on pr.RegionId = r.ParentRegionId
		where j.CompanyId = @CompanyId
	) sub
	order by DateCreatedDate desc, JobId desc
end


GO
/****** Object:  StoredProcedure [dbo].[api_get_entity_update]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_entity_update]
	@Entity	nvarchar(50),
	@Version	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @NewVersion int
	select @NewVersion = Version from EntityUpdate where Version > @Version and Entity = @Entity

	select ISNULL(@NewVersion, @Version) Version
end

GO
/****** Object:  StoredProcedure [dbo].[api_get_intern_job_detail]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_intern_job_detail]
	@JobId		bigint,
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select j.JobId, j.Title, c.Name CategoryName, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission,
		case when j.Gender = 1 then '男' when j.Gender = 0 then '女' else '' end Gender, 
		isnull(j.Wage,0) Wage, Isnull(u.Name,'') WageUnit,  r.Name Region, isnull(applies.Applies,0) Applies, isnull(j.PeopleRequired,0) PeopleRequired, 
		isnull(j.Description,'') Description, isnull(j.Address,'') Address, isnull(j.Contact,'') Contact, isnull(j.ContactPhone,'') ContactPhone, 
		isnull(right(CONVERT(nchar(10), j.DateFrom,126),5),'') DateFrom,  isnull(right(CONVERT(nchar(10), j.DateExpiry,126),5),'') DateExpire,
		isnull(right(CONVERT(nchar(10), j.WorkFrom,126),5),'') WorkFrom, isnull(right(CONVERT(nchar(10), j.WorkEnd,126),5),'') WorkEnd,
		isnull(j.FakeViewTimes,0) ViewTimes,
		isnull(isnull(co.FullName,j.CompanyName),'') FullName, isnull(co.Verified,0) Verified, j.Deposit, Reptile, IgnoreTimeSheet, Sticky,ISNULL(j.SourceWebSite,'') SourceWebSite,
		cast(case when exists(select 1 from UserFavoriteJob where UserId = @UserId and JobId = @JobId and JobTypeId = 3) then 1 else 0 end as bit) Favorite,
		MonMorning, MonAfternoon, MonNight,
		TueMorning, TueAfternoon, TueNight,
		WedMorning, WedAfternoon, WedNight,
		ThuMorning, ThuAfternoon, ThuNight,
		FriMorning, FriAfternoon, FriNight,
		SatMorning, SatAfternoon, SatNight,
		SunMorning, SunAfternoon, SunNight
	from InternJob j
		left join WageUnit u on u.UnitId = j.WageUnitId 
		join InternJobCategory c on c.CategoryId = j.CategoryId
		join Region r on r.RegionId = j.RegionId 
		left join Company co on co.CompanyId = j.CompanyId
		outer apply(
			select COUNT(0) Applies
			from InternJobApply a 
			where a.JobId = j.JobId and a.StatusId = 2
		) applies
	where j.JobId = @JobId

	update InternJob
	set ViewTimes = ISNULL(ViewTimes,0) + 1, FakeViewTimes = FakeViewTimes + 1
	where JobId = @JobId
end

GO
/****** Object:  StoredProcedure [dbo].[api_get_job_applied_user_activity]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_job_applied_user_activity]
	@JobId		bigint,
	@CompanyId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select u.UserId, ISNUll(u.FullName,'') FullName, ISNULL(r.Name,'') Region, u.Mobile, isnull(u.ProfilePhoto,'') ProfilePhoto, s.StatusId, s.Name Status,
		j.PeopleRequired, isnull(sum(case when s.statusId = 2 then 1 else 0 end) over(),0) PeopleHired
	from ActivityJobApply a
	join ActivityJob j on j.JobId = a.JobId
	join [User] u on u.UserId = a.UserId
	join ApplyStatus s on s.StatusId = a.StatusId
	left join Region r on r.RegionId = u.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	where j.JobId = @JobId and CompanyId = @CompanyId and a.statusid <> 4
	order by case when a.StatusId =2 then 1 when a.StatusId = 1 then 2 when a.StatusId = 3 then 3 end, a.DateModified desc
end

GO
/****** Object:  StoredProcedure [dbo].[api_get_job_applied_user_campus]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_job_applied_user_campus]
	@JobId		bigint,
	@CompanyId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select u.UserId, ISNUll(u.FullName,'') FullName, ISNULL(r.Name,'') Region, u.Mobile, isnull(u.ProfilePhoto,'') ProfilePhoto, s.StatusId, s.Name Status,
		j.PeopleRequired, isnull(sum(case when s.statusId = 2 then 1 else 0 end) over(),0) PeopleHired
	from CampusJobApply a
	join CampusJob j on j.JobId = a.JobId
	join [User] u on u.UserId = a.UserId
	join ApplyStatus s on s.StatusId = a.StatusId
	left join Region r on r.RegionId = u.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	where j.JobId = @JobId and CompanyId = @CompanyId and a.statusid <> 4
	order by case when a.StatusId =2 then 1 when a.StatusId = 1 then 2 when a.StatusId = 4 then 3 when a.StatusId = 3 then 4 end, a.DateModified desc
end



GO
/****** Object:  StoredProcedure [dbo].[api_get_job_applied_user_intern]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_job_applied_user_intern]
	@JobId		bigint,
	@CompanyId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select u.UserId, ISNUll(u.FullName,'') FullName, ISNULL(r.Name,'') Region, u.Mobile, isnull(u.ProfilePhoto,'') ProfilePhoto, s.StatusId, s.Name Status,
		j.PeopleRequired, isnull(sum(case when s.statusId = 2 then 1 else 0 end) over(),0) PeopleHired
	from InternJobApply a
	join InternJob j on j.JobId = a.JobId
	join [User] u on u.UserId = a.UserId
	join ApplyStatus s on s.StatusId = a.StatusId
	left join Region r on r.RegionId = u.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	where j.JobId = @JobId and CompanyId = @CompanyId and a.statusid <> 4
	order by case when a.StatusId =2 then 1 when a.StatusId = 1 then 2 when a.StatusId = 4 then 3 when a.StatusId = 3 then 4 end, a.DateModified desc
end



GO
/****** Object:  StoredProcedure [dbo].[api_get_job_applied_user_service]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_job_applied_user_service]
	@JobId		bigint,
	@CompanyId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select u.UserId, ISNUll(u.FullName,'') FullName, ISNULL(r.Name,'') Region, u.Mobile, isnull(u.ProfilePhoto,'') ProfilePhoto, s.StatusId, s.Name Status,
		j.PeopleRequired, isnull(sum(case when s.statusId = 2 then 1 else 0 end) over(),0) PeopleHired
	from ServiceJobApply a
	join ServiceJob j on j.JobId = a.JobId
	join [User] u on u.UserId = a.UserId
	join ApplyStatus s on s.StatusId = a.StatusId
	left join Region r on r.RegionId = u.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	where j.JobId = @JobId and CompanyId = @CompanyId and a.statusid <> 4
	order by case when a.StatusId =2 then 1 when a.StatusId = 1 then 2 when a.StatusId = 4 then 3 when a.StatusId = 3 then 4 end, a.DateModified desc
end



GO
/****** Object:  StoredProcedure [dbo].[api_get_job_applied_user_tutor]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_job_applied_user_tutor]
	@JobId		bigint,
	@CompanyId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select u.UserId, ISNUll(u.FullName,'') FullName, ISNULL(r.Name,'') Region, u.Mobile, isnull(u.ProfilePhoto,'') ProfilePhoto, s.StatusId, s.Name Status,
		j.PeopleRequired, isnull(sum(case when s.statusId = 2 then 1 else 0 end) over(),0) PeopleHired
	from TutorJobApply a
	join TutorJob j on j.JobId = a.JobId
	join [User] u on u.UserId = a.UserId
	join ApplyStatus s on s.StatusId = a.StatusId
	left join Region r on r.RegionId = u.RegionId
	left join Region pr on pr.RegionId = r.ParentRegionId
	where j.JobId = @JobId and CompanyId = @CompanyId and a.statusid <> 4
	order by case when a.StatusId =2 then 1 when a.StatusId = 1 then 2 when a.StatusId = 4 then 3 when a.StatusId = 3 then 4 end, a.DateModified desc
end





GO
/****** Object:  StoredProcedure [dbo].[api_get_job_category]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_job_category]
as
begin set transaction isolation level read uncommitted	set nocount on
	select 1 JobTypeId, '商业活动' JobType, PositionId as CategoryId, Name
	from ActivityJobPosition
	union all
	select  3 JobTypeId, '实习生' JobType, CategoryId, Name
	from InternJobCategory 
	union all
	select  4 JobTypeId, '服务生' JobType, PositionId as CategoryId, Name
	from ServiceJobPosition
	union all
	select  5 JobTypeId, '家教' JobType, PaperId as CategoryId, Name
	from TutorJobPaper
end



GO
/****** Object:  StoredProcedure [dbo].[api_get_job_sign_in_employee_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_job_sign_in_employee_list]
	@JobId	bigint,
	@JobTypeId int,
	@Today	date
as
begin set transaction isolation level read uncommitted	set nocount on

	select isnull(u.ProfilePhoto,'') ProfilePhoto, u.UserId, u.Mobile, isnull(u.FullName,'') FullName, isnull(s.Note,'') Note, isnull(s.WageAdjusted,0) WageAdjusted,
		isnull(left(convert(nvarchar,isnull(DateUpdatedSignedIn,DateConfirmedSignedIn),120),16),'') DateConfirmedSignedIn,
		isnull(left(convert(nvarchar,isnull(DateUpdatedSignedOut,DateConfirmedSignedOut),120),16),'') DateConfirmedSignedOut,
		isnull(right(left(convert(nvarchar,isnull(DateUpdatedSignedIn,DateConfirmedSignedIn),120),16),5),'') TimeConfirmedSignedIn,
		isnull(right(left(convert(nvarchar,isnull(DateUpdatedSignedOut,DateConfirmedSignedOut),120),16),5),'') TimeConfirmedSignedOut,
		isnull(CAST(DATEDIFF(second, isnull(DateUpdatedSignedIn,DateConfirmedSignedIn), isnull(DateUpdatedSignedOut,DateConfirmedSignedOut)) / 60.0 as decimal(10,2)),0) WorkingMinutes,
		sum(case when isnull(DateUpdatedSignedIn,DateConfirmedSignedIn) is null then 0 else 1 end) over() TotalSignedIn,
		sum(case when isnull(DateUpdatedSignedOut,DateConfirmedSignedOut) is null then 0 else 1 end) over() TotalSignedOut,
		case when exists(select 1 from [Order] o where o.JobId = @JobId and o.JobTypeId = @JobTypeId and o.Date = @Today and DatePaid is not null) then 1 else 0 end Paid
	from ActivityJob j
	join ActivityJobApply a on a.Jobid = j.JobId and a.StatusId = 2 and (a.DateEnded is null or a.DateEnded >= DateAdd(d,0,@Today)) and @Today < getdate()
	join [User] u on u.userid = a.userid
	left join JobApplySignIn s on s.JobId = j.JobId and s.JobTypeId = j.JobTypeId and s.UserId = a.UserId and s.Date = @Today
	where @JobTypeId = 1 and j.JobId = @JobId and j.JobTypeId = @JobTypeId
	union all
	select isnull(u.ProfilePhoto,'') ProfilePhoto, u.UserId, u.Mobile, isnull(u.FullName,'') FullName, isnull(s.Note,'') Note, isnull(s.WageAdjusted,0) WageAdjusted,
		isnull(left(convert(nvarchar,isnull(DateUpdatedSignedIn,DateConfirmedSignedIn),120),16),'') DateConfirmedSignedIn,
		isnull(left(convert(nvarchar,isnull(DateUpdatedSignedOut,DateConfirmedSignedOut),120),16),'') DateConfirmedSignedOut,
		isnull(right(left(convert(nvarchar,isnull(DateUpdatedSignedIn,DateConfirmedSignedIn),120),16),5),'') TimeConfirmedSignedIn,
		isnull(right(left(convert(nvarchar,isnull(DateUpdatedSignedOut,DateConfirmedSignedOut),120),16),5),'') TimeConfirmedSignedOut,
		isnull(CAST(DATEDIFF(second, isnull(DateUpdatedSignedIn,DateConfirmedSignedIn), isnull(DateUpdatedSignedOut,DateConfirmedSignedOut)) / 60.0 as decimal(10,2)),0) WorkingMinutes,
		sum(case when isnull(DateUpdatedSignedIn,DateConfirmedSignedIn) is null then 0 else 1 end) over() TotalSignedIn,
		sum(case when isnull(DateUpdatedSignedOut,DateConfirmedSignedOut) is null then 0 else 1 end) over() TotalSignedOut,
		case when exists(select 1 from [Order] o where o.JobId = @JobId and o.JobTypeId = @JobTypeId and o.Date = @Today and DatePaid is not null) then 1 else 0 end Paid
	from CampusJob j
	join CampusJobApply a on a.Jobid = j.JobId and a.StatusId = 2 and (a.DateEnded is null or a.DateEnded >= DateAdd(d,0,@Today)) and @Today < getdate()
	join [User] u on u.userid = a.userid
	left join JobApplySignIn s on s.JobId = j.JobId and s.JobTypeId = j.JobTypeId and s.UserId = a.UserId and s.Date = @Today
	where @JobTypeId = 2 and j.JobId = @JobId and j.JobTypeId = @JobTypeId
	union all
	select isnull(u.ProfilePhoto,'') ProfilePhoto, u.UserId, u.Mobile, isnull(u.FullName,'') FullName, isnull(s.Note,'') Note, isnull(s.WageAdjusted,0) WageAdjusted,
		isnull(left(convert(nvarchar,isnull(DateUpdatedSignedIn,DateConfirmedSignedIn),120),16),'') DateConfirmedSignedIn,
		isnull(left(convert(nvarchar,isnull(DateUpdatedSignedOut,DateConfirmedSignedOut),120),16),'') DateConfirmedSignedOut,
		isnull(right(left(convert(nvarchar,isnull(DateUpdatedSignedIn,DateConfirmedSignedIn),120),16),5),'') TimeConfirmedSignedIn,
		isnull(right(left(convert(nvarchar,isnull(DateUpdatedSignedOut,DateConfirmedSignedOut),120),16),5),'') TimeConfirmedSignedOut,
		isnull(CAST(DATEDIFF(second, isnull(DateUpdatedSignedIn,DateConfirmedSignedIn), isnull(DateUpdatedSignedOut,DateConfirmedSignedOut)) / 60.0 as decimal(10,2)),0) WorkingMinutes,
		sum(case when isnull(DateUpdatedSignedIn,DateConfirmedSignedIn) is null then 0 else 1 end) over() TotalSignedIn,
		sum(case when isnull(DateUpdatedSignedOut,DateConfirmedSignedOut) is null then 0 else 1 end) over() TotalSignedOut,
		case when exists(select 1 from [Order] o where o.JobId = @JobId and o.JobTypeId = @JobTypeId and o.Date = @Today and DatePaid is not null) then 1 else 0 end Paid
	from InternJob j
	join InternJobApply a on a.Jobid = j.JobId and a.StatusId = 2 and (a.DateEnded is null or a.DateEnded >= DateAdd(d,0,@Today)) and @Today < getdate()
	join [User] u on u.userid = a.userid
	left join JobApplySignIn s on s.JobId = j.JobId and s.JobTypeId = j.JobTypeId and s.UserId = a.UserId and s.Date = @Today
	where @JobTypeId = 3 and j.JobId = @JobId and j.JobTypeId = @JobTypeId
	union all
	select isnull(u.ProfilePhoto,'') ProfilePhoto, u.UserId, u.Mobile, isnull(u.FullName,'') FullName, isnull(s.Note,'') Note, isnull(s.WageAdjusted,0) WageAdjusted,
		isnull(left(convert(nvarchar,isnull(DateUpdatedSignedIn,DateConfirmedSignedIn),120),16),'') DateConfirmedSignedIn,
		isnull(left(convert(nvarchar,isnull(DateUpdatedSignedOut,DateConfirmedSignedOut),120),16),'') DateConfirmedSignedOut,
		isnull(right(left(convert(nvarchar,isnull(DateUpdatedSignedIn,DateConfirmedSignedIn),120),16),5),'') TimeConfirmedSignedIn,
		isnull(right(left(convert(nvarchar,isnull(DateUpdatedSignedOut,DateConfirmedSignedOut),120),16),5),'') TimeConfirmedSignedOut,
		isnull(CAST(DATEDIFF(second, isnull(DateUpdatedSignedIn,DateConfirmedSignedIn), isnull(DateUpdatedSignedOut,DateConfirmedSignedOut)) / 60.0 as decimal(10,2)),0) WorkingMinutes,
		sum(case when isnull(DateUpdatedSignedIn,DateConfirmedSignedIn) is null then 0 else 1 end) over() TotalSignedIn,
		sum(case when isnull(DateUpdatedSignedOut,DateConfirmedSignedOut) is null then 0 else 1 end) over() TotalSignedOut,
		case when exists(select 1 from [Order] o where o.JobId = @JobId and o.JobTypeId = @JobTypeId and o.Date = @Today and DatePaid is not null) then 1 else 0 end Paid
	from ServiceJob j
	join ServiceJobApply a on a.Jobid = j.JobId and a.StatusId = 2 and (a.DateEnded is null or a.DateEnded >= DateAdd(d,0,@Today)) and @Today < getdate()
	join [User] u on u.userid = a.userid
	left join JobApplySignIn s on s.JobId = j.JobId and s.JobTypeId = j.JobTypeId and s.UserId = a.UserId and s.Date = @Today
	where @JobTypeId = 4 and j.JobId = @JobId and j.JobTypeId = @JobTypeId
	union all
	select isnull(u.ProfilePhoto,'') ProfilePhoto, u.UserId, u.Mobile, isnull(u.FullName,'') FullName, isnull(s.Note,'') Note, isnull(s.WageAdjusted,0) WageAdjusted,
		isnull(left(convert(nvarchar,isnull(DateUpdatedSignedIn,DateConfirmedSignedIn),120),16),'') DateConfirmedSignedIn,
		isnull(left(convert(nvarchar,isnull(DateUpdatedSignedOut,DateConfirmedSignedOut),120),16),'') DateConfirmedSignedOut,
		isnull(right(left(convert(nvarchar,isnull(DateUpdatedSignedIn,DateConfirmedSignedIn),120),16),5),'') TimeConfirmedSignedIn,
		isnull(right(left(convert(nvarchar,isnull(DateUpdatedSignedOut,DateConfirmedSignedOut),120),16),5),'') TimeConfirmedSignedOut,
		isnull(CAST(DATEDIFF(second, isnull(DateUpdatedSignedIn,DateConfirmedSignedIn), isnull(DateUpdatedSignedOut,DateConfirmedSignedOut)) / 60.0 as decimal(10,2)),0) WorkingMinutes,
		sum(case when isnull(DateUpdatedSignedIn,DateConfirmedSignedIn) is null then 0 else 1 end) over() TotalSignedIn,
		sum(case when isnull(DateUpdatedSignedOut,DateConfirmedSignedOut) is null then 0 else 1 end) over() TotalSignedOut,
		case when exists(select 1 from [Order] o where o.JobId = @JobId and o.JobTypeId = @JobTypeId and o.Date = @Today and DatePaid is not null) then 1 else 0 end Paid
	from TutorJob j
	join TutorJobApply a on a.Jobid = j.JobId and a.StatusId = 2 and (a.DateEnded is null or a.DateEnded >= DateAdd(d,0,@Today)) and @Today < getdate()
	join [User] u on u.userid = a.userid
	left join JobApplySignIn s on s.JobId = j.JobId and s.JobTypeId = j.JobTypeId and s.UserId = a.UserId and s.Date = @Today
	where @JobTypeId = 5 and j.JobId = @JobId and j.JobTypeId = @JobTypeId
end
GO
/****** Object:  StoredProcedure [dbo].[api_get_job_user_favorite]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_job_user_favorite]
	@UserId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select JobId, JobType, JobTypeId, isnull(Title,'') Title, isnull(CategoryName,'') CategoryName, isnull(CompanyName,'') CompanyName, isnull(Term,'') Term, 
		isnull(IncludeDinner,0) IncludeDinner, isnull(IncludeRoom,0) IncludeRoom, isnull(IncludeCommission,0) IncludeCommission,
		case when Gender = 1 then '男' when Gender = 0 then '女' else '' end Gender, isnull(Wage,0) Wage, isnull(WageUnit,'') WageUnit, isnull(Region,'') Region,
		isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, isnull(ViewTimes,0) ViewTimes, Verified, isnull(Deposit,0) Deposit, Reptile, IgnoreTimeSheet, Sticky
	from(
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, p.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, t.Name Term, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission,j.Gender, j.Wage, u.Name WageUnit, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, f.DateCreated, Reptile, IgnoreTimeSheet, Sticky
			from ActivityJob j
			join UserFavoriteJob f on f.JobId = j.JobId and f.JobTypeId = 1
			left join Company co on co.CompanyId = j.CompanyId
			left join WageUnit u on u.UnitId = j.WageUnitId 
			join ActivityJobPosition p on p.PositionId = j.PositionId
			join Region r on r.RegionId = j.RegionId 
			join JobType tp on tp.TypeId = j.JobTypeId
			left join Region pr on pr.RegionId = r.ParentRegionId and pr.RootRegionId = r.RootRegionId and pr.Indentation = 2
			left join Term t on t.TermId = j.TermId
			where j.StatusId = 2 and f.UserId = @UserId and j.DateDeleted is null and j.[Disabled] = 0 
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, c.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, null Term, null, null, null, j.Gender, null, null, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(0 as bit) Deposit, f.DateCreated, Reptile, IgnoreTimeSheet, Sticky
			from CampusJob j 
			join UserFavoriteJob f on f.JobId = j.JobId and f.JobTypeId = 2
			left join Company co on co.CompanyId = j.CompanyId
			join CampusJobCategory c on c.CategoryId = j.CategoryId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId and pr.RootRegionId = r.RootRegionId and pr.Indentation = 2
			where j.StatusId = 2 and f.UserId = @UserId and j.DateDeleted is null and j.[Disabled] = 0 
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, c.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, null Term, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission,j.Gender, j.Wage, u.Name WageUnit, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, f.DateCreated, Reptile, IgnoreTimeSheet, Sticky
			from InternJob j
			join UserFavoriteJob f on f.JobId = j.JobId and f.JobTypeId = 3
			left join Company co on co.CompanyId = j.CompanyId
			left join WageUnit u on u.UnitId = j.WageUnitId 
			join InternJobCategory c on c.CategoryId = j.CategoryId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId and pr.RootRegionId = r.RootRegionId and pr.Indentation = 2
			where j.StatusId = 2 and f.UserId = @UserId and j.DateDeleted is null and j.[Disabled] = 0 
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, c.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, t.Name Term, j.IncludeDinner, j.IncludeRoom,j.IncludeCommission, j.Gender, j.Wage, u.Name WageUnit, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, f.DateCreated, Reptile, IgnoreTimeSheet, Sticky
			from ServiceJob j 
			join UserFavoriteJob f on f.JobId = j.JobId and f.JobTypeId = 4
			left join Company co on co.CompanyId = j.CompanyId
			left join WageUnit u on u.UnitId = j.WageUnitId 
			join ServiceJobPosition c on c.PositionId = j.PositionId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId and pr.RootRegionId = r.RootRegionId and pr.Indentation = 2
			left join Term t on t.TermId = j.TermId
			where j.StatusId = 2 and f.UserId = @UserId and j.DateDeleted is null and j.[Disabled] = 0 
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, p.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, t.Name Term, j.IncludeDinner, j.IncludeRoom,j.IncludeCommission, j.Gender, j.Wage, u.Name WageUnit, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, f.DateCreated, Reptile, IgnoreTimeSheet, Sticky
			from TutorJob j 
			join UserFavoriteJob f on f.JobId = j.JobId and f.JobTypeId = 5
			left join Company co on co.CompanyId = j.CompanyId
			left join WageUnit u on u.UnitId = j.WageUnitId 
			join TutorJobPaper p on p.PaperId = j.PaperId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId and pr.RootRegionId = r.RootRegionId and pr.Indentation = 2
			left join Term t on t.TermId = j.TermId
			where j.StatusId = 2 and f.UserId = @UserId and j.DateDeleted is null and j.[Disabled] = 0 
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
		) sub
	order by DateCreated desc
end	



GO
/****** Object:  StoredProcedure [dbo].[api_get_message_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_message_list]
	@MessageId bigint,
	@UserId		bigint,
	@CompanyId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	update [User] set NotificationCount = 0 where UserId = @UserId
	update Company set NotificationCount = 0 where CompanyId = @CompanyId

	declare @table table(MessageId bigint, MessageType nvarchar(50), MessageTypeId int, Message nvarchar(max), MessageTitle nvarchar(255), SendingId bigint,
		TargetId bigint, JobId bigint, JobTypeId int, VoiceAlert bit, Vibrate bit, DateCreated nvarchar(50), [Read] bit)

	insert into @table(MessageId, MessageTypeId, MessageType, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, VoiceAlert, Vibrate, DateCreated, [Read])
	select m.MessageId, m.MessageTypeId, t.Name MessageType, m.Message, j.Title, m.SendingId, m.TargetId, m.JobId, m.JobTypeId, c.VoiceAlert, c.Vibrate, convert(nvarchar,m.DateCreated,120), m.[Read]
	from Message m
	join Company c on c.CompanyId = m.TargetId
	join ActivityJob j on j.JobId = m.JobId and m.JobTypeId = 1
	join MessageType t on t.MessageTypeId = m.MessageTypeId
	where MessageId > @MessageId and m.MessageTypeId in(3,5,7,8) and c.CompanyId = @CompanyId and m.DateDeleted is null

	insert into @table(MessageId, MessageTypeId, MessageType, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, VoiceAlert, Vibrate, DateCreated, [Read])
	select m.MessageId, m.MessageTypeId, t.Name MessageType, m.Message, j.Title, m.SendingId, m.TargetId, m.JobId, m.JobTypeId, c.VoiceAlert, c.Vibrate, convert(nvarchar,m.DateCreated,120), m.[Read]
	from Message m
	join Company c on c.CompanyId = m.TargetId
	join CampusJob j on j.JobId = m.JobId and m.JobTypeId = 2
	join MessageType t on t.MessageTypeId = m.MessageTypeId
	where MessageId > @MessageId and m.MessageTypeId in(3,5,7,8) and c.CompanyId = @CompanyId and m.DateDeleted is null

	insert into @table(MessageId, MessageTypeId, MessageType, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, VoiceAlert, Vibrate, DateCreated, [Read])
	select m.MessageId, m.MessageTypeId, t.Name MessageType, m.Message, j.Title, m.SendingId, m.TargetId, m.JobId, m.JobTypeId, c.VoiceAlert, c.Vibrate, convert(nvarchar,m.DateCreated,120), m.[Read]
	from Message m
	join Company c on c.CompanyId = m.TargetId
	join InternJob j on j.JobId = m.JobId and m.JobTypeId = 3
	join MessageType t on t.MessageTypeId = m.MessageTypeId
	where MessageId > @MessageId and m.MessageTypeId in(3,5,7,8) and c.CompanyId = @CompanyId and m.DateDeleted is null

	insert into @table(MessageId, MessageTypeId, MessageType, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, VoiceAlert, Vibrate, DateCreated, [Read])
	select m.MessageId, m.MessageTypeId, t.Name MessageType, m.Message, j.Title, m.SendingId, m.TargetId, m.JobId, m.JobTypeId, c.VoiceAlert, c.Vibrate, convert(nvarchar,m.DateCreated,120), m.[Read]
	from Message m
	join Company c on c.CompanyId = m.TargetId
	join ServiceJob j on j.JobId = m.JobId and m.JobTypeId = 4
	join MessageType t on t.MessageTypeId = m.MessageTypeId
	where MessageId > @MessageId and m.MessageTypeId in(3,5,7,8) and c.CompanyId = @CompanyId and m.DateDeleted is null

	insert into @table(MessageId, MessageTypeId, MessageType, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, VoiceAlert, Vibrate, DateCreated, [Read])
	select m.MessageId, m.MessageTypeId, t.Name MessageType, m.Message, j.Title, m.SendingId, m.TargetId, m.JobId, m.JobTypeId, c.VoiceAlert, c.Vibrate, convert(nvarchar,m.DateCreated,120), m.[Read]
	from Message m
	join Company c on c.CompanyId = m.TargetId
	join TutorJob j on j.JobId = m.JobId and m.JobTypeId = 5
	join MessageType t on t.MessageTypeId = m.MessageTypeId
	where MessageId > @MessageId and m.MessageTypeId in(3,5,7,8) and c.CompanyId = @CompanyId and m.DateDeleted is null

	insert into @table(MessageId, MessageTypeId, MessageType, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, VoiceAlert, Vibrate, DateCreated, [Read])
	select m.MessageId, m.MessageTypeId, t.Name MessageType, m.Message, j.Title, m.SendingId, m.TargetId, m.JobId, m.JobTypeId, u.VoiceAlert, u.Vibrate, convert(nvarchar,m.DateCreated,120), m.[Read]
	from Message m
	join [User] u on u.UserId = m.TargetId
	join ActivityJob j on j.JobId = m.JobId and m.JobTypeId = 1
	join MessageType t on t.MessageTypeId = m.MessageTypeId
	where MessageId > @MessageId and m.MessageTypeId in(4,6) and u.UserId = @UserId and m.DateDeleted is null

	insert into @table(MessageId, MessageTypeId, MessageType, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, VoiceAlert, Vibrate, DateCreated, [Read])
	select m.MessageId, m.MessageTypeId, t.Name MessageType, m.Message, j.Title, m.SendingId, m.TargetId, m.JobId, m.JobTypeId, u.VoiceAlert, u.Vibrate, convert(nvarchar,m.DateCreated,120), m.[Read]
	from Message m
	join [User] u on u.UserId = m.TargetId
	join CampusJob j on j.JobId = m.JobId and m.JobTypeId = 2
	join MessageType t on t.MessageTypeId = m.MessageTypeId
	where MessageId > @MessageId and m.MessageTypeId in(4,6) and u.UserId = @UserId and m.DateDeleted is null

	insert into @table(MessageId, MessageTypeId, MessageType, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, VoiceAlert, Vibrate, DateCreated, [Read])
	select m.MessageId, m.MessageTypeId, t.Name MessageType, m.Message, j.Title, m.SendingId, m.TargetId, m.JobId, m.JobTypeId, u.VoiceAlert, u.Vibrate, convert(nvarchar,m.DateCreated,120), m.[Read]
	from Message m
	join [User] u on u.UserId = m.TargetId
	join InternJob j on j.JobId = m.JobId and m.JobTypeId = 3
	join MessageType t on t.MessageTypeId = m.MessageTypeId
	where MessageId > @MessageId and m.MessageTypeId in(4,6) and u.UserId = @UserId and m.DateDeleted is null

	insert into @table(MessageId, MessageTypeId, MessageType, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, VoiceAlert, Vibrate, DateCreated, [Read])
	select m.MessageId, m.MessageTypeId, t.Name MessageType, m.Message, j.Title, m.SendingId, m.TargetId, m.JobId, m.JobTypeId, u.VoiceAlert, u.Vibrate, convert(nvarchar,m.DateCreated,120), m.[Read]
	from Message m
	join [User] u on u.UserId = m.TargetId
	join ServiceJob j on j.JobId = m.JobId and m.JobTypeId = 4
	join MessageType t on t.MessageTypeId = m.MessageTypeId
	where MessageId > @MessageId and m.MessageTypeId in(4,6) and u.UserId = @UserId and m.DateDeleted is null

	insert into @table(MessageId, MessageTypeId, MessageType, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, VoiceAlert, Vibrate, DateCreated, [Read])
	select m.MessageId, m.MessageTypeId, t.Name MessageType, m.Message, j.Title, m.SendingId, m.TargetId, m.JobId, m.JobTypeId, u.VoiceAlert, u.Vibrate, convert(nvarchar,m.DateCreated,120), m.[Read]
	from Message m
	join [User] u on u.UserId = m.TargetId
	join TutorJob j on j.JobId = m.JobId and m.JobTypeId = 5
	join MessageType t on t.MessageTypeId = m.MessageTypeId
	where MessageId > @MessageId and m.MessageTypeId in(4,6) and u.UserId = @UserId and m.DateDeleted is null

	insert into @table(MessageId, MessageTypeId, MessageType, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, VoiceAlert, Vibrate, DateCreated, [Read])
	select m.MessageId, m.MessageTypeId, t.Name MessageType, m.Message, '系统消息', m.SendingId, m.TargetId, m.JobId, m.JobTypeId, u.VoiceAlert, u.Vibrate, convert(nvarchar,m.DateCreated,120), m.[Read]
	from Message m 
	join [User] u on u.UserId = m.TargetId 
	join MessageType t on t.MessageTypeId = m.MessageTypeId 
	where MessageId > @MessageId and m.MessageTypeId = 1 and u.UserId = @UserId and m.DateDeleted is null

	insert into @table(MessageId, MessageTypeId, MessageType, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, VoiceAlert, Vibrate, DateCreated, [Read])
	select m.MessageId, m.MessageTypeId, t.Name MessageType, m.Message, '资金到帐', m.SendingId, m.TargetId, m.JobId, m.JobTypeId, u.VoiceAlert, u.Vibrate, convert(nvarchar,m.DateCreated,120), m.[Read]
	from Message m 
	join [User] u on u.UserId = m.TargetId 
	join MessageType t on t.MessageTypeId = m.MessageTypeId 
	where MessageId > @MessageId and m.MessageTypeId = 2 and u.UserId = @UserId and m.DateDeleted is null

	select MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, VoiceAlert, Vibrate, DateCreated, [Read]
	from @table order by messageId
end



GO
/****** Object:  StoredProcedure [dbo].[api_get_order]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_order]
	@JobId bigint,
	@JobTypeId int,
	@CompanyId bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select JobId, JobTypeId, Title, left(convert(nvarchar,o.Date,120),10) Date, o.PeopleCount, isnull(o.UpdatedAmount,o.Amount) Amount, o.OrderNumber, o.OrderId,
		sum(isnull(o.UpdatedAmount,o.Amount)) over() TotalAmount,
		cast(case when DatePaid is not null then 1 else 0 end as bit) Paid,
		cast(case when DatePaymentConfirmed is not null then 1 else 0 end as bit) PaymentConfirmed
	from [Order] o
	where JobId = @JobId and JobTypeId = @JobTypeId and CompanyId = @CompanyId
	order by o.Date desc
end


GO
/****** Object:  StoredProcedure [dbo].[api_get_order_line]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_order_line]
	@JobId bigint,
	@JobTypeId int,
	@CompanyId bigint,
	@OrderId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select ol.OrderLineId, left(convert(nvarchar,o.Date,120),10) Date, u.UserId, 
		isnull(ol.UpdatedAmount,ol.Amount) Amount, isnull(u.FullName,'') FullName, u.Mobile, isnull(u.ProfilePhoto,'') ProfilePhoto,
		isnull(left(convert(nvarchar,ol.DateFrom,120),16),'') DateFrom,
		isnull(left(convert(nvarchar,ol.DateTo,120),16),'') DateTo,
		isnull(right(left(convert(nvarchar,ol.DateFrom,120),16),5),'') TimeFrom,
		isnull(right(left(convert(nvarchar,ol.DateTo,120),16),5),'') TimeTo,
		isnull(CAST(DATEDIFF(second, ol.DateFrom, ol.DateTo) / 60.0 as decimal(10,2)),0) WorkingMinutes,
		sum(isnull(ol.UpdatedAmount,ol.Amount)) over() TotalAmount,
		cast(case when DatePaid is not null then 1 else 0 end as bit) Paid,
		cast(case when DatePaymentConfirmed is not null then 1 else 0 end as bit) PaymentConfirmed,
		count(0) over() PeopleCount
	from [Order] o 
	join OrderLine ol on ol.OrderId = o.OrderId
	join [User] u on u.userid = ol.Userid
	where o.JobId = @JobId and o.JobTypeId = @JobTypeId and o.CompanyId = @CompanyId
		and (o.OrderId = @OrderId or @OrderId is null)
end


GO
/****** Object:  StoredProcedure [dbo].[api_get_papers_by_level]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_papers_by_level]
as
begin set transaction isolation level read uncommitted	set nocount on
	select PaperId, Name
	from TutorJobPaper
end


GO
/****** Object:  StoredProcedure [dbo].[api_get_root_regions]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_root_regions]
as
begin set transaction isolation level read uncommitted	set nocount on
	select r.RegionId, r.Name, isnull(p.ProvinceId,0) ProvinceId, isnull(p.Name,'直辖市') Province, isnull(p.Sequence,0) ProvinceSequence, r.Sequence CitySequence
	from Region r
	left join Province p on p.ProvinceId = r.ProvinceId
	where r.Indentation = 1
	order by p.Sequence, r.Sequence
end


GO
/****** Object:  StoredProcedure [dbo].[api_get_school]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_school]
	@RegionId int
as
begin set transaction isolation level read uncommitted	set nocount on
	select SchoolId, s.Name, r.Name RegionName
	from School s
	join Region r on r.RegionId = s.RegionId
	where r.RegionId = @RegionId or @RegionId is null
	union all
	select SchoolId, Name, ''
	from School 
	where RegionId = -1
end


GO
/****** Object:  StoredProcedure [dbo].[api_get_search_filter_by_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_search_filter_by_user]
	@UserId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @table table(Gender int, RegionIds nvarchar(max), CityId int, ActivityJobPositions nvarchar(max), CampusJobCategories nvarchar(max), InternJobCategories nvarchar(max), 
		ServiceJobPositions nvarchar(max), TutorJobPapers nvarchar(max), MonMorning bit, MonAfternoon bit, MonNight bit, TueMorning bit, TueAfternoon bit, TueNight bit, 
		WedMorning bit, WedAfternoon bit, WedNight bit, ThuMorning bit, ThuAfternoon bit, ThuNight bit, FriMorning bit, FriAfternoon bit, FriNight bit, SatMorning bit, 
		SatAfternoon bit, SatNight bit, SunMorning bit, SunAfternoon bit, SunNight bit, Regions nvarchar(max), Categories nvarchar(max))
	
	if exists(select 1 from FilterGender where UserId = @UserId)
	begin
		insert into @table(Gender) select Gender from FilterGender where UserId = @UserId
		
		DECLARE @RegionIds nvarchar(MAX), @Regions nvarchar(MAX)
		SELECT @RegionIds = COALESCE(@RegionIds+',' ,'') + convert(nvarchar,f.RegionId,50), @Regions = COALESCE(@Regions+',' ,'') + r.name FROM FilterRegion f join Region r on r.regionid = f.regionid where UserId = @UserId
		update @table set RegionIds = @RegionIds, Regions = @Regions

		update @table set CityId = (select ParentRegionId from Region where regionid = (select top 1 RegionId from FilterRegion where UserId = @UserId))

		DECLARE @ActivityJobPositions nvarchar(MAX), @Categories nvarchar(MAX)
		SELECT @ActivityJobPositions = COALESCE(@ActivityJobPositions+',' ,'') + convert(nvarchar,f.PositionId,50), @Categories = COALESCE(@Categories+',' ,'') + p.name FROM FilterActivityJob f join ActivityJobPosition p on p.positionid = f.positionid where UserId = @UserId
		update @table set ActivityJobPositions = @ActivityJobPositions

		DECLARE @CampusJobCategories nvarchar(MAX)
		SELECT @CampusJobCategories = COALESCE(@CampusJobCategories+',' ,'') + convert(nvarchar,f.CategoryId,50), @Categories = COALESCE(@Categories+',' ,'') + p.name  FROM FilterCampusJob f join CampusJobCategory p on p.categoryid = f.categoryid where UserId = @UserId
		update @table set CampusJobCategories = @CampusJobCategories

		DECLARE @InternJobCategories nvarchar(MAX)
		SELECT @InternJobCategories = COALESCE(@InternJobCategories+',' ,'') + convert(nvarchar,f.CategoryId,50), @Categories = COALESCE(@Categories+',' ,'') + p.name  FROM FilterInternJob f join InternJobCategory p on p.categoryid = f.categoryid  where UserId = @UserId
		update @table set InternJobCategories = @InternJobCategories

		DECLARE @ServiceJobPositions nvarchar(MAX)
		SELECT @ServiceJobPositions = COALESCE(@ServiceJobPositions+',' ,'') + convert(nvarchar,f.PositionId,50), @Categories = COALESCE(@Categories+',' ,'') + p.name  FROM FilterServiceJob f join ServiceJobPosition p on p.positionid = f.positionid  where UserId = @UserId
		update @table set ServiceJobPositions = @ServiceJobPositions

		DECLARE @TutorJobPapers nvarchar(MAX)
		SELECT @TutorJobPapers = COALESCE(@TutorJobPapers+',' ,'') + convert(nvarchar,f.PaperId,50), @Categories = COALESCE(@Categories+',' ,'') + p.name  FROM FilterTutorJob f join TutorJobPaper p on p.paperid = f.paperid  where UserId = @UserId
		update @table set TutorJobPapers = @TutorJobPapers
		update @table set Categories = @Categories

		update t
		set t.MonMorning = w.MonMorning,
			t.MonAfternoon = w.MonAfternoon,
			t.MonNight = w.MonNight,
			t.TueMorning = w.TueMorning,
			t.TueAfternoon = w.TueAfternoon,
			t.TueNight = w.TueNight,
			t.WedMorning = w.WedMorning,
			t.WedAfternoon = w.WedAfternoon,
			t.WedNight = w.WedNight,
			t.ThuMorning = w.ThuMorning,
			t.ThuAfternoon = w.ThuAfternoon,
			t.ThuNight= w.ThuNight,
			t.FriMorning = w.FriMorning,
			t.FriAfternoon = w.FriAfternoon,
			t.FriNight = w.FriNight,
			t.SatMorning = w.SatMorning,
			t.SatAfternoon = w.SatAfternoon,
			t.SatNight = w.SatNight,
			t.SunMorning = w.SunMorning,
			t.SunAfternoon = w.SunAfternoon,
			t.SunNight = w.SunNight
		from @table t
		join FilterWorkTime w on w.UserId = @UserId

	end

	select Gender, isnull(RegionIds,'') RegionIds, isnull(CityId,0) CityId, isnull(ActivityJobPositions,'') ActivityJobPositions, isnull(CampusJobCategories,'') CampusJobCategories, 
		isnull(InternJobCategories,'') InternJobCategories, isnull(ServiceJobPositions,'') ServiceJobPositions, isnull(TutorJobPapers,'') TutorJobPapers,  
		isnull(MonMorning,0) MonMorning, isnull(MonAfternoon,0) MonAfternoon, isnull(MonNight,0) MonNight, isnull(TueMorning,0) TueMorning, isnull(TueAfternoon,0) TueAfternoon,
		isnull(TueNight,0) TueNight, isnull(WedMorning,0) WedMorning, isnull(WedAfternoon,0) WedAfternoon, isnull(WedNight,0) WedNight, isnull(ThuMorning,0) ThuMorning,
		isnull(ThuAfternoon,0) ThuAfternoon, isnull(ThuNight,0) ThuNight, isnull(FriMorning,0) FriMorning, isnull(FriAfternoon,0) FriAfternoon, isnull(FriNight,0) FriNight,
		isnull(SatMorning,0) SatMorning, isnull(SatAfternoon,0) SatAfternoon, isnull(SatNight,0) SatNight, isnull(SunMorning,0) SunMorning, isnull(SunAfternoon,0) SunAfternoon,
		isnull(SunNight,0) SunNight, isnull(Regions,'') Regions, isnull(Categories,'') Categories
	from @table
end


GO
/****** Object:  StoredProcedure [dbo].[api_get_service_job_detail]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_service_job_detail]
	@JobId		bigint,
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select j.JobId, j.Title, c.Name CategoryName, p.Name PositionName, isnull(t.Name,'') Term, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission,
		case when j.Gender = 1 then '男' when j.Gender = 0 then '女' else '' end Gender, 
		isnull(j.Wage,0) Wage, Isnull(u.Name,'') WageUnit,  r.Name Region, isnull(applies.Applies,0) Applies, isnull(j.PeopleRequired,0) PeopleRequired, 
		isnull(j.Description,'') Description, isnull(j.Address,'') Address, isnull(j.Contact,'') Contact, isnull(j.ContactPhone,'') ContactPhone, 
		isnull(right(CONVERT(nchar(10), j.DateFrom,126),5),'') DateFrom,  isnull(right(CONVERT(nchar(10), j.DateExpiry,126),5),'') DateExpire,
		isnull(right(CONVERT(nchar(10), j.WorkFrom,126),5),'') WorkFrom, isnull(right(CONVERT(nchar(10), j.WorkEnd,126),5),'') WorkEnd,
		isnull(j.FakeViewTimes,0) ViewTimes,
		isnull(isnull(co.FullName,j.CompanyName),'') FullName, isnull(co.Verified,0) Verified, j.Deposit, Reptile, IgnoreTimeSheet, Sticky,ISNULL(j.SourceWebSite,'') SourceWebSite,
		cast(case when exists(select 1 from UserFavoriteJob where UserId = @UserId and JobId = @JobId and JobTypeId = 4) then 1 else 0 end as bit) Favorite,
		MonMorning, MonAfternoon, MonNight,
		TueMorning, TueAfternoon, TueNight,
		WedMorning, WedAfternoon, WedNight,
		ThuMorning, ThuAfternoon, ThuNight,
		FriMorning, FriAfternoon, FriNight,
		SatMorning, SatAfternoon, SatNight,
		SunMorning, SunAfternoon, SunNight
	from ServiceJob j
		left join WageUnit u on u.UnitId = j.WageUnitId 
		join ServiceJobCategory c on c.CategoryId = j.CategoryId
		join ServiceJobPosition p on p.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId 
		left join Term t on t.TermId = j.TermId
		left join Company co on co.CompanyId = j.CompanyId
		outer apply(
			select COUNT(0) Applies
			from ServiceJobApply a 
			where a.JobId = j.JobId and a.StatusId = 2
		) applies
	where j.JobId = @JobId

	update ServiceJob
	set ViewTimes = ISNULL(ViewTimes,0) + 1, FakeViewTimes = FakeViewTimes + 1
	where JobId = @JobId
end

GO
/****** Object:  StoredProcedure [dbo].[api_get_tutor_job_detail]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_tutor_job_detail]
	@JobId		bigint,
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select j.JobId, j.Title, l.Name LevelName, p.Name PaperName, isnull(t.Name,'') Term, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission,
		case when j.Gender = 1 then '男' when j.Gender = 0 then '女' else '' end Gender, 
		isnull(j.Wage,0) Wage, Isnull(u.Name,'') WageUnit,  r.Name Region, isnull(applies.Applies,0) Applies, isnull(j.PeopleRequired,0) PeopleRequired, 
		isnull(j.Description,'') Description, isnull(j.Address,'') Address, isnull(j.Contact,'') Contact, isnull(j.ContactPhone,'') ContactPhone, 
		isnull(right(CONVERT(nchar(10), j.DateFrom,126),5),'') DateFrom,  isnull(right(CONVERT(nchar(10), j.DateExpiry,126),5),'') DateExpire,
		isnull(right(CONVERT(nchar(10), j.WorkFrom,126),5),'') WorkFrom, isnull(right(CONVERT(nchar(10), j.WorkEnd,126),5),'') WorkEnd,
		isnull(j.FakeViewTimes,0) ViewTimes,
		isnull(isnull(co.FullName,j.CompanyName),'') FullName, isnull(co.Verified,0) Verified, j.Deposit, Reptile, IgnoreTimeSheet, Sticky,ISNULL(j.SourceWebSite,'') SourceWebSite,
		cast(case when exists(select 1 from UserFavoriteJob where UserId = @UserId and JobId = @JobId and JobTypeId = 5) then 1 else 0 end as bit) Favorite,
		MonMorning, MonAfternoon, MonNight,
		TueMorning, TueAfternoon, TueNight,
		WedMorning, WedAfternoon, WedNight,
		ThuMorning, ThuAfternoon, ThuNight,
		FriMorning, FriAfternoon, FriNight,
		SatMorning, SatAfternoon, SatNight,
		SunMorning, SunAfternoon, SunNight
	from TutorJob j
		left join WageUnit u on u.UnitId = j.WageUnitId 
		join TutorJobLevel l on l.LevelId = j.LevelId
		join TutorJobPaper p on p.PaperId = j.PaperId
		join Region r on r.RegionId = j.RegionId 
		left join Term t on t.TermId = j.TermId
		left join Company co on co.CompanyId = j.CompanyId
		outer apply(
			select COUNT(0) Applies
			from TutorJobApply a 
			where a.JobId = j.JobId and a.StatusId = 2
		) applies
	where j.JobId = @JobId

	update TutorJob
	set ViewTimes = ISNULL(ViewTimes,0) + 1, FakeViewTimes = FakeViewTimes + 1
	where JobId = @JobId
end

GO
/****** Object:  StoredProcedure [dbo].[api_get_user_bank_account_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_user_bank_account_list]
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select 
	    a.AccountId, a.BankId, b.Name BankName, a.AccountName, 
		case when a.BankId = 19 then a.AccountNo else isnull(left(a.AccountNo,4)+'******' + Right(a.AccountNo,4),'') end AccountNo, 
		cast(0 as bit) [Default]
	from UserAccount a
	join Bank b on b.BankId = a.BankId
	where UserId = @UserId and DateDeleted is null
	order by a.[Default] desc
end


GO
/****** Object:  StoredProcedure [dbo].[api_get_user_info]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_user_info]
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select u.UserId, Mobile, s.SchoolId, s.Name SchoolName, FullName, isnull(left(CONVERT(nvarchar, DateofBirth,126),10),'') DateofBirth, case when Gender = 0 then '女' when Gender =1 then '男' else '' end Gender,
		Tall, u.RegionId, isnull(pr.Name + ' ','') + r.Name as RegionName, ProfilePhoto, QQ, Email, Major, isnull(WorkExperience,'') WorkExperience, 
		Balance + FrozenBalance Balance, isnull(ub.BankId,0) BankId, isnull(b.Name,'') BankName, isnull(ub.AccountName,'') AccountName,  u.VoiceAlert, u.Vibrate,
		isnull(left(ub.AccountNo,4)+'******' + Right(ub.AccountNo,4),'') AccountNo, isnull(DATEDIFF(hour,u.DateofBirth,GETDATE())/8766,0) AS Age
	from [User] u
	join School s on s.SchoolId = u.SchoolId
	left join Region r on r.RegionId = u.RegionId
	left join UserAccount ub on ub.UserId = u.UserId and ub.[Default] = 1 and ub.DateDeleted is null
	left join Bank b on b.BankId = ub.BankId
	left join Region pr on pr.RegionId = r.ParentRegionId and pr.Indentation = 2
	where u.UserId =  @UserId
end


GO
/****** Object:  StoredProcedure [dbo].[api_get_user_job_applied]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_user_job_applied]
	@UserId		bigint,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize
	if @PageSize > 2 and @PageIndex =1 begin
		select @row_from = 3
	end
	select CompanyName, total as TotalJobsApplied, JobId, JobType, isnull(left(CONVERT(nvarchar, DateHired,126),10),'') DateHired, Title, CategoryName, Term, IncludeDinner, IncludeRoom, case when Gender = 1 then '男' when Gender = 0 then '女' else '' end Gender, Wage, WageUnit, Region
	from(
		select *, row_number() over (order by DateModified desc) as [row], count(0) over() as total
		from 
		(
			select co.FullName as CompanyName, j.JobId, j.JobTypeId, tp.Name JobType, a.DateHired, j.Title, p.Name CategoryName, t.Name Term, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, r.Name Region, a.DateModified
			from ActivityJobApply a
			join ActivityJob j on j.JobId = a.JobId 
			join WageUnit u on u.UnitId = j.WageUnitId 
			join ActivityJobPosition p on p.PositionId = j.PositionId
			join Region r on r.RegionId = j.RegionId 
			join JobType tp on tp.TypeId = j.JobTypeId
			left join Region pr on pr.RegionId = r.ParentRegionId
			join Term t on t.TermId = j.TermId
			join Company co on co.CompanyId = j.CompanyId
			where a.UserId = @UserId and a.StatusId = 2 
			union all
			select co.FullName as CompanyName, j.JobId, j.JobTypeId, tp.Name JobType, a.DateHired, j.Title, c.Name CategoryName, '' Term, cast(0 as bit), cast(0 as bit), j.Gender, 0, '', r.Name Region, a.DateModified
			from CampusJobApply a
			join CampusJob j on j.JobId = a.JobId 
			join CampusJobCategory c on c.CategoryId = j.CategoryId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			join Company co on co.CompanyId = j.CompanyId
			left join Region pr on pr.RegionId = r.ParentRegionId
			where a.UserId = @UserId and a.StatusId = 2
			union all
			select co.FullName as CompanyName, j.JobId, j.JobTypeId, tp.Name JobType, a.DateHired, j.Title, c.Name CategoryName, '' Term, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, r.Name Region, a.DateModified
			from InternJobApply a
			join InternJob j on j.JobId = a.JobId 
			join WageUnit u on u.UnitId = j.WageUnitId 
			join InternJobCategory c on c.CategoryId = j.CategoryId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			join Company co on co.CompanyId = j.CompanyId
			left join Region pr on pr.RegionId = r.ParentRegionId
			where a.UserId = @UserId and a.StatusId = 2
			union all
			select co.FullName as CompanyName, j.JobId, j.JobTypeId, tp.Name JobType, a.DateHired, j.Title, c.Name CategoryName, t.Name Term, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, r.Name Region, a.DateModified
			from ServiceJobApply a
			join ServiceJob j on j.JobId = a.JobId 
			join WageUnit u on u.UnitId = j.WageUnitId 
			join ServiceJobPosition c on c.PositionId = j.PositionId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Company co on co.CompanyId = j.CompanyId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			join Term t on t.TermId = j.TermId
			where a.UserId = @UserId and a.StatusId = 2
			union all
			select co.FullName as CompanyName, j.JobId, j.JobTypeId, tp.Name JobType, a.DateHired, j.Title, p.Name CategoryName, t.Name Term, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, r.Name Region, a.DateModified
			from TutorJobApply a
			join TutorJob j on j.JobId = a.JobId 
			join WageUnit u on u.UnitId = j.WageUnitId 
			join TutorJobPaper p on p.PaperId = j.PaperId
			join Company co on co.CompanyId = j.CompanyId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			join Term t on t.TermId = j.TermId
			where a.UserId = @UserId and a.StatusId = 2
		) all_sub
	) sub
	where sub.row between @row_from and @row_to
	order by [row]
end	


GO
/****** Object:  StoredProcedure [dbo].[api_get_user_job_apply]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_get_user_job_apply]
	@UserId		bigint,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	set @PageSize =  9999
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select JobId, JobTypeId, Title, Verified, ViewTimes, Deposit, CategoryName, isnull(CompanyName,'') CompanyName, isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, Term, IncludeDinner, IncludeRoom, IncludeCommission, case when Gender = 1 then '男' when Gender = 0 then '女' else '' end Gender, Wage, WageUnit, Region, Status, StatusId
	from(
		select *, row_number() over (order by case when StatusId =2 then 1 when StatusId = 1 then 2 when StatusId = 4 then 3 when StatusId = 3 then 4 end, DateCreated desc) as [row]
		from 
		(
			select j.JobId, j.JobTypeId, j.Title, co.Verified, j.ViewTimes, co.FullName CompanyName, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, p.Name CategoryName, t.Name Term, j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, r.Name Region, a.DateCreated, s.Name Status, s.StatusId
			from ActivityJobApply a
			join ActivityJob j on j.JobId = a.JobId 
			join Company co on co.CompanyId = j.CompanyId
			join WageUnit u on u.UnitId = j.WageUnitId 
			join ActivityJobPosition p on p.PositionId = j.PositionId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			join Term t on t.TermId = j.TermId
			join ApplyStatus s on s.StatusId = a.StatusId
			where a.UserId = @UserId and a.DateDeleted is null and j.StatusId = 2 and a.StatusId <> 3
			union all
			select j.JobId, j.JobTypeId,  j.Title, co.Verified, j.ViewTimes, co.FullName CompanyName, j.DatePublished, cast(0 as bit) Deposit, c.Name CategoryName, '' Term, cast(0 as bit), cast(0 as bit), cast(0 as bit), j.Gender, 0, '', r.Name Region, a.DateCreated, s.Name Status, s.StatusId
			from CampusJobApply a
			join CampusJob j on j.JobId = a.JobId 
			join Company co on co.CompanyId = j.CompanyId
			join CampusJobCategory c on c.CategoryId = j.CategoryId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			join ApplyStatus s on s.StatusId = a.StatusId
			where a.UserId = @UserId and a.DateDeleted is null and j.StatusId = 2 and a.StatusId <> 3
			union all
			select j.JobId, j.JobTypeId,  j.Title, co.Verified, j.ViewTimes,co.FullName CompanyName,  j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,c.Name CategoryName, '' Term, j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, r.Name Region, a.DateCreated, s.Name Status, s.StatusId
			from InternJobApply a
			join InternJob j on j.JobId = a.JobId 
			join Company co on co.CompanyId = j.CompanyId
			join WageUnit u on u.UnitId = j.WageUnitId 
			join InternJobCategory c on c.CategoryId = j.CategoryId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			join ApplyStatus s on s.StatusId = a.StatusId
			where a.UserId = @UserId and a.DateDeleted is null and j.StatusId = 2 and a.StatusId <> 3 
			union all
			select j.JobId, j.JobTypeId, j.Title, co.Verified, j.ViewTimes, co.FullName CompanyName, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,c.Name CategoryName, t.Name Term, j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, r.Name Region, a.DateCreated, s.Name Status, s.StatusId
			from ServiceJobApply a
			join ServiceJob j on j.JobId = a.JobId 
			join Company co on co.CompanyId = j.CompanyId
			join WageUnit u on u.UnitId = j.WageUnitId 
			join ServiceJobPosition c on c.PositionId = j.PositionId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			join Term t on t.TermId = j.TermId
			join ApplyStatus s on s.StatusId = a.StatusId
			where a.UserId = @UserId and a.DateDeleted is null and j.StatusId = 2 and a.StatusId <> 3 
			union all
			select j.JobId, j.JobTypeId,  j.Title, co.Verified, j.ViewTimes, co.FullName CompanyName, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,p.Name CategoryName, t.Name Term, j.IncludeCommission,j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, r.Name Region, a.DateCreated, s.Name Status, s.StatusId
			from TutorJobApply a
			join TutorJob j on j.JobId = a.JobId 
			join Company co on co.CompanyId = j.CompanyId
			join WageUnit u on u.UnitId = j.WageUnitId 
			join TutorJobPaper p on p.PaperId = j.PaperId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			join Term t on t.TermId = j.TermId
			join ApplyStatus s on s.StatusId = a.StatusId
			where a.UserId = @UserId and a.DateDeleted is null and j.StatusId = 2 and a.StatusId <> 3 
		) all_sub
	) sub
	where sub.row between @row_from and @row_to
	order by [row]
end	


GO
/****** Object:  StoredProcedure [dbo].[api_job_company_hire]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_job_company_hire]
	@CompanyId		bigint,
	@JobId			bigint,
	@UserId			bigint,
	@JobTypeId		int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Applies int = 0, @PeopleRequired int = 0, @Message nvarchar(50) = '', @JobTitle nvarchar(255), @MessageId bigint, @Device nvarchar(50), @DeviceToken nvarchar(255)
	declare @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @IsLogin bit, @BaiduUserId nvarchar(50)
	select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId , @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin from [User] where UserId = @UserId
	
	if @JobTypeId = 1
	begin
		update a
		set a.StatusId = 2, DateHired = GETDATE(), @JobTitle = j.Title
		from ActivityJobApply a
		join ActivityJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 已录用', 4, 0)
		set @MessageId = SCOPE_IDENTITY()

		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '已录用', 4, '[申请] 已录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end

	else if @JobTypeId = 2
	begin
		update a
		set a.StatusId = 2, DateHired = GETDATE(), @JobTitle = j.Title
		from CampusJobApply a
		join CampusJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 已录用', 4, 0)
		set @MessageId = SCOPE_IDENTITY()
		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '已录用', 4, '[申请] 已录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end


	else if @JobTypeId = 3
	begin
		update a
		set a.StatusId = 2, DateHired = GETDATE(), @JobTitle = j.Title
		from InternJobApply a
		join InternJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 已录用', 4, 0)
		set @MessageId = SCOPE_IDENTITY()
		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '已录用', 4, '[申请] 已录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end


	else if @JobTypeId = 4
	begin
		update a
		set a.StatusId = 2, DateHired = GETDATE(), @JobTitle = j.Title
		from ServiceJobApply a
		join ServiceJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 已录用', 4, 0)
		set @MessageId = SCOPE_IDENTITY()
		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '已录用', 4, '[申请] 已录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end


	else if @JobTypeId = 5
	begin
		update a
		set a.StatusId = 2, DateHired = GETDATE(), @JobTitle = j.Title
		from TutorJobApply a
		join TutorJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 已录用', 4, 0)
		set @MessageId = SCOPE_IDENTITY()
		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '已录用', 4, '[申请] 已录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end

	select @Message Message
end

GO
/****** Object:  StoredProcedure [dbo].[api_job_company_reject]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_job_company_reject]
	@CompanyId		bigint,
	@JobId			bigint,
	@UserId			bigint,
	@JobTypeId		int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @JobTitle nvarchar(255), @MessageId bigint, @Device nvarchar(50), @DeviceToken nvarchar(255)
	declare @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @IsLogin bit, @BaiduUserId nvarchar(50)
	select @Device = Device, @DeviceToken = DeviceToken,  @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin from [User] where UserId = @UserId
	if @JobTypeId = 1
	begin
		update a
		set a.StatusId = 4, @JobTitle = j.Title
		from ActivityJobApply a
		join ActivityJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 未被录用', 6, 0)
		set @MessageId = SCOPE_IDENTITY()

		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '退回申请', 6, '[申请] 未被录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end

	else if @JobTypeId = 2
	begin
		update a
		set a.StatusId = 4, @JobTitle = j.Title
		from CampusJobApply a
		join CampusJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 未被录用', 6, 0)
		set @MessageId = SCOPE_IDENTITY()
		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '退回申请', 6, '[申请] 未被录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end


	else if @JobTypeId = 3
	begin
		update a
		set a.StatusId = 4, @JobTitle = j.Title
		from InternJobApply a
		join InternJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 未被录用', 6, 0)
		set @MessageId = SCOPE_IDENTITY()
		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '退回申请', 6, '[申请] 未被录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end


	else if @JobTypeId = 4
	begin
		update a
		set a.StatusId = 4, @JobTitle = j.Title
		from ServiceJobApply a
		join ServiceJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 未被录用', 6, 0)
		set @MessageId = SCOPE_IDENTITY()
		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '退回申请', 6, '[申请] 未被录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end


	else if @JobTypeId = 5
	begin
		update a
		set a.StatusId = 4, @JobTitle = j.Title
		from TutorJobApply a
		join TutorJob j on j.JobId = a.JobId and j.CompanyId = @CompanyId
		where a.JobId = @JobId and a.UserId = @UserId

		insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
		values(@CompanyId, @UserId, @JobId, @JobTypeId, '[申请] 未被录用', 6, 0)
		set @MessageId = SCOPE_IDENTITY()
		if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
		begin
			update [User]
			set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
			where UserId = @UserId

			insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
			values(@MessageId, '退回申请', 6, '[申请] 未被录用', @JobTitle, @CompanyId, @UserId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
		end
	end

end

GO
/****** Object:  StoredProcedure [dbo].[api_job_search_activity]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_job_search_activity]
	@PositionId		nvarchar(255),
	@RegionId		int,
	@TermId			int,
	@Gender			int,
	@MonMorning		bit,
	@MonAfternoon	bit,
	@MonNight		bit,
	@TueMorning		bit,
	@TueAfternoon	bit,
	@TueNight		bit,
	@WedMorning		bit,
	@WedAfternoon	bit,
	@WedNight		bit,
	@ThuMorning		bit,
	@ThuAfternoon	bit,
	@ThuNight		bit,
	@FriMorning		bit,
	@FriAfternoon	bit,
	@FriNight		bit,
	@SatMorning		bit,
	@SatAfternoon	bit,
	@SatNight		bit,
	@SunMorning		bit,
	@SunAfternoon	bit,
	@SunNight		bit,
	@OrderById		int,
	@PageIndex		int,
	@PageSize		int
as
begin set transaction isolation level read uncommitted	set nocount on
	if @PositionId = '0' set @PositionId = ''
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize
	set @OrderById = isnull(@OrderById,1)
	if @OrderById = 0 set @OrderById = 1
	select JobId, JobTypeId, JobType, Title, PositionName, CompanyName, Term, IncludeDinner, IncludeRoom, IncludeCommission, Gender, Wage, WageUnit, 
			Region, isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, ViewTimes, Verified, Deposit, Reptile, IgnoreTimeSheet, Sticky
	from
		(
		select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, p.Name PositionName, isnull(c.FullName,j.CompanyName) CompanyName, isnull(t.Name,'') Term, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission, j.Gender, isnull(j.Wage,'') Wage, isnull(u.Name,'') WageUnit, 
			sr.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(c.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, j.Reptile, IgnoreTimeSheet, Sticky,
			ROW_NUMBER() over(order by case j.Sticky when 1 then 1 else 2 end, case when @OrderById = 1 then j.DatePublished else u.UnitId end desc, case when @OrderById = 1 then 1 else j.Wage end desc) [row]
		from ActivityJob j
		join JobType tp on tp.TypeId = j.JobTypeId
		left join Company c on c.CompanyId = j.CompanyId
		join ActivityJobPosition p on p.PositionId = j.PositionId
		join Region sr on sr.RegionId = j.RegionId
		left join Region pr on pr.RegionId = sr.ParentRegionId and pr.RootRegionId = sr.RootRegionId and pr.Indentation = 2
		left join Term t on t.TermId = j.TermId
		left join WageUnit u on u.UnitId = j.WageUnitId
		where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0
			and (sr.RegionId = @RegionId or pr.RegionId = @RegionId or sr.RootRegionId = @RegionId or isnull(@RegionId,0) = 0)
			and (j.PositionId in(select cast(string as int) from dbo.fn_split_string_by(@PositionId,',')) or isnull(@PositionId,'') = '')
			and (j.TermId = @TermId or isnull(@TermId,0) = 0)
			and (j.Gender = @Gender or @Gender is null or j.Gender = 2)
			and (
					   ((j.MonMorning = @MonMorning or isnull(@MonMorning,0) = 0)
					and (j.MonAfternoon = @MonAfternoon or isnull(@MonAfternoon,0) = 0)
					and (j.MonNight = @MonNight or isnull(@MonNight,0) = 0)
					and (j.TueMorning = @TueMorning or isnull(@TueMorning,0) = 0)
					and (j.TueAfternoon = @TueAfternoon or isnull(@TueAfternoon,0) = 0)
					and (j.TueNight = @TueNight or isnull(@TueNight,0) = 0)
					and (j.WedMorning = @WedMorning or isnull(@WedMorning,0) = 0)
					and (j.WedAfternoon = @WedAfternoon or isnull(@WedAfternoon,0) = 0)
					and (j.WedNight = @WedNight or isnull(@WedNight,0) = 0)
					and (j.ThuMorning = @ThuMorning or isnull(@ThuMorning,0) = 0)
					and (j.ThuAfternoon = @ThuAfternoon or isnull(@ThuAfternoon,0) = 0)
					and (j.ThuNight = @ThuNight or isnull(@ThuNight,0) = 0)
					and (j.FriMorning = @FriMorning or isnull(@FriMorning,0) = 0)
					and (j.FriAfternoon = @FriAfternoon or isnull(@FriAfternoon,0) = 0)
					and (j.FriNight = @FriNight or isnull(@FriNight,0) = 0)
					and (j.SatMorning = @SatMorning or isnull(@SatMorning,0) = 0)
					and (j.SatAfternoon = @SatAfternoon or isnull(@SatAfternoon,0) = 0)
					and (j.SatNight = @SatNight or isnull(@SatNight,0) = 0)
					and (j.SunMorning = @SunMorning or isnull(@SunMorning,0) = 0)
					and (j.SunAfternoon = @SunAfternoon or isnull(@SunAfternoon,0) = 0)
					and (j.SunNight = @SunNight or isnull(@SunNight,0) = 0))
					or (j.IgnoreTimeSheet = 1)
				)
			and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
		) sub 
	where sub.row between @row_from and @row_to
	order by row
end



-- select * from jobstatus

GO
/****** Object:  StoredProcedure [dbo].[api_job_search_by_filter]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_job_search_by_filter]
	@UserId		bigint,
	@RegionId		int,
	@PageIndex		int,
	@PageSize		int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	declare @cat_filtered bit = 0
	if exists(select 1 from FilterActivityJob where userid = @UserId)
		or exists(select 1 from FilterInternJob where userid = @UserId)
		or exists(select 1 from FilterServiceJob where userid = @UserId)
		or exists(select 1 from FilterTutorJob where userid = @UserId)
	begin
		set @cat_filtered = 1
	end

	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize
	declare 
		@Gender			int,
		@MonMorning		bit,
		@MonAfternoon	bit,
		@MonNight		bit,
		@TueMorning		bit,
		@TueAfternoon	bit,
		@TueNight		bit,
		@WedMorning		bit,
		@WedAfternoon	bit,
		@WedNight		bit,
		@ThuMorning		bit,
		@ThuAfternoon	bit,
		@ThuNight		bit,
		@FriMorning		bit,
		@FriAfternoon	bit,
		@FriNight		bit,
		@SatMorning		bit,
		@SatAfternoon	bit,
		@SatNight		bit,
		@SunMorning		bit,
		@SunAfternoon	bit,
		@SunNight		bit
	select @Gender = Gender from FilterGender where userid = @userid
	select 
		@MonMorning = MonMorning, @MonAfternoon = MonAfternoon, @MonNight = MonNight, 
		@TueMorning = TueMorning, @TueAfternoon = TueAfternoon, @TueNight = TueNight,
		@WedMorning = WedMorning, @WedAfternoon = WedAfternoon, @WedNight = WedNight,
		@ThuMorning = ThuMorning, @ThuAfternoon = ThuAfternoon, @ThuNight = ThuNight,
		@FriMorning = FriMorning, @FriAfternoon = FriAfternoon, @FriNight = FriNight,
		@SatMorning = SatMorning, @SatAfternoon = SatAfternoon, @SatNight = SatNight,
		@SunMorning = SunMorning, @SunAfternoon = SunAfternoon, @SunNight = SunNight
	from FilterWorkTime where userid = @userid


	select JobId, JobType, JobTypeId, isnull(Title,'') Title, isnull(CategoryName,'') CategoryName, isnull(CompanyName,'') CompanyName, isnull(Term,'') Term, 
		isnull(IncludeDinner,0) IncludeDinner, isnull(IncludeRoom,0) IncludeRoom, isnull(IncludeCommission,0) IncludeCommission,
		case when Gender = 1 then '男' when Gender = 0 then '女' else '' end Gender, isnull(Wage,0) Wage, isnull(WageUnit,'') WageUnit, isnull(Region,'') Region,
		isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, isnull(ViewTimes,0) ViewTimes, Verified, isnull(Deposit,0) Deposit, Reptile, IgnoreTimeSheet, Sticky
	from(
		select *, row_number() over (order by case Sticky when 1 then 1 else 2 end, DatePublished desc) as [row]
		from 
		(
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, p.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, t.Name Term, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission,j.Gender, j.Wage, u.Name WageUnit, 
					r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from ActivityJob j
			join JobType tp on tp.TypeId = j.JobTypeId
			left join Company co on co.CompanyId = j.CompanyId
			join ActivityJobPosition p on p.PositionId = j.PositionId
			join Region r on r.RegionId = j.RegionId and r.ParentRegionId = @RegionId
			left join Term t on t.TermId = j.TermId
			left join WageUnit u on u.UnitId = j.WageUnitId
			where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0
				and (r.RegionId in (select regionId from FilterRegion where userid = @userid) or not exists(select 1 from FilterRegion where userid = @UserId))
				and (p.PositionId in (select PositionId from FilterActivityJob where userid = @userid) or @cat_filtered = 0)
				and (j.Gender = @Gender or j.Gender = 2)
				and (
					   ((j.MonMorning = @MonMorning or isnull(@MonMorning,0) = 0)
					and (j.MonAfternoon = @MonAfternoon or isnull(@MonAfternoon,0) = 0)
					and (j.MonNight = @MonNight or isnull(@MonNight,0) = 0)
					and (j.TueMorning = @TueMorning or isnull(@TueMorning,0) = 0)
					and (j.TueAfternoon = @TueAfternoon or isnull(@TueAfternoon,0) = 0)
					and (j.TueNight = @TueNight or isnull(@TueNight,0) = 0)
					and (j.WedMorning = @WedMorning or isnull(@WedMorning,0) = 0)
					and (j.WedAfternoon = @WedAfternoon or isnull(@WedAfternoon,0) = 0)
					and (j.WedNight = @WedNight or isnull(@WedNight,0) = 0)
					and (j.ThuMorning = @ThuMorning or isnull(@ThuMorning,0) = 0)
					and (j.ThuAfternoon = @ThuAfternoon or isnull(@ThuAfternoon,0) = 0)
					and (j.ThuNight = @ThuNight or isnull(@ThuNight,0) = 0)
					and (j.FriMorning = @FriMorning or isnull(@FriMorning,0) = 0)
					and (j.FriAfternoon = @FriAfternoon or isnull(@FriAfternoon,0) = 0)
					and (j.FriNight = @FriNight or isnull(@FriNight,0) = 0)
					and (j.SatMorning = @SatMorning or isnull(@SatMorning,0) = 0)
					and (j.SatAfternoon = @SatAfternoon or isnull(@SatAfternoon,0) = 0)
					and (j.SatNight = @SatNight or isnull(@SatNight,0) = 0)
					and (j.SunMorning = @SunMorning or isnull(@SunMorning,0) = 0)
					and (j.SunAfternoon = @SunAfternoon or isnull(@SunAfternoon,0) = 0)
					and (j.SunNight = @SunNight or isnull(@SunNight,0) = 0))
					or (j.IgnoreTimeSheet = 1)
				)
					and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
			union all
			/*
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, c.Name CategoryName, co.FullName CompanyName, null Term, null, null, null, j.Gender, null, null, 
					r.Name Region, j.DatePublished, j.ViewTimes, co.Verified, cast(0 as bit) Deposit, IgnoreTimeSheet
			from CampusJob j
			join JobType tp on tp.TypeId = j.JobTypeId
			join Company co on co.CompanyId = j.CompanyId
			join CampusJobCategory c on c.CategoryId = j.CategoryId
			join School s on s.SchoolId = j.SchoolId
			join Region r on r.RegionId = j.RegionId and r.ParentRegionId = @RegionId
			outer apply(
				select COUNT(0) Applies
				from CampusJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
			where j.StatusId = 2 
				and (r.RegionId in (select regionId from FilterRegion where userid = @userid) or not exists(select 1 from FilterRegion where userid = @UserId))
				and (c.CategoryId in (select CategoryId from FilterCampusJob where userid = @userid) or not exists(select 1 from FilterCampusJob where userid = @UserId))
				and (j.Gender = @Gender or j.Gender = 2)
				and (
					   ((j.MonMorning = @MonMorning or isnull(@MonMorning,0) = 0)
					and (j.MonAfternoon = @MonAfternoon or isnull(@MonAfternoon,0) = 0)
					and (j.MonNight = @MonNight or isnull(@MonNight,0) = 0)
					and (j.TueMorning = @TueMorning or isnull(@TueMorning,0) = 0)
					and (j.TueAfternoon = @TueAfternoon or isnull(@TueAfternoon,0) = 0)
					and (j.TueNight = @TueNight or isnull(@TueNight,0) = 0)
					and (j.WedMorning = @WedMorning or isnull(@WedMorning,0) = 0)
					and (j.WedAfternoon = @WedAfternoon or isnull(@WedAfternoon,0) = 0)
					and (j.WedNight = @WedNight or isnull(@WedNight,0) = 0)
					and (j.ThuMorning = @ThuMorning or isnull(@ThuMorning,0) = 0)
					and (j.ThuAfternoon = @ThuAfternoon or isnull(@ThuAfternoon,0) = 0)
					and (j.ThuNight = @ThuNight or isnull(@ThuNight,0) = 0)
					and (j.FriMorning = @FriMorning or isnull(@FriMorning,0) = 0)
					and (j.FriAfternoon = @FriAfternoon or isnull(@FriAfternoon,0) = 0)
					and (j.FriNight = @FriNight or isnull(@FriNight,0) = 0)
					and (j.SatMorning = @SatMorning or isnull(@SatMorning,0) = 0)
					and (j.SatAfternoon = @SatAfternoon or isnull(@SatAfternoon,0) = 0)
					and (j.SatNight = @SatNight or isnull(@SatNight,0) = 0)
					and (j.SunMorning = @SunMorning or isnull(@SunMorning,0) = 0)
					and (j.SunAfternoon = @SunAfternoon or isnull(@SunAfternoon,0) = 0)
					and (j.SunNight = @SunNight or isnull(@SunNight,0) = 0))
					or (j.IgnoreTimeSheet = 1)
				)
				and applies.Applies < j.PeopleRequired
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
			union all
			*/
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, c.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, null Term, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission,j.Gender, j.Wage, u.Name WageUnit, 
					r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from InternJob j
			join JobType tp on tp.TypeId = j.JobTypeId
			left join Company co on co.CompanyId = j.CompanyId
			join InternJobCategory c on c.CategoryId = j.CategoryId
			join Region r on r.RegionId = j.RegionId and r.ParentRegionId = @RegionId
			left join WageUnit u on u.UnitId = j.WageUnitId
			where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0
				and (r.RegionId in (select regionId from FilterRegion where userid = @userid) or not exists(select 1 from FilterRegion where userid = @UserId))
				and (c.CategoryId in (select CategoryId from FilterInternJob where userid = @userid) or @cat_filtered = 0)
				and (j.Gender = @Gender or j.Gender = 2)
				and (
					   ((j.MonMorning = @MonMorning or isnull(@MonMorning,0) = 0)
					and (j.MonAfternoon = @MonAfternoon or isnull(@MonAfternoon,0) = 0)
					and (j.MonNight = @MonNight or isnull(@MonNight,0) = 0)
					and (j.TueMorning = @TueMorning or isnull(@TueMorning,0) = 0)
					and (j.TueAfternoon = @TueAfternoon or isnull(@TueAfternoon,0) = 0)
					and (j.TueNight = @TueNight or isnull(@TueNight,0) = 0)
					and (j.WedMorning = @WedMorning or isnull(@WedMorning,0) = 0)
					and (j.WedAfternoon = @WedAfternoon or isnull(@WedAfternoon,0) = 0)
					and (j.WedNight = @WedNight or isnull(@WedNight,0) = 0)
					and (j.ThuMorning = @ThuMorning or isnull(@ThuMorning,0) = 0)
					and (j.ThuAfternoon = @ThuAfternoon or isnull(@ThuAfternoon,0) = 0)
					and (j.ThuNight = @ThuNight or isnull(@ThuNight,0) = 0)
					and (j.FriMorning = @FriMorning or isnull(@FriMorning,0) = 0)
					and (j.FriAfternoon = @FriAfternoon or isnull(@FriAfternoon,0) = 0)
					and (j.FriNight = @FriNight or isnull(@FriNight,0) = 0)
					and (j.SatMorning = @SatMorning or isnull(@SatMorning,0) = 0)
					and (j.SatAfternoon = @SatAfternoon or isnull(@SatAfternoon,0) = 0)
					and (j.SatNight = @SatNight or isnull(@SatNight,0) = 0)
					and (j.SunMorning = @SunMorning or isnull(@SunMorning,0) = 0)
					and (j.SunAfternoon = @SunAfternoon or isnull(@SunAfternoon,0) = 0)
					and (j.SunNight = @SunNight or isnull(@SunNight,0) = 0))
					or (j.IgnoreTimeSheet = 1)
				)
					and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, p.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, t.Name Term, j.IncludeDinner, j.IncludeRoom,j.IncludeCommission, j.Gender, j.Wage, u.Name WageUnit, 
					r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from ServiceJob j
			join JobType tp on tp.TypeId = j.JobTypeId
			left join Company co on co.CompanyId = j.CompanyId
			join ServiceJobCategory c on c.CategoryId = j.CategoryId
			join ServiceJobPosition p on p.PositionId = j.PositionId
			join Region r on r.RegionId = j.RegionId and r.ParentRegionId = @RegionId
			left join WageUnit u on u.UnitId = j.WageUnitId
			left join Term t on t.TermId = j.TermId
			where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0
				and (r.RegionId in (select regionId from FilterRegion where userid = @userid) or not exists(select 1 from FilterRegion where userid = @UserId))
				and (p.PositionId in (select PositionId from FilterServiceJob where userid = @userid) or @cat_filtered = 0)
				and (j.Gender = @Gender or j.Gender = 2)
				and (
					   ((j.MonMorning = @MonMorning or isnull(@MonMorning,0) = 0)
					and (j.MonAfternoon = @MonAfternoon or isnull(@MonAfternoon,0) = 0)
					and (j.MonNight = @MonNight or isnull(@MonNight,0) = 0)
					and (j.TueMorning = @TueMorning or isnull(@TueMorning,0) = 0)
					and (j.TueAfternoon = @TueAfternoon or isnull(@TueAfternoon,0) = 0)
					and (j.TueNight = @TueNight or isnull(@TueNight,0) = 0)
					and (j.WedMorning = @WedMorning or isnull(@WedMorning,0) = 0)
					and (j.WedAfternoon = @WedAfternoon or isnull(@WedAfternoon,0) = 0)
					and (j.WedNight = @WedNight or isnull(@WedNight,0) = 0)
					and (j.ThuMorning = @ThuMorning or isnull(@ThuMorning,0) = 0)
					and (j.ThuAfternoon = @ThuAfternoon or isnull(@ThuAfternoon,0) = 0)
					and (j.ThuNight = @ThuNight or isnull(@ThuNight,0) = 0)
					and (j.FriMorning = @FriMorning or isnull(@FriMorning,0) = 0)
					and (j.FriAfternoon = @FriAfternoon or isnull(@FriAfternoon,0) = 0)
					and (j.FriNight = @FriNight or isnull(@FriNight,0) = 0)
					and (j.SatMorning = @SatMorning or isnull(@SatMorning,0) = 0)
					and (j.SatAfternoon = @SatAfternoon or isnull(@SatAfternoon,0) = 0)
					and (j.SatNight = @SatNight or isnull(@SatNight,0) = 0)
					and (j.SunMorning = @SunMorning or isnull(@SunMorning,0) = 0)
					and (j.SunAfternoon = @SunAfternoon or isnull(@SunAfternoon,0) = 0)
					and (j.SunNight = @SunNight or isnull(@SunNight,0) = 0))
					or (j.IgnoreTimeSheet = 1)
				)
					and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, p.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, t.Name Term, j.IncludeDinner, j.IncludeRoom,j.IncludeCommission, j.Gender, j.Wage, u.Name WageUnit, 
					r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from TutorJob j
			join JobType tp on tp.TypeId = j.JobTypeId
			left join Company co on co.CompanyId = j.CompanyId
			join TutorJobLevel l on l.LevelId = j.LevelId
			join TutorJobPaper p on p.PaperId = j.PaperId
			join Region r on r.RegionId = j.RegionId and r.ParentRegionId = @RegionId
			left join WageUnit u on u.UnitId = j.WageUnitId
			left join Term t on t.TermId = j.TermId
			where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0
				and (r.RegionId in (select regionId from FilterRegion where userid = @userid) or not exists(select 1 from FilterRegion where userid = @UserId))
				and (p.PaperId in (select PaperId from FilterTutorJob where userid = @userid) or @cat_filtered = 0)
				and (j.Gender = @Gender or j.Gender = 2)
				and (
					   ((j.MonMorning = @MonMorning or isnull(@MonMorning,0) = 0)
					and (j.MonAfternoon = @MonAfternoon or isnull(@MonAfternoon,0) = 0)
					and (j.MonNight = @MonNight or isnull(@MonNight,0) = 0)
					and (j.TueMorning = @TueMorning or isnull(@TueMorning,0) = 0)
					and (j.TueAfternoon = @TueAfternoon or isnull(@TueAfternoon,0) = 0)
					and (j.TueNight = @TueNight or isnull(@TueNight,0) = 0)
					and (j.WedMorning = @WedMorning or isnull(@WedMorning,0) = 0)
					and (j.WedAfternoon = @WedAfternoon or isnull(@WedAfternoon,0) = 0)
					and (j.WedNight = @WedNight or isnull(@WedNight,0) = 0)
					and (j.ThuMorning = @ThuMorning or isnull(@ThuMorning,0) = 0)
					and (j.ThuAfternoon = @ThuAfternoon or isnull(@ThuAfternoon,0) = 0)
					and (j.ThuNight = @ThuNight or isnull(@ThuNight,0) = 0)
					and (j.FriMorning = @FriMorning or isnull(@FriMorning,0) = 0)
					and (j.FriAfternoon = @FriAfternoon or isnull(@FriAfternoon,0) = 0)
					and (j.FriNight = @FriNight or isnull(@FriNight,0) = 0)
					and (j.SatMorning = @SatMorning or isnull(@SatMorning,0) = 0)
					and (j.SatAfternoon = @SatAfternoon or isnull(@SatAfternoon,0) = 0)
					and (j.SatNight = @SatNight or isnull(@SatNight,0) = 0)
					and (j.SunMorning = @SunMorning or isnull(@SunMorning,0) = 0)
					and (j.SunAfternoon = @SunAfternoon or isnull(@SunAfternoon,0) = 0)
					and (j.SunNight = @SunNight or isnull(@SunNight,0) = 0))
					or (j.IgnoreTimeSheet = 1)
				)
					and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
			) all_sub
	) sub
	where sub.row between @row_from and @row_to
	order by [row]
end

GO
/****** Object:  StoredProcedure [dbo].[api_job_search_campus]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_job_search_campus]
	@CategoryId		nvarchar(255),
	@SchoolId		int,
	@RegionId		int,
	@Gender			int,
	@MonMorning		bit,
	@MonAfternoon	bit,
	@MonNight		bit,
	@TueMorning		bit,
	@TueAfternoon	bit,
	@TueNight		bit,
	@WedMorning		bit,
	@WedAfternoon	bit,
	@WedNight		bit,
	@ThuMorning		bit,
	@ThuAfternoon	bit,
	@ThuNight		bit,
	@FriMorning		bit,
	@FriAfternoon	bit,
	@FriNight		bit,
	@SatMorning		bit,
	@SatAfternoon	bit,
	@SatNight		bit,
	@SunMorning		bit,
	@SunAfternoon	bit,
	@SunNight		bit,
	@PageIndex		int,
	@PageSize		int
as
begin set transaction isolation level read uncommitted	set nocount on
	if @CategoryId = '0' set @CategoryId = ''
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select JobId, JobTypeId, JobType, Title, CategoryName, CompanyName, SchoolName, Gender, Region, isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, 
		ViewTimes, Verified, Reptile, IgnoreTimeSheet, Sticky
	from
		(
		select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, isnull(co.FullName,j.CompanyName) CompanyName, c.Name CategoryName, s.Name SchoolName, j.Gender,  
			sr.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, j.Reptile, IgnoreTimeSheet, Sticky,
			ROW_NUMBER() over(order by case j.Sticky when 1 then 1 else 2 end, j.DatePublished desc) [row]
		from CampusJob j
		join JobType tp on tp.TypeId = j.JobTypeId
		left join Company co on co.CompanyId = j.CompanyId
		join CampusJobCategory c on c.CategoryId = j.CategoryId
		join School s on s.SchoolId = j.SchoolId
		join Region sr on sr.RegionId = j.RegionId
		left join Region pr on pr.RegionId = sr.ParentRegionId and pr.RootRegionId = sr.RootRegionId and pr.Indentation = 2
		where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0 
			and (sr.RegionId = @RegionId or pr.RegionId = @RegionId or sr.RootRegionId = @RegionId or isnull(@RegionId,0) = 0)
			and (j.CategoryId in (select cast(string as int) from dbo.fn_split_string_by(@CategoryId,',')) or isnull(@CategoryId,'') = '')
			and (j.SchoolId = @SchoolId or isnull(@SchoolId,0) = 0)
			and (j.Gender = @Gender or @Gender is null or j.Gender = 2)
			and (
					   ((j.MonMorning = @MonMorning or isnull(@MonMorning,0) = 0)
					and (j.MonAfternoon = @MonAfternoon or isnull(@MonAfternoon,0) = 0)
					and (j.MonNight = @MonNight or isnull(@MonNight,0) = 0)
					and (j.TueMorning = @TueMorning or isnull(@TueMorning,0) = 0)
					and (j.TueAfternoon = @TueAfternoon or isnull(@TueAfternoon,0) = 0)
					and (j.TueNight = @TueNight or isnull(@TueNight,0) = 0)
					and (j.WedMorning = @WedMorning or isnull(@WedMorning,0) = 0)
					and (j.WedAfternoon = @WedAfternoon or isnull(@WedAfternoon,0) = 0)
					and (j.WedNight = @WedNight or isnull(@WedNight,0) = 0)
					and (j.ThuMorning = @ThuMorning or isnull(@ThuMorning,0) = 0)
					and (j.ThuAfternoon = @ThuAfternoon or isnull(@ThuAfternoon,0) = 0)
					and (j.ThuNight = @ThuNight or isnull(@ThuNight,0) = 0)
					and (j.FriMorning = @FriMorning or isnull(@FriMorning,0) = 0)
					and (j.FriAfternoon = @FriAfternoon or isnull(@FriAfternoon,0) = 0)
					and (j.FriNight = @FriNight or isnull(@FriNight,0) = 0)
					and (j.SatMorning = @SatMorning or isnull(@SatMorning,0) = 0)
					and (j.SatAfternoon = @SatAfternoon or isnull(@SatAfternoon,0) = 0)
					and (j.SatNight = @SatNight or isnull(@SatNight,0) = 0)
					and (j.SunMorning = @SunMorning or isnull(@SunMorning,0) = 0)
					and (j.SunAfternoon = @SunAfternoon or isnull(@SunAfternoon,0) = 0)
					and (j.SunNight = @SunNight or isnull(@SunNight,0) = 0))
					or (j.IgnoreTimeSheet = 1)
				)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
	) sub
	where sub.row between @row_from and @row_to
	order by row
end


-- select * from jobstatus

GO
/****** Object:  StoredProcedure [dbo].[api_job_search_intern]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_job_search_intern]
	@CategoryId		nvarchar(255),
	@RegionId		int,
	@Gender			int,
	@MonMorning		bit,
	@MonAfternoon	bit,
	@MonNight		bit,
	@TueMorning		bit,
	@TueAfternoon	bit,
	@TueNight		bit,
	@WedMorning		bit,
	@WedAfternoon	bit,
	@WedNight		bit,
	@ThuMorning		bit,
	@ThuAfternoon	bit,
	@ThuNight		bit,
	@FriMorning		bit,
	@FriAfternoon	bit,
	@FriNight		bit,
	@SatMorning		bit,
	@SatAfternoon	bit,
	@SatNight		bit,
	@SunMorning		bit,
	@SunAfternoon	bit,
	@SunNight		bit,
	@OrderById		int,
	@PageIndex		int,
	@PageSize		int
as
begin set transaction isolation level read uncommitted	set nocount on
	if @CategoryId = '0' set @CategoryId = ''
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize
	set @OrderById = isnull(@OrderById,1)
	if @OrderById = 0 set @OrderById = 1

	select JobId, JobTypeId, JobType, Title, CategoryName, CompanyName, IncludeDinner, IncludeRoom, IncludeCommission, Gender, Wage, WageUnit, 
			Region, isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, ViewTimes, Verified, Deposit, Reptile, IgnoreTimeSheet, Sticky
	from
		(
		select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, isnull(co.FullName,j.CompanyName) CompanyName, c.Name CategoryName, j.IncludeDinner, j.IncludeRoom,j.IncludeCommission, j.Gender, isnull(j.Wage,'') Wage, isnull(u.Name,'') WageUnit, 
			sr.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, j.Reptile, IgnoreTimeSheet, Sticky,
			ROW_NUMBER() over(order by case j.Sticky when 1 then 1 else 2 end, case when @OrderById = 1 then j.DatePublished else u.UnitId end desc, case when @OrderById = 1 then 1 else j.Wage end desc) [row]
		from InternJob j
		join JobType tp on tp.TypeId = j.JobTypeId
		left join Company co on co.CompanyId = j.CompanyId
		join InternJobCategory c on c.CategoryId = j.CategoryId
		join Region sr on sr.RegionId = j.RegionId
		left join Region pr on pr.RegionId = sr.ParentRegionId and pr.RootRegionId = sr.RootRegionId and pr.Indentation = 2
		left join WageUnit u on u.UnitId = j.WageUnitId
		where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0  
			and (sr.RegionId = @RegionId or pr.RegionId = @RegionId or sr.RootRegionId = @RegionId)
			and (j.CategoryId in(select cast(string as int) from dbo.fn_split_string_by(@CategoryId,',')) or isnull(@CategoryId,'') = '')
			and (j.Gender = @Gender or @Gender is null or j.Gender = 2)
			and (
					   ((j.MonMorning = @MonMorning or isnull(@MonMorning,0) = 0)
					and (j.MonAfternoon = @MonAfternoon or isnull(@MonAfternoon,0) = 0)
					and (j.MonNight = @MonNight or isnull(@MonNight,0) = 0)
					and (j.TueMorning = @TueMorning or isnull(@TueMorning,0) = 0)
					and (j.TueAfternoon = @TueAfternoon or isnull(@TueAfternoon,0) = 0)
					and (j.TueNight = @TueNight or isnull(@TueNight,0) = 0)
					and (j.WedMorning = @WedMorning or isnull(@WedMorning,0) = 0)
					and (j.WedAfternoon = @WedAfternoon or isnull(@WedAfternoon,0) = 0)
					and (j.WedNight = @WedNight or isnull(@WedNight,0) = 0)
					and (j.ThuMorning = @ThuMorning or isnull(@ThuMorning,0) = 0)
					and (j.ThuAfternoon = @ThuAfternoon or isnull(@ThuAfternoon,0) = 0)
					and (j.ThuNight = @ThuNight or isnull(@ThuNight,0) = 0)
					and (j.FriMorning = @FriMorning or isnull(@FriMorning,0) = 0)
					and (j.FriAfternoon = @FriAfternoon or isnull(@FriAfternoon,0) = 0)
					and (j.FriNight = @FriNight or isnull(@FriNight,0) = 0)
					and (j.SatMorning = @SatMorning or isnull(@SatMorning,0) = 0)
					and (j.SatAfternoon = @SatAfternoon or isnull(@SatAfternoon,0) = 0)
					and (j.SatNight = @SatNight or isnull(@SatNight,0) = 0)
					and (j.SunMorning = @SunMorning or isnull(@SunMorning,0) = 0)
					and (j.SunAfternoon = @SunAfternoon or isnull(@SunAfternoon,0) = 0)
					and (j.SunNight = @SunNight or isnull(@SunNight,0) = 0))
					or (j.IgnoreTimeSheet = 1)
				)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
	) sub
	where sub.row between @row_from and @row_to
	order by row
end


-- select * from jobstatus

GO
/****** Object:  StoredProcedure [dbo].[api_job_search_recommended]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_job_search_recommended]
	@RegionId	int,
	@PageIndex	int,
	@PageSize	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select JobId, JobType, JobTypeId, isnull(Title,'') Title, isnull(CategoryName,'') CategoryName, isnull(CompanyName,'') CompanyName, isnull(Term,'') Term, 
		isnull(IncludeDinner,0) IncludeDinner, isnull(IncludeRoom,0) IncludeRoom, isnull(IncludeCommission,0) IncludeCommission,
		case when Gender = 1 then '男' when Gender = 0 then '女' else '' end Gender, isnull(Wage,0) Wage, isnull(WageUnit,'') WageUnit, isnull(Region,'') Region,
		isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, isnull(ViewTimes,0) ViewTimes, Verified, isnull(Deposit,0) Deposit, Reptile, IgnoreTimeSheet, Sticky
	from(
		select *, row_number() over (order by case Sticky when 1 then 1 else 2 end, DatePublished desc) as [row]
		from 
		(
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, p.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, isnull(t.Name,'') Term, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission,j.Gender, isnull(j.Wage,'') Wage, isnull(u.Name,'') WageUnit, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from ActivityJob j
			left join Company co on co.CompanyId = j.CompanyId
			left join WageUnit u on u.UnitId = j.WageUnitId 
			join ActivityJobPosition p on p.PositionId = j.PositionId
			join Region r on r.RegionId = j.RegionId 
			join JobType tp on tp.TypeId = j.JobTypeId
			left join Region pr on pr.RegionId = r.ParentRegionId and pr.RootRegionId = r.RootRegionId and pr.Indentation = 2
			left join Term t on t.TermId = j.TermId
			where j.StatusId = 2 and j.Recommended = 1 and j.DateDeleted is null and j.[Disabled] = 0
				and (r.RegionId = @RegionId or pr.RegionId = @RegionId or r.RootRegionId = @RegionId or @RegionId is null)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, c.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, null Term, null, null, null, j.Gender, null, null, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(0 as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from CampusJob j 
			left join Company co on co.CompanyId = j.CompanyId
			join CampusJobCategory c on c.CategoryId = j.CategoryId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId and pr.RootRegionId = r.RootRegionId and pr.Indentation = 2
			where j.StatusId = 2 and j.Recommended = 1 and j.DateDeleted is null and j.[Disabled] = 0
				and (r.RegionId = @RegionId or pr.RegionId = @RegionId or r.RootRegionId = @RegionId or @RegionId is null)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, c.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, null Term, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission,j.Gender, j.Wage, u.Name WageUnit, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from InternJob j
			left join Company co on co.CompanyId = j.CompanyId
			left join WageUnit u on u.UnitId = j.WageUnitId 
			join InternJobCategory c on c.CategoryId = j.CategoryId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId and pr.RootRegionId = r.RootRegionId and pr.Indentation = 2
			where j.StatusId = 2 and j.Recommended = 1 and j.DateDeleted is null and j.[Disabled] = 0 
				and (r.RegionId = @RegionId or pr.RegionId = @RegionId or r.RootRegionId = @RegionId or @RegionId is null)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, c.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, t.Name Term, j.IncludeDinner, j.IncludeRoom,j.IncludeCommission, j.Gender, j.Wage, u.Name WageUnit, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from ServiceJob j 
			left join Company co on co.CompanyId = j.CompanyId
			left join WageUnit u on u.UnitId = j.WageUnitId 
			join ServiceJobPosition c on c.PositionId = j.PositionId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId and pr.RootRegionId = r.RootRegionId and pr.Indentation = 2
			left join Term t on t.TermId = j.TermId
			where j.StatusId = 2 and j.Recommended = 1 and j.DateDeleted is null and j.[Disabled] = 0 
				and (r.RegionId = @RegionId or pr.RegionId = @RegionId or r.RootRegionId = @RegionId or @RegionId is null)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, p.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, t.Name Term, j.IncludeDinner, j.IncludeRoom,j.IncludeCommission, j.Gender, j.Wage, u.Name WageUnit, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from TutorJob j 
			left join Company co on co.CompanyId = j.CompanyId
			left join WageUnit u on u.UnitId = j.WageUnitId 
			join TutorJobPaper p on p.PaperId = j.PaperId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId and pr.RootRegionId = r.RootRegionId and pr.Indentation = 2
			left join Term t on t.TermId = j.TermId
			where j.StatusId = 2 and j.Recommended = 1 and j.DateDeleted is null and j.[Disabled] = 0 
				and (r.RegionId = @RegionId or pr.RegionId = @RegionId or r.RootRegionId = @RegionId or @RegionId is null)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
		) all_sub
	) sub
	where sub.row between @row_from and @row_to
	order by [row]
end	


GO
/****** Object:  StoredProcedure [dbo].[api_job_search_service]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_job_search_service]
	@CategoryId		nvarchar(255),
	@PositionId		nvarchar(255),
	@RegionId		int,
	@TermId			int,
	@Gender			int,
	@MonMorning		bit,
	@MonAfternoon	bit,
	@MonNight		bit,
	@TueMorning		bit,
	@TueAfternoon	bit,
	@TueNight		bit,
	@WedMorning		bit,
	@WedAfternoon	bit,
	@WedNight		bit,
	@ThuMorning		bit,
	@ThuAfternoon	bit,
	@ThuNight		bit,
	@FriMorning		bit,
	@FriAfternoon	bit,
	@FriNight		bit,
	@SatMorning		bit,
	@SatAfternoon	bit,
	@SatNight		bit,
	@SunMorning		bit,
	@SunAfternoon	bit,
	@SunNight		bit,
	@OrderById		int,
	@PageIndex		int,
	@PageSize		int
as
begin set transaction isolation level read uncommitted	set nocount on
	if @CategoryId = '0' set @CategoryId = ''
	if @PositionId = '0' set @PositionId = ''
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize
	set @OrderById = isnull(@OrderById,1)
	if @OrderById = 0 set @OrderById = 1

	select JobId, JobTypeId, JobType, Title, CategoryName, PositionName, CompanyName, IncludeDinner, Term, IncludeRoom, IncludeCommission, Gender, Wage, WageUnit, 
			Region, isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, ViewTimes, Verified, Deposit, Reptile, IgnoreTimeSheet, Sticky
	from
		(
		select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, p.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, p.Name PositionName, j.IncludeDinner, isnull(t.Name,'') Term, j.IncludeRoom,j.IncludeCommission, j.Gender, isnull(j.Wage,'') Wage, isnull(u.Name,'') WageUnit, 
			sr.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky,
			ROW_NUMBER() over(order by case j.Sticky when 1 then 1 else 2 end, case when @OrderById = 1 then j.DatePublished else u.UnitId end desc, case when @OrderById = 1 then 1 else j.Wage end desc) [row]
		from ServiceJob j
		join JobType tp on tp.TypeId = j.JobTypeId
		left join Company co on co.CompanyId = j.CompanyId
		join ServiceJobCategory c on c.CategoryId = j.CategoryId
		join ServiceJobPosition p on p.PositionId = j.PositionId
		join Region sr on sr.RegionId = j.RegionId
		left join Region pr on pr.RegionId = sr.ParentRegionId and pr.RootRegionId = sr.RootRegionId and pr.Indentation = 2
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term t on t.TermId = j.TermId
		where j.StatusId = 2  and j.DateDeleted is null and j.Disabled = 0
			and (sr.RegionId = @RegionId or pr.RegionId = @RegionId or sr.RootRegionId = @RegionId or isnull(@RegionId,0) = 0)
			and (j.CategoryId in(select cast(string as int) from dbo.fn_split_string_by(@CategoryId,',')) or isnull(@CategoryId,'') = '')
			and (j.PositionId in(select cast(string as int) from dbo.fn_split_string_by(@PositionId,',')) or isnull(@PositionId,'') = '')
			and (j.Gender = @Gender or @Gender is null or j.Gender = 2)
			and (t.TermId = @TermId or isnull(@TermId,0) = 0)
			and (
					   ((j.MonMorning = @MonMorning or isnull(@MonMorning,0) = 0)
					and (j.MonAfternoon = @MonAfternoon or isnull(@MonAfternoon,0) = 0)
					and (j.MonNight = @MonNight or isnull(@MonNight,0) = 0)
					and (j.TueMorning = @TueMorning or isnull(@TueMorning,0) = 0)
					and (j.TueAfternoon = @TueAfternoon or isnull(@TueAfternoon,0) = 0)
					and (j.TueNight = @TueNight or isnull(@TueNight,0) = 0)
					and (j.WedMorning = @WedMorning or isnull(@WedMorning,0) = 0)
					and (j.WedAfternoon = @WedAfternoon or isnull(@WedAfternoon,0) = 0)
					and (j.WedNight = @WedNight or isnull(@WedNight,0) = 0)
					and (j.ThuMorning = @ThuMorning or isnull(@ThuMorning,0) = 0)
					and (j.ThuAfternoon = @ThuAfternoon or isnull(@ThuAfternoon,0) = 0)
					and (j.ThuNight = @ThuNight or isnull(@ThuNight,0) = 0)
					and (j.FriMorning = @FriMorning or isnull(@FriMorning,0) = 0)
					and (j.FriAfternoon = @FriAfternoon or isnull(@FriAfternoon,0) = 0)
					and (j.FriNight = @FriNight or isnull(@FriNight,0) = 0)
					and (j.SatMorning = @SatMorning or isnull(@SatMorning,0) = 0)
					and (j.SatAfternoon = @SatAfternoon or isnull(@SatAfternoon,0) = 0)
					and (j.SatNight = @SatNight or isnull(@SatNight,0) = 0)
					and (j.SunMorning = @SunMorning or isnull(@SunMorning,0) = 0)
					and (j.SunAfternoon = @SunAfternoon or isnull(@SunAfternoon,0) = 0)
					and (j.SunNight = @SunNight or isnull(@SunNight,0) = 0))
					or (j.IgnoreTimeSheet = 1)
				)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
	) sub
	where sub.row between @row_from and @row_to
	order by row
end


-- select * from jobstatus

GO
/****** Object:  StoredProcedure [dbo].[api_job_search_tutor]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_job_search_tutor]
	@LevelId		nvarchar(255),
	@PaperId		nvarchar(255),
	@RegionId		int,
	@TermId			int,
	@Gender			int,
	@MonMorning		bit,
	@MonAfternoon	bit,
	@MonNight		bit,
	@TueMorning		bit,
	@TueAfternoon	bit,
	@TueNight		bit,
	@WedMorning		bit,
	@WedAfternoon	bit,
	@WedNight		bit,
	@ThuMorning		bit,
	@ThuAfternoon	bit,
	@ThuNight		bit,
	@FriMorning		bit,
	@FriAfternoon	bit,
	@FriNight		bit,
	@SatMorning		bit,
	@SatAfternoon	bit,
	@SatNight		bit,
	@SunMorning		bit,
	@SunAfternoon	bit,
	@SunNight		bit,
	@OrderById		int,
	@PageIndex		int,
	@PageSize		int
as
begin set transaction isolation level read uncommitted	set nocount on
	if @LevelId = '0' set @LevelId = ''
	if @PaperId = '0' set @PaperId = ''
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize
	set @OrderById = isnull(@OrderById,1)
	if @OrderById = 0 set @OrderById = 1

	select JobId, JobTypeId, JobType, Title, Level, Paper, CompanyName, IncludeDinner, Term, IncludeRoom, IncludeCommission, Gender, Wage, WageUnit, 
			Region, isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, ViewTimes, Verified, Deposit, Reptile, IgnoreTimeSheet, Sticky
	from
		(
		select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, l.Name Level, p.Name Paper, isnull(co.FullName,j.CompanyName) CompanyName, j.IncludeDinner, isnull(t.Name,'') Term, j.IncludeRoom, j.IncludeCommission, j.Gender, isnull(j.Wage,'') Wage, isnull(u.Name,'') WageUnit, 
			sr.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky,
			ROW_NUMBER() over(order by case Sticky when 1 then 1 else 2 end, case when @OrderById = 1 then j.DatePublished else u.UnitId end desc, case when @OrderById = 1 then 1 else j.Wage end desc) [row]
		from TutorJob j
		join JobType tp on tp.TypeId = j.JobTypeId
		left join Company co on co.CompanyId = j.CompanyId
		join TutorJobLevel l on l.LevelId = j.LevelId
		join TutorJobPaper p on p.PaperId = j.PaperId
		join Region sr on sr.RegionId = j.RegionId
		left join Region pr on pr.RegionId = sr.ParentRegionId and pr.RootRegionId = sr.RootRegionId and pr.Indentation = 2
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term t on t.TermId = j.TermId
		where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0 
			and (sr.RegionId = @RegionId or pr.RegionId = @RegionId or sr.RootRegionId = @RegionId or isnull(@RegionId,0) = 0)
			and (j.LevelId in(select cast(string as int) from dbo.fn_split_string_by(@LevelId,',')) or isnull(@LevelId,'') = '')
			and (j.PaperId in(select cast(string as int) from dbo.fn_split_string_by(@PaperId,',')) or isnull(@PaperId,'') = '')
			and (j.Gender = @Gender or @Gender is null or j.Gender = 2)
			and (t.TermId = @TermId or isnull(@TermId,0) = 0)
			and (
					   ((j.MonMorning = @MonMorning or isnull(@MonMorning,0) = 0)
					and (j.MonAfternoon = @MonAfternoon or isnull(@MonAfternoon,0) = 0)
					and (j.MonNight = @MonNight or isnull(@MonNight,0) = 0)
					and (j.TueMorning = @TueMorning or isnull(@TueMorning,0) = 0)
					and (j.TueAfternoon = @TueAfternoon or isnull(@TueAfternoon,0) = 0)
					and (j.TueNight = @TueNight or isnull(@TueNight,0) = 0)
					and (j.WedMorning = @WedMorning or isnull(@WedMorning,0) = 0)
					and (j.WedAfternoon = @WedAfternoon or isnull(@WedAfternoon,0) = 0)
					and (j.WedNight = @WedNight or isnull(@WedNight,0) = 0)
					and (j.ThuMorning = @ThuMorning or isnull(@ThuMorning,0) = 0)
					and (j.ThuAfternoon = @ThuAfternoon or isnull(@ThuAfternoon,0) = 0)
					and (j.ThuNight = @ThuNight or isnull(@ThuNight,0) = 0)
					and (j.FriMorning = @FriMorning or isnull(@FriMorning,0) = 0)
					and (j.FriAfternoon = @FriAfternoon or isnull(@FriAfternoon,0) = 0)
					and (j.FriNight = @FriNight or isnull(@FriNight,0) = 0)
					and (j.SatMorning = @SatMorning or isnull(@SatMorning,0) = 0)
					and (j.SatAfternoon = @SatAfternoon or isnull(@SatAfternoon,0) = 0)
					and (j.SatNight = @SatNight or isnull(@SatNight,0) = 0)
					and (j.SunMorning = @SunMorning or isnull(@SunMorning,0) = 0)
					and (j.SunAfternoon = @SunAfternoon or isnull(@SunAfternoon,0) = 0)
					and (j.SunNight = @SunNight or isnull(@SunNight,0) = 0))
					or (j.IgnoreTimeSheet = 1)
				)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
	) sub
	where sub.row between @row_from and @row_to
	order by row
end


-- select * from jobstatus

GO
/****** Object:  StoredProcedure [dbo].[api_job_sign_in]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[api_job_sign_in]
	@JobId	bigint,
	@JobTypeId int,
	@UserId bigint,
	@CompanyId bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	if exists(select 1 
		from
		(
			select 1 Applies
			from ActivityJob j
			join ActivityJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 1 and j.CompanyId = @CompanyId
			union all
			select 1 
			from CampusJob j
			join CampusJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 2 and j.CompanyId = @CompanyId
			union all
			select 1 
			from InternJob j
			join InternJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 3 and j.CompanyId = @CompanyId
			union all
			select 1 
			from ServiceJob j
			join ServiceJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 4 and j.CompanyId = @CompanyId
			union all
			select 1 
			from TutorJob j
			join TutorJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 5 and j.CompanyId = @CompanyId
		) job

	)
	begin
		insert into JobApplySignIn(Date, JobId, JobTypeId, UserId, DateConfirmedSignedIn)
		values(dateadd(d,0,datediff(d,0,getdate())), @JobId, @JobTypeId, @UserId, Getdate())
	end
end
GO
/****** Object:  StoredProcedure [dbo].[api_job_sign_out]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[api_job_sign_out]
	@JobId	bigint,
	@JobTypeId int,
	@UserId bigint,
	@CompanyId bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	if exists(select 1 
		from
		(
			select 1 Applies
			from ActivityJob j
			join ActivityJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 1 and j.CompanyId = @CompanyId
			union all
			select 1 
			from CampusJob j
			join CampusJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 2 and j.CompanyId = @CompanyId
			union all
			select 1 
			from InternJob j
			join InternJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 3 and j.CompanyId = @CompanyId
			union all
			select 1 
			from ServiceJob j
			join ServiceJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 4 and j.CompanyId = @CompanyId
			union all
			select 1 
			from TutorJob j
			join TutorJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 5 and j.CompanyId = @CompanyId
		) job

	)
	begin
		update JobApplySignIn
		set DateConfirmedSignedOut = getdate()
		where date = dateadd(d,0,datediff(d,0,getdate())) and JobId = @jobid and JobTypeId = @jobtypeid and userid = @userid
	end
end
GO
/****** Object:  StoredProcedure [dbo].[api_job_status_approved]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_job_status_approved]
	@JobId	bigint,
	@JobTypeId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @CompanyId	bigint, @JobTitle nvarchar(255), @MessageId	bigint, @Device nvarchar(50), @DeviceToken nvarchar(255)
	declare @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @IsLogin bit, @BaiduUserId nvarchar(50)
	if @JobTypeId = 1
	begin
		select @CompanyId = CompanyId, @JobTitle = Title from ActivityJob where JobId = @JobId
	end
	else if @JobTypeId = 2
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from CampusJob where JobId = @JobId
	end
	else if @JobTypeId = 3
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from InternJob where JobId = @JobId
	end
	else if @JobTypeId = 4
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from ServiceJob where JobId = @JobId
	end
	else if @JobTypeId = 5
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from TutorJob where JobId = @JobId
	end
	select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin from Company where CompanyId = @CompanyId

	insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
	values(0, @CompanyId, @JobId, @JobTypeId, '[岗位] 已通过审核', 7, 0)
	set @MessageId = SCOPE_IDENTITY()

	if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
	begin
		update Company
		set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
		where CompanyId = @CompanyId

		insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
		values(@MessageId, '已审核', 7, '[岗位] 已通过审核', @JobTitle, 0, @CompanyId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
	end
end


GO
/****** Object:  StoredProcedure [dbo].[api_job_status_rejected]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_job_status_rejected]
	@JobId	bigint,
	@JobTypeId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @CompanyId	bigint, @JobTitle nvarchar(255), @MessageId	bigint, @Device nvarchar(50), @DeviceToken nvarchar(255)
	declare @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @IsLogin bit, @BaiduUserId nvarchar(50)
	if @JobTypeId = 1
	begin
		select @CompanyId = CompanyId, @JobTitle = Title from ActivityJob where JobId = @JobId
	end
	else if @JobTypeId = 2
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from CampusJob where JobId = @JobId
	end
	else if @JobTypeId = 3
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from InternJob where JobId = @JobId
	end
	else if @JobTypeId = 4
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from ServiceJob where JobId = @JobId
	end
	else if @JobTypeId = 5
	begin
		select @CompanyId = CompanyId, @JobTitle = Title  from TutorJob where JobId = @JobId
	end

	select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin from Company where CompanyId = @CompanyId
	insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
	values(0, @CompanyId, @JobId, @JobTypeId, '[岗位] 未通过审核', 8, 0)
	set @MessageId = SCOPE_IDENTITY()

	if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
	begin
		update Company
		set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
		where CompanyId = @CompanyId

		insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
		values(@MessageId, '审核失败', 8, '[岗位] 未通过审核', @JobTitle, 0, @CompanyId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
	end
end

GO
/****** Object:  StoredProcedure [dbo].[api_job_trade_create]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[api_job_trade_create]
	@CompanyId	bigint,
	@OrderIds	nvarchar(max)
as
begin set transaction isolation level read uncommitted	set nocount on

begin tran
	declare @TradeId bigint = 0
	select top 1 @TradeId = isnull(TradeId,0) from Trade order by TradeId desc
	set @TradeId = @TradeId + 1

	if exists(select 1 from [dbo].[fn_split_string_by](@OrderIds, ',') s join [Order] o on o.OrderId = cast(s.string as bigint) and o.DatePaid is not null)
	begin
		-- 交易号已结算
		set @TradeId = -1
	end
	-- 确认订单号都属于同一交易号，并且属于同一个企业
	else if exists(select 1 from [dbo].[fn_split_string_by](@OrderIds, ',') s left join [Order] o on o.OrderId = cast(s.string as bigint) and o.DatePaid is null and o.CompanyId = @CompanyId where o.OrderId is null)
	begin
		set @TradeId = -1
	end
	else
	begin
		insert into Trade(TradeId, OrderId)
		select @TradeId, string 
		from [dbo].[fn_split_string_by](@OrderIds, ',') s
		join [Order] o on o.OrderId = s.string
		where CompanyId = @CompanyId

		declare @Balance money, @Amount money, @TopupAmount money
		select @Balance = Balance from Company where CompanyId = @CompanyId
		select @Amount = sum(isnull(UpdatedAmount,Amount)) from [Order] o join Trade t on t.OrderId = o.OrderId where t.TradeId = @TradeId

		if @Amount <= 0
		begin
			delete from Trade where TradeId = @TradeId
			set @TradeId = -1
		end
		else
		begin
			--结算之前， 先删除那些金额 0 的订单或者订单线
			delete ol
			from OrderLine ol
			join Trade t on t.OrderId = ol.OrderId
			where t.TradeId = @TradeId and isnull(UpdatedAmount,Amount) <= 0

			delete o
			from [Order] o
			join Trade t on t.OrderId = o.OrderId
			where t.TradeId = @TradeId and isnull(UpdatedAmount,Amount) <= 0

			-- 如果资金余额大于付款余额， 则全部从资金余额扣，并且结算工资给学生， 支付完毕
			if @Balance >= @Amount
			begin
				update Company set Balance = Balance - @Amount where CompanyId = @CompanyId
				insert into CompanyCashFlow(CompanyId, Balance, Payment, FlowTypeId) values(@CompanyId, @Balance-@Amount, -@Amount,2)

				update Trade set DatePaid = getdate(), DatePaymentConfirmed = getdate() where TradeId = @TradeId
				update o
				set DatePaid = getdate(), DatePaymentConfirmed = getdate()
				from [Order] o
				join Trade t on t.OrderId = o.OrderId
				where t.TradeId = @TradeId
			
				-- 记录对学生的充值
				insert into UserCashIn(UserId, Amount, Balance, Note)
				select u.UserId, isnull(ol.UpdatedAmount, ol.Amount), isnull(ol.UpdatedAmount, ol.Amount) + u.Balance, '结算充值'
				from [User] u
				join OrderLine ol on ol.UserId = u.UserId
				join [Order] o on o.OrderId = ol.OrderId
				join Trade t on t.OrderId = o.OrderId
				where t.TradeId = @TradeId

				--对学生进行充值
				update u
				set u.Balance = u.Balance + isnull(ol.UpdatedAmount, ol.Amount)
				from [User] u
				join OrderLine ol on ol.UserId = u.UserId
				join [Order] o on o.OrderId = ol.OrderId
				join Trade t on t.OrderId = o.OrderId
				where t.TradeId = @TradeId

				set @TopupAmount = 0
			end
			-- 如果资金余额小于付款余额， 则先充值，如果充值成功，再进行工资结算，否则全部重来
			else if @Balance < @Amount
			begin
				-- 等充值确认成功后，再进行DatePaid, DatePaymentConfirmed 更新及工资结算
				insert into CompanyCashIn(CompanyId, TradeId, Amount, DatePaid, DatePaymentConfirmed)
				values(@CompanyId, @TradeId, @Amount - @Balance, null, null)

				set @TopupAmount = @Amount - @Balance
			end
		end
	end

	declare @title nvarchar(max) 
	select top 1 @title = o.Title FROM [Order] o join Trade t on t.OrderId = o.OrderId  WHERE t.TradeId = @TradeId

	declare @body nvarchar(max)
	select @body = STUFF((select ',' + left(convert(nvarchar,o.Date,120),10) + ' [' + convert(nvarchar,isnull(UpdatedAmount,Amount),50) +']' FROM [Order] o join Trade t on t.OrderId = o.OrderId  WHERE t.TradeId = @TradeId FOR XML PATH('')), 1, 1, '')

	select t.TradeId, isnull(@title,'') Title, isnull(@body,'') Body, @TopupAmount as Amount
	from Trade t
	where t.TradeId = @TradeId

commit tran
end

GO
/****** Object:  StoredProcedure [dbo].[api_job_trade_paid]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[api_job_trade_paid]
	@CompanyId	bigint,
	@TradeId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
begin tran
	declare @Status int = 0, @JobId bigint, @JobTypeId int
	if exists(select 1 from Trade t join [Order] o on o.OrderId = t.OrderId where t.TradeId = @TradeId and o.CompanyId <> @CompanyId)
	begin
		set @Status = 0
	end
	-- 防止重复结算
	else if exists(select 1 from CompanyCashIn where CompanyId = @CompanyId and TradeId = @TradeId and DatePaid is not null)
	begin
		set @Status = 1
	end
	else
	begin
		update t
		set t.DatePaid = getdate()
		from Trade t
		where t.TradeId = @TradeId 

		update o
		set o.DatePaid = getdate(), @JobId = o.JobId, @JobTypeId = o.JobTypeId
		from [Order] o
		join Trade t on t.OrderId = o.OrderId
		where t.TradeId = @TradeId 
	

		--更新充状态
		update CompanyCashIn set DatePaid = getdate() where TradeId = @TradeId and CompanyId = @CompanyId
		
		set @Status = 1
	end

	select @Status Status, @JobId JobId, @JobTypeId JobTypeId

commit tran
end

GO
/****** Object:  StoredProcedure [dbo].[api_job_update_absent]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[api_job_update_absent]
	@JobId	bigint,
	@JobTypeId int,
	@UserId bigint,
	@CompanyId bigint,
	@Today date,
	@AbsentComplainId int
as
begin set transaction isolation level read uncommitted	set nocount on

	if exists(select 1 
		from
		(
			select 1 Applies
			from ActivityJob j
			join ActivityJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 1 and j.CompanyId = @CompanyId
			union all
			select 1 
			from CampusJob j
			join CampusJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 2 and j.CompanyId = @CompanyId
			union all
			select 1 
			from InternJob j
			join InternJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 3 and j.CompanyId = @CompanyId
			union all
			select 1 
			from ServiceJob j
			join ServiceJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 4 and j.CompanyId = @CompanyId
			union all
			select 1 
			from TutorJob j
			join TutorJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 5 and j.CompanyId = @CompanyId
		) job
	)
	begin
		update JobApplySignIn
		set DateAbsent = getdate(), AbsentComplainId = @AbsentComplainId
		where date = @Today and JobId = @jobid and JobTypeId = @jobtypeid and userid = @userid

		if @AbsentComplainId = 3
		begin
			exec [api_job_update_end] @jobId, @JobTypeId ,@UserId ,	@CompanyId ,2
		end
	end
end

GO
/****** Object:  StoredProcedure [dbo].[api_job_update_end]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[api_job_update_end]
	@JobId	bigint,
	@JobTypeId int,
	@UserId bigint,
	@CompanyId bigint,
	@ReasonId int
as
begin set transaction isolation level read uncommitted	set nocount on

	if exists(select 1 
		from
		(
			select 1 Applies
			from ActivityJob j
			join ActivityJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 1 and j.CompanyId = @CompanyId
			union all
			select 1 
			from CampusJob j
			join CampusJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 2 and j.CompanyId = @CompanyId
			union all
			select 1 
			from InternJob j
			join InternJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 3 and j.CompanyId = @CompanyId
			union all
			select 1 
			from ServiceJob j
			join ServiceJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 4 and j.CompanyId = @CompanyId
			union all
			select 1 
			from TutorJob j
			join TutorJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 5 and j.CompanyId = @CompanyId
		) job
	)
	begin
		update ActivityJobApply
		set DateEnded = getdate(), dateendedreasonid = @ReasonId
		where jobid = @jobid and userid = @userid and statusid = 2 and @JobTypeId = 1

		update CampusJobApply
		set DateEnded = getdate(), dateendedreasonid = @ReasonId
		where jobid = @jobid and userid = @userid and statusid = 2 and @JobTypeId = 2

		update InternJobApply
		set DateEnded = getdate(), dateendedreasonid = @ReasonId
		where jobid = @jobid and userid = @userid and statusid = 2 and @JobTypeId = 3

		update ServiceJobApply
		set DateEnded = getdate(), dateendedreasonid = @ReasonId
		where jobid = @jobid and userid = @userid and statusid = 2 and @JobTypeId = 4

		update TutorJobApply
		set DateEnded = getdate(), dateendedreasonid = @ReasonId
		where jobid = @jobid and userid = @userid and statusid = 2 and @JobTypeId = 5
	end
end
GO
/****** Object:  StoredProcedure [dbo].[api_job_update_order_line_amount]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_job_update_order_line_amount]
	@OrderLineId bigint,
	@CompanyId	bigint,
	@Amount money
as
begin
	declare @OrderId bigint, @OldAmount money
	update ol
	set ol.UpdatedAmount = @Amount,  @OrderId = ol.OrderId, @OldAmount = ol.Amount
	from OrderLine ol
	join [Order] o on o.OrderId = ol.OrderId
	where ol.OrderLineId = @OrderLineId and o.CompanyId = @CompanyId

	update o
	set UpdatedAmount = sub.Amount
	from [Order] o
	cross apply (
		select 
			sum(isnull(ol.UpdatedAmount,ol.Amount)) Amount
		from OrderLine ol
		where ol.OrderId = @OrderId
	) sub
	where o.OrderId = @OrderId
end


GO
/****** Object:  StoredProcedure [dbo].[api_job_update_sign_in]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[api_job_update_sign_in]
	@JobId	bigint,
	@JobTypeId int,
	@UserId bigint,
	@CompanyId bigint,
	@DateUpdatedSignedIn datetime,
	@DateUpdatedSignedOut datetime,
	@WageAdjusted	money,
	@Note	nvarchar(max),
	@Today date
as
begin set transaction isolation level read uncommitted	set nocount on

	if exists(select 1 
		from
		(
			select 1 Applies
			from ActivityJob j
			join ActivityJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 1 and j.CompanyId = @CompanyId
			union all
			select 1 
			from CampusJob j
			join CampusJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 2 and j.CompanyId = @CompanyId
			union all
			select 1 
			from InternJob j
			join InternJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 3 and j.CompanyId = @CompanyId
			union all
			select 1 
			from ServiceJob j
			join ServiceJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 4 and j.CompanyId = @CompanyId
			union all
			select 1 
			from TutorJob j
			join TutorJobApply a on a.JobId = j.JobId and a.UserId = @UserId and a.StatusId = 2
			where j.JobId = @JobId and @JobTypeId = 5 and j.CompanyId = @CompanyId
		) job

	)
	begin
		if not exists(select 1 from JobApplySignIn where JobId = @JobId and JobTypeId = @JobTypeId and UserId = @UserId and Date = @Today)
		begin
			insert into JobApplySignIn(Date, JobId, JobTypeId, UserId, DateUpdatedSignedIn, DateUpdatedSignedOut, WageAdjusted, Note)
			values(@Today, @jobid, @jobtypeid, @userid, @DateUpdatedSignedIn, @DateUpdatedSignedOut, @WageAdjusted, @Note)
		end	
		else
		begin
			update JobApplySignIn
			set DateUpdatedSignedIn = @DateUpdatedSignedIn,
				DateUpdatedSignedOut = @DateUpdatedSignedOut,
				WageAdjusted = @WageAdjusted,
				Note = @Note
			where date = @Today and JobId = @jobid and JobTypeId = @jobtypeid and userid = @userid
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[api_log_company_logon]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_log_company_logon]
	@CompanyId		bigint,
	@Device		nvarchar(50),
	@IPAddress	nvarchar(50),
	@Action	nvarchar(50),
	@VersionNumber	nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on
	update Company set Version = @VersionNumber where CompanyId = @CompanyId
	insert into CompanyLogonLog(CompanyId, Device, IPAddress, VersionNumber, Action)
	values(@CompanyId, @Device, @IPAddress, @VersionNumber, @Action) 
end

GO
/****** Object:  StoredProcedure [dbo].[api_log_user_logon]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_log_user_logon]
	@UserId		bigint,
	@Device		nvarchar(50),
	@IPAddress	nvarchar(50),
	@Action	nvarchar(50),
	@VersionNumber	nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on
	update [User] set Version = @VersionNumber where UserId = @UserId
	insert into UserLogonLog(UserId, Device, IPAddress, VersionNumber, Action)
	values(@UserId, @Device, @IPAddress, @VersionNumber, @Action) 

end

GO
/****** Object:  StoredProcedure [dbo].[api_order_create]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_order_create]
	@JobId	bigint,
	@JobTypeId	int,
	@CompanyId	bigint,
	@Date	date
as
begin set transaction isolation level read uncommitted	set nocount on
	
	declare @OrderId bigint = -1
	if exists(select 1 from [Order] where JobId = @JobId and JobTypeId = @JobTypeId and date = @date and datepaid is not null)
	begin
		set @OrderId = -2
		goto done
	end

	if not exists(select 1 from [Order] o where jobid = @jobid and jobtypeid = @jobtypeid and date = @date)
	begin
		insert into [Order](OrderNumber, CompanyId, JobId, JobTypeId, Title, Date, PeopleCount, Amount)
		select convert(nvarchar,@Date,112) + convert(nvarchar,j.JobId,50), j.CompanyId, j.JobId, j.JobTypeId, j.Title, @Date, 
			count(0) PeopleCount,
			sum(case when j.WageUnitId = 1 then 
					isnull(dbo.fn_calculate_minutes(isnull(DateUpdatedSignedIn,DateConfirmedSignedIn), isnull(DateUpdatedSignedOut,DateConfirmedSignedOut)) / 60.0 * j.Wage,0)
				when j.WageUnitId = 2 then case when s.SignInId is null then 0 else isnull(j.Wage,0) end
				when j.WageUnitId = 3 then 0 end + isnull(s.WageAdjusted,0)) Amount
		from view_job j
		join view_job_apply a on a.JobId = j.JobId and a.JobTypeId = j.JobTypeId and (a.DateEnded is null or a.DateEnded >= DateAdd(d,0,@Date)) and a.StatusId = 2
		left join JobApplySignIn s on s.JobId = j.JobId and s.JobtypeId = j.JobTypeId and s.Date = @date and s.UserId = a.UserId
		where j.JobId = @jobid and j.JobTypeId = @JobTypeId and j.CompanyId = @Companyid
		group by  j.CompanyId, j.JobId, j.JobTypeId, j.Title

		set @OrderId = scope_identity()
		
		insert into OrderLine(OrderId, UserId, DateFrom, DateTo, Amount)
		select @OrderId, a.UserId, isnull(DateUpdatedSignedIn,DateConfirmedSignedIn), isnull(DateUpdatedSignedOut,DateConfirmedSignedOut),
			case when j.WageUnitId = 1 then 
					isnull(dbo.fn_calculate_minutes(isnull(DateUpdatedSignedIn,DateConfirmedSignedIn), isnull(DateUpdatedSignedOut,DateConfirmedSignedOut)) / 60.0 * j.Wage,0)
				when j.WageUnitId = 2 then case when s.SignInId is null then 0 else isnull(j.Wage,0) end
				when j.WageUnitId = 3 then 0 end + isnull(s.WageAdjusted,0)
		from view_job j
		join view_job_apply a on a.JobId = j.JobId and a.JobTypeId = j.JobTypeId and (a.DateEnded is null or a.DateEnded >= DateAdd(d,0,@Date)) and a.StatusId = 2
		left join JobApplySignIn s on s.JobId = j.JobId and s.JobtypeId = j.JobTypeId and s.Date = @date and s.UserId = a.UserId
		where j.JobId = @jobid and j.JobTypeId = @JobTypeId and j.CompanyId = @Companyid
	end
	else
	begin
		if exists(select 1 from [Order] o where jobid = @jobid and jobtypeid = @jobtypeid and date = @date and datepaid is null)
		begin
			update o
			set UpdatedAmount = null, 
				PeopleCount = sub.PeopleCount,
				Amount = sub.Amount,
				@OrderId = OrderId
			from [Order] o
			cross apply (
				select 
					count(0) PeopleCount,
					sum(case when j.WageUnitId = 1 then 
					isnull(dbo.fn_calculate_minutes(isnull(DateUpdatedSignedIn,DateConfirmedSignedIn), isnull(DateUpdatedSignedOut,DateConfirmedSignedOut)) / 60.0 * j.Wage,0)
				when j.WageUnitId = 2 then case when s.SignInId is null then 0 else isnull(j.Wage,0) end
				when j.WageUnitId = 3 then 0 end + isnull(s.WageAdjusted,0)) Amount
				from view_job j
				join view_job_apply a on a.JobId = j.JobId and a.JobTypeId = j.JobTypeId and (a.DateEnded is null or a.DateEnded >= DateAdd(d,0,@Date)) and a.StatusId = 2
				left join JobApplySignIn s on s.JobId = j.JobId and s.JobtypeId = j.JobTypeId and s.Date = @date and s.UserId = a.UserId
				where j.JobId = @jobid and j.JobTypeId = @JobTypeId and j.CompanyId = @Companyid
				group by  j.CompanyId, j.JobId, j.JobTypeId
			) sub
			where o.JobId = @jobid and o.JobTypeId = @JobTypeId and o.CompanyId = @Companyid and o.Date = @Date

			delete from OrderLine where orderid = @orderId
			insert into OrderLine(OrderId, UserId, DateFrom, DateTo, Amount)
			select @OrderId, a.UserId, isnull(DateUpdatedSignedIn,DateConfirmedSignedIn), isnull(DateUpdatedSignedOut,DateConfirmedSignedOut),
				case when j.WageUnitId = 1 then 
						isnull(dbo.fn_calculate_minutes(isnull(DateUpdatedSignedIn,DateConfirmedSignedIn), isnull(DateUpdatedSignedOut,DateConfirmedSignedOut)) / 60.0 * j.Wage,0)
					when j.WageUnitId = 2 then case when s.SignInId is null then 0 else isnull(j.Wage,0) end
					when j.WageUnitId = 3 then 0 end + isnull(s.WageAdjusted,0)
			from view_job j
			join view_job_apply a on a.JobId = j.JobId and a.JobTypeId = j.JobTypeId and (a.DateEnded is null or a.DateEnded >= DateAdd(d,0,@Date)) and a.StatusId = 2
			left join JobApplySignIn s on s.JobId = j.JobId and s.JobtypeId = j.JobTypeId and s.Date = @date and s.UserId = a.UserId
			where j.JobId = @jobid and j.JobTypeId = @JobTypeId and j.CompanyId = @Companyid
		end
	end

	done:
	select @OrderId OrderId
end
GO
/****** Object:  StoredProcedure [dbo].[api_publish_activity_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_publish_activity_job]
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@PositionId	int,
	@RegionId	int,
	@WageUnitId	int,
	@Wage		money,
	@IncludeCommission	bit,
	@IncludeDinner	bit,
	@IncludeRoom	bit,
	@TermId		int,
	@Gender		int,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone nvarchar(50),
	@Address	nvarchar(255),
	@DateFrom	date,
	@DateExpiry	date,
	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
	@MonMorning	bit,
	@MonAfternoon bit,
	@MonNight	bit,
	@TueMorning	bit,
	@TueAfternoon bit,
	@TueNight	bit,
	@WedMorning	bit,
	@WedAfternoon bit,
	@WedNight	bit,
	@ThuMorning	bit,
	@ThuAfternoon bit,
	@ThuNight	bit,
	@FriMorning	bit,
	@FriAfternoon bit,
	@FriNight	bit,
	@SatMorning	bit,
	@SatAfternoon bit,
	@SatNight	bit,
	@SunMorning	bit,
	@SunAfternoon bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Verified bit,@StatusId int
	select @Verified = verified from company where companyid  = @CompanyId
	if (@Verified = 1 )
	begin
		set @StatusId = 2
	end
	else
	begin 
		set @StatusId = 1
	end
	set @Gender = isnull(@Gender,2)
	insert into ActivityJob(CompanyId, Title, JobTypeId, StatusId, PositionId, RegionId, WageUnitId, Wage, IncludeDinner, IncludeRoom, IncludeCommission, TermId, Gender, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight,JobAllocateTypeId)
	values(@CompanyId, @Title, 1, @StatusId, @PositionId, @RegionId, @WageUnitId, @Wage, @IncludeDinner, @IncludeRoom, @IncludeCommission, @TermId, @Gender, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight,5)
end



GO
/****** Object:  StoredProcedure [dbo].[api_publish_campus_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_publish_campus_job]
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@CategoryId	int,
	@SchoolId	int,
	@RegionId	int,
	@Gender		int,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone	nvarchar(50),
	@Address	nvarchar(255),
	@DateFrom	date,
	@DateExpiry	date,
	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
	@MonMorning	bit,
	@MonAfternoon bit,
	@MonNight	bit,
	@TueMorning	bit,
	@TueAfternoon bit,
	@TueNight	bit,
	@WedMorning	bit,
	@WedAfternoon bit,
	@WedNight	bit,
	@ThuMorning	bit,
	@ThuAfternoon bit,
	@ThuNight	bit,
	@FriMorning	bit,
	@FriAfternoon bit,
	@FriNight	bit,
	@SatMorning	bit,
	@SatAfternoon bit,
	@SatNight	bit,
	@SunMorning	bit,
	@SunAfternoon bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Verified bit,@StatusId int
	select @Verified = verified from company where companyid  = @CompanyId
	if (@Verified = 1 )
	begin
		set @StatusId = 2
	end
	else
	begin 
		set @StatusId = 1
	end
	set @Gender = isnull(@Gender,2)
	insert into CampusJob(CompanyId, Title, JobTypeId, StatusId, CategoryId, SchoolId, RegionId, Gender, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight,JobAllocateTypeId)
	values(@CompanyId, @Title, 2, @StatusId, @CategoryId, @SchoolId, @RegionId, @Gender, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight,5)
end



GO
/****** Object:  StoredProcedure [dbo].[api_publish_intern_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_publish_intern_job]
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@Category	int,
	@RegionId	int,
	@WageUnitId	int,
	@Wage		money,
	@IncludeCommission bit,
	@IncludeDinner	bit,
	@IncludeRoom	bit,
	@Gender		int,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone	nvarchar(50),
	@Address	nvarchar(255),
	@DateFrom	date,
	@DateExpiry	date,
	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
	@MonMorning	bit,
	@MonAfternoon bit,
	@MonNight	bit,
	@TueMorning	bit,
	@TueAfternoon bit,
	@TueNight	bit,
	@WedMorning	bit,
	@WedAfternoon bit,
	@WedNight	bit,
	@ThuMorning	bit,
	@ThuAfternoon bit,
	@ThuNight	bit,
	@FriMorning	bit,
	@FriAfternoon bit,
	@FriNight	bit,
	@SatMorning	bit,
	@SatAfternoon bit,
	@SatNight	bit,
	@SunMorning	bit,
	@SunAfternoon bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Verified bit,@StatusId int
	select @Verified = verified from company where companyid  = @CompanyId
	if (@Verified = 1 )
	begin
		set @StatusId = 2
	end
	else
	begin 
		set @StatusId = 1
	end
	set @Gender = isnull(@Gender,2)
	insert into InternJob(CompanyId, Title, JobTypeId, StatusId, CategoryId, RegionId, WageUnitId, Wage, IncludeCommission, IncludeDinner, IncludeRoom, Gender, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight,JobAllocateTypeId)
	values(@CompanyId, @Title, 3, @StatusId, @Category, @RegionId, @WageUnitId, @Wage, @IncludeCommission, @IncludeDinner, @IncludeRoom, @Gender, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight,5)
end



GO
/****** Object:  StoredProcedure [dbo].[api_publish_service_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_publish_service_job]
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@CategoryId	int,
	@PositionId	int,
	@RegionId	int,
	@WageUnitId	int,
	@Wage		money,
	@IncludeCommission bit,
	@IncludeDinner	bit,
	@IncludeRoom	bit,
	@TermId		int,
	@Gender		int,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone	nvarchar(50),
	@Address	nvarchar(255),
	@DateFrom	date,
	@DateExpiry	date,
	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
	@MonMorning	bit,
	@MonAfternoon bit,
	@MonNight	bit,
	@TueMorning	bit,
	@TueAfternoon bit,
	@TueNight	bit,
	@WedMorning	bit,
	@WedAfternoon bit,
	@WedNight	bit,
	@ThuMorning	bit,
	@ThuAfternoon bit,
	@ThuNight	bit,
	@FriMorning	bit,
	@FriAfternoon bit,
	@FriNight	bit,
	@SatMorning	bit,
	@SatAfternoon bit,
	@SatNight	bit,
	@SunMorning	bit,
	@SunAfternoon bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Verified bit,@StatusId int
	select @Verified = verified from company where companyid  = @CompanyId
	if (@Verified = 1 )
	begin
		set @StatusId = 2
	end
	else
	begin 
		set @StatusId = 1
	end
	set @Gender = isnull(@Gender,2)
	insert into ServiceJob(CompanyId, Title, JobTypeId, StatusId, CategoryId, PositionId, RegionId, WageUnitId, Wage, IncludeCommission, IncludeDinner, IncludeRoom, TermId, Gender, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight,JobAllocateTypeId)
	values(@CompanyId, @Title, 4, @StatusId, @CategoryId, @PositionId, @RegionId, @WageUnitId, @Wage, @IncludeCommission, @IncludeDinner, @IncludeRoom, @TermId, @Gender, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight,5)
end



GO
/****** Object:  StoredProcedure [dbo].[api_publish_tutor_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_publish_tutor_job]
	@CompanyId	bigint,
	@Title		nvarchar(50),
	@LevelId	int,
	@PaperId	int,
	@RegionId	int,
	@WageUnitId	int,
	@Wage		money,
	@IncludeCommission bit,
	@IncludeDinner	bit,
	@IncludeRoom	bit,
	@TermId		int,
	@Gender		int,
	@PeopleRequired	int,
	@Contact	nvarchar(50),
	@ContactPhone	nvarchar(50),
	@Address	nvarchar(255),
	@DateFrom	date,
	@DateExpiry	date,
	@WorkFrom	date,
	@WorkEnd	date,
	@Description nvarchar(max),
	@MonMorning	bit,
	@MonAfternoon bit,
	@MonNight	bit,
	@TueMorning	bit,
	@TueAfternoon bit,
	@TueNight	bit,
	@WedMorning	bit,
	@WedAfternoon bit,
	@WedNight	bit,
	@ThuMorning	bit,
	@ThuAfternoon bit,
	@ThuNight	bit,
	@FriMorning	bit,
	@FriAfternoon bit,
	@FriNight	bit,
	@SatMorning	bit,
	@SatAfternoon bit,
	@SatNight	bit,
	@SunMorning	bit,
	@SunAfternoon bit,
	@SunNight	bit
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Verified bit,@StatusId int
	select @Verified = verified from company where companyid  = @CompanyId
	if (@Verified = 1 )
	begin
		set @StatusId = 2
	end
	else
	begin 
		set @StatusId = 1
	end
	set @Gender = isnull(@Gender,2)
	insert into TutorJob(CompanyId, Title, JobTypeId, StatusId, LevelId, PaperId, RegionId, WageUnitId, Wage, IncludeCommission, IncludeDinner, IncludeRoom, TermId, Gender, PeopleRequired, Contact, ContactPhone, Address, 
		DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon,
		ThuNight, FriMorning, FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight,JobAllocateTypeId)
	values(@CompanyId, @Title, 5, @StatusId, @LevelId, @PaperId, @RegionId, @WageUnitId, @Wage, @IncludeCommission, @IncludeDinner, @IncludeRoom, @TermId, @Gender, @PeopleRequired, @Contact, @ContactPhone, @Address,
		@DateFrom, @DateExpiry, @WorkFrom, @WorkEnd, @Description, @MonMorning, @MonAfternoon, @MonNight, @TueMorning, @TueAfternoon, @TueNight, @WedMorning, @WedAfternoon, @WedNight,
		@ThuMorning, @ThuAfternoon, @ThuNight, @FriMorning, @FriAfternoon, @FriNight, @SatMorning, @SatAfternoon, @SatNight, @SunMorning, @SunAfternoon, @SunNight,5)
end



GO
/****** Object:  StoredProcedure [dbo].[api_register_company]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_register_company]
	@Mobile nvarchar(50),
	@MobileVerificationCode nvarchar(50),
	@FullName nvarchar(50),
	@Salt	nvarchar(50),
	@HashedPassword nvarchar(255),
	@Device nvarchar(50),
	@DeviceToken nvarchar(255),
	@IPAddress	nvarchar(255),
	@DownloadFromApplicationId int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @ErrorMessage nvarchar(max), @DateExpired datetime, @JsonStatus int, @RegisterId bigint, @Token nvarchar(255), @TokenExpiryDate datetime, @CompanyId bigint

	if (select count(0) from BlockMobile where mobile = @Mobile) >= 5
	begin
		select @ErrorMessage = '别猜了，验证码肯定错的', @JsonStatus = 0
		goto done;
	end

	select top 1 @DateExpired = DateExpired, @RegisterId = RegisterId from register where mobile = @Mobile and MobileVerficationCode = @MobileVerificationCode
	
	set @Token = NEWID()
	set @TokenExpiryDate = DATEADD(month,1,getdate())
	set @DownloadFromApplicationId = Nullif(@DownloadFromApplicationId,0)

	if @RegisterId is null
	begin
		select @ErrorMessage = '验证码错误', @JsonStatus = 0
		insert into BlockMobile(Mobile, IPAddress) values(@Mobile, @IPAddress) 
		goto done;
	end
	else
	begin
		if	@DateExpired < GETDATE()
		begin
			select @ErrorMessage = '验证码已过期，请返回重新验证', @JsonStatus = 0
			insert into BlockMobile(Mobile, IPAddress) values(@Mobile, @IPAddress) 
			goto done;
		end
	end

	if exists(select 1 from Company where mobile = @mobile)
	begin
		select @ErrorMessage = '该手机号已经被注册', @JsonStatus = 0
		goto done;
	end


	if isnull(@ErrorMessage,'') = ''
	begin
		update register 
		set MobileVerified = 1, DateModified = GETDATE()
		where RegisterId = @RegisterId

		insert into Company(Mobile, FullName, Salt, Password, Device, DeviceToken, Vibrate, VoiceAlert, IsLogin, DownloadFromApplicationId)
		values(@Mobile, @FullName, @Salt, @HashedPassword, @Device, @DeviceToken, 1, 1, 1, @DownloadFromApplicationId)
		set @CompanyId = SCOPE_IDENTITY()

		set @JsonStatus = 1
		insert into CompanyLogon(CompanyId, token, TokenExpiryDate, IPAddress, DateLogon)
		values(@CompanyId, @Token, @TokenExpiryDate, @IPAddress, GETDATE())
		
	end

	done:

	select @ErrorMessage ErrorMessage, @JsonStatus JsonStatus, isnull(@CompanyId,0) CompanyId, isnull(@Token,'') Token, isnull(@TokenExpiryDate,getdate()) TokenExpiryDate

end

GO
/****** Object:  StoredProcedure [dbo].[api_register_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_register_user]
	@Mobile nvarchar(50),
	@MobileVerificationCode nvarchar(50),
	@SchoolId int,
	@Salt	nvarchar(50),
	@HashedPassword nvarchar(255),
	@Device nvarchar(50),
	@DeviceToken nvarchar(255),
	@IPAddress	nvarchar(255),
	@PromoterUserId	bigint,
	@DownloadFromApplicationId int
as
begin set transaction isolation level read uncommitted	set nocount on
	begin tran
	declare @ErrorMessage nvarchar(max), @DateExpired datetime, @JsonStatus int, @RegisterId bigint, @Token nvarchar(255), @TokenExpiryDate datetime, @UserId bigint

	if (select count(0) from BlockMobile where mobile = @Mobile) >= 5
	begin
		select @ErrorMessage = '别猜了，验证码肯定错的', @JsonStatus = 0
		goto done;
	end

	select top 1 @DateExpired = DateExpired, @RegisterId = RegisterId from register where mobile = @Mobile and MobileVerficationCode = @MobileVerificationCode
	
	set @Token = NEWID()
	set @TokenExpiryDate = DATEADD(month,1,getdate())
	set @DownloadFromApplicationId = Nullif(@DownloadFromApplicationId,0)

	if @RegisterId is null
	begin
		select @ErrorMessage = '验证码错误', @JsonStatus = 0
		insert into BlockMobile(Mobile, IPAddress, PromoteCode) values(@Mobile, @IPAddress, convert(nvarchar,@PromoterUserId,50)) 
		goto done;
	end
	else
	begin
		if	@DateExpired < GETDATE()
		begin
			select @ErrorMessage = '验证码已过期，请返回重新验证', @JsonStatus = 0
			insert into BlockMobile(Mobile, IPAddress, PromoteCode) values(@Mobile, @IPAddress, convert(nvarchar,@PromoterUserId,50)) 
			goto done;
		end
	end

	if exists(select 1 from [user] where mobile = @mobile)
	begin
		select @ErrorMessage = '该手机号已经被注册', @JsonStatus = 0
		goto done;
	end


	if isnull(@ErrorMessage,'') = ''
	begin
		update register 
		set MobileVerified = 1, DateModified = GETDATE()
		where RegisterId = @RegisterId

		insert into [user](Mobile, SchoolId, Salt, Password, Device, DeviceToken, Vibrate, VoiceAlert, IsLogin, DownloadFromApplicationId)
		values(@Mobile, @SchoolId, @Salt, @HashedPassword, @Device, @DeviceToken, 1, 1, 1, @DownloadFromApplicationId)
		set @UserId = SCOPE_IDENTITY()

		set @JsonStatus = 1
		insert into userlogon(userid, token, TokenExpiryDate, IPAddress, DateLogon)
		values(@UserId, @Token, @TokenExpiryDate, @IPAddress, GETDATE())

		if exists(select 1 from [User] where UserId = @PromoterUserId) and @PromoterUserId <> @UserId
		begin
			insert into PromoterRegistration(PromoterUserId, UserId)
			values (@PromoterUserId, @UserId)
		end

		declare @DateFrom datetime, @DateTo datetime, @Bonus money, @Interval int, @Goal int
		select @DateFrom = DateFrom, @DateTo = DateTo, @Bonus = Bonus, @Interval = Interval, @Goal = Goal from event where getdate() between datefrom and dateto

		-- 活动开始
		if GETDATE() between @DateFrom and @DateTo
		begin
			exec event_push_register_user_message_by_event2 @UserId
			if nullif(@PromoterUserId,0) is not null and @PromoterUserId <> @UserId
			begin
				exec [event_push_register_promoter_user_messaeg_by_event2] @UserId
			end
		end

	end

	done:

	select isnull(@ErrorMessage,'') ErrorMessage, @JsonStatus JsonStatus, isnull(@UserId,0) UserId, isnull(@Token,'') Token, isnull(@TokenExpiryDate,getdate()) TokenExpiryDate
	commit tran
end

GO
/****** Object:  StoredProcedure [dbo].[api_remove_user_bank_account]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_remove_user_bank_account]
	@UserId		bigint,
	@AccountId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	update UserAccount 
	set DateDeleted = GETDATE()
	where userid = @userid and AccountId = @AccountId

	if not exists(select 1 from UserAccount where userid = @Userid and [default] = 1 and DateDeleted is null)
	begin
		declare @topAccountId int
		select top 1 @topAccountId = AccountId from UserAccount where userid = @userid and datedeleted is null

		update UserAccount
		set [Default] = 1
		where userid = @UserId and AccountId = @topAccountId
	end
end

GO
/****** Object:  StoredProcedure [dbo].[api_update_baidu_userid]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_update_baidu_userid]
	@Token	nvarchar(255),
	@BaiduUserId nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @CompanyId bigint, @UserId	bigint
	select @CompanyId = CompanyId from CompanyLogon where Token = @Token
	if @CompanyId is not null
	begin
		update Company 
		set BaiduUserId = nullif(@BaiduUserId,'null')
		where CompanyId = @CompanyId
	end
	else 
	begin
		select @UserId = UserId from UserLogon where Token = @Token
		if @UserId is not null
		begin
			update [User]
			set BaiduUserId = nullif(@BaiduUserId,'null')
			where UserId = @UserId
		end
	end
end

GO
/****** Object:  StoredProcedure [dbo].[api_update_company_info]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_update_company_info]
	@CompanyId		bigint,
	@Mobile		nvarchar(50),
	@FullName	nvarchar(50),
	@Address	nvarchar(50),
	@Introduction nvarchar(255)
as
begin set transaction isolation level read uncommitted	set nocount on
	update Company
	set 
		FullName = @FullName,
		Address = @Address,
		Introduction = @Introduction
	where CompanyId = @CompanyId
	exec [dbo].api_get_company_info @CompanyId
end

GO
/****** Object:  StoredProcedure [dbo].[api_update_device_token]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_update_device_token]
	@Token	nvarchar(255),
	@Device nvarchar(50),
	@DeviceToken nvarchar(255)
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @CompanyId bigint, @UserId	bigint
	select @CompanyId = CompanyId from CompanyLogon where Token = @Token
	if @CompanyId is not null
	begin
		update Company 
		set Device = @Device, DeviceToken = @DeviceToken
		where CompanyId = @CompanyId
	end
	else 
	begin
		select @UserId = UserId from UserLogon where Token = @Token
		if @UserId is not null
		begin
			update [User]
			set Device = @Device, DeviceToken = @DeviceToken
			where UserId = @UserId
		end
	end
end

GO
/****** Object:  StoredProcedure [dbo].[api_update_user_info]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_update_user_info]
	@UserId		bigint,
	@Mobile		nvarchar(50),
	@SchoolId	int,
	@FullName	nvarchar(50),
	@DateofBirth datetime,
	@Gender		int,
	@Tall		int,
	@RegionId	int,
	@QQ			nvarchar(50),
	@Email		nvarchar(50),
	@Major		nvarchar(50),
	@WorkExperience nvarchar(255)
as
begin set transaction isolation level read uncommitted	set nocount on
	update [User]
	set
		SchoolId = nullif(@SchoolId,0),
		FullName = @FullName,
		DateofBirth = @DateofBirth,
		Gender = @Gender,
		Tall = nullif(@Tall,0),
		RegionId = nullif(@RegionId,0),
		QQ = @QQ,
		Email = @Email,
		Major = @Major,
		WorkExperience = @WorkExperience
	where UserId = @UserId
	exec [dbo].[api_get_user_info] @UserId
end

GO
/****** Object:  StoredProcedure [dbo].[api_update_vibrate]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_update_vibrate]
	@Token	nvarchar(255),
	@Vibrate bit
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @CompanyId bigint, @UserId	bigint
	select @CompanyId = CompanyId from CompanyLogon where Token = @Token
	if @CompanyId is not null
	begin
		update Company 
		set Vibrate = @Vibrate
		where CompanyId = @CompanyId
	end
	else 
	begin
		select @UserId = UserId from UserLogon where Token = @Token
		if @UserId is not null
		begin
			update [User]
			set Vibrate = @Vibrate
			where UserId = @UserId
		end
	end
end

GO
/****** Object:  StoredProcedure [dbo].[api_update_voice_alert]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_update_voice_alert]
	@Token	nvarchar(255),
	@VoiceAlert bit
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @CompanyId bigint, @UserId	bigint
	select @CompanyId = CompanyId from CompanyLogon where Token = @Token
	if @CompanyId is not null
	begin
		update Company 
		set VoiceAlert = @VoiceAlert
		where CompanyId = @CompanyId
	end
	else 
	begin
		select @UserId = UserId from UserLogon where Token = @Token
		if @UserId is not null
		begin
			update [User]
			set VoiceAlert = @VoiceAlert
			where UserId = @UserId
		end
	end
end

GO
/****** Object:  StoredProcedure [dbo].[api_user_cancel_apply]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_user_cancel_apply]
	@UserId		bigint,
	@JobId		bigint,
	@JobTypeId	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @CompanyId bigint, @JobTitle nvarchar(255), @MessageId bigint, @UserName nvarchar(50), @Device nvarchar(50), @DeviceToken nvarchar(255)
	declare @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @IsLogin bit, @BaiduUserId nvarchar(50)
	if @JobTypeId = 1
	begin
		select @CompanyId = CompanyId, @JobTitle = Title from ActivityJob where JobId = @JobId
	end
	else if @JobTypeId = 2
	begin
		select @CompanyId = CompanyId, @JobTitle = Title from CampusJob where JobId = @JobId
	end
	else if @JobTypeId = 3
	begin
		select @CompanyId = CompanyId, @JobTitle = Title from InternJob where JobId = @JobId
	end
	else if @JobTypeId = 4
	begin
		select @CompanyId = CompanyId, @JobTitle = Title from ServiceJob where JobId = @JobId
	end
	else if @JobTypeId = 5
	begin
		select @CompanyId = CompanyId, @JobTitle = Title from TutorJob where JobId = @JobId
	end

	select @UserName = FullName from [User] where UserId = @UserId
	select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin from Company where CompanyId = @CompanyId

	update a
	set a.StatusId = 3
	from ActivityJobApply a
	where a.StatusId <> 2 and a.UserId = @UserId and a.JobId = @JobId and @JobTypeId = 1

	update a
	set a.StatusId = 3
	from CampusJobApply a
	where a.StatusId <> 2 and a.UserId = @UserId and a.JobId = @JobId and @JobTypeId = 2

	update a
	set a.StatusId = 3
	from InternJobApply a
	where a.StatusId <> 2 and a.UserId = @UserId and a.JobId = @JobId and @JobTypeId = 3

	update a
	set a.StatusId = 3
	from ServiceJobApply a
	where a.StatusId <> 2 and a.UserId = @UserId and a.JobId = @JobId and @JobTypeId = 4

	update a
	set a.StatusId = 3
	from TutorJobApply a
	where a.StatusId <> 2 and a.UserId = @UserId and a.JobId = @JobId and @JobTypeId = 5

	insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
	values(@UserId, @CompanyId, @JobId, @JobTypeId, '[报名] '+ISNULL(@UserName,'')+'取消了申请', 5, 0)
	set @MessageId = SCOPE_IDENTITY()

	if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
	begin
		update Company
		set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
		where CompanyId = @CompanyId

		insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
		values(@MessageId, '取消申请', 5, '[报名] '+ISNULL(@UserName,'')+'取消了申请', @JobTitle, @UserId, @CompanyId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
	end
end



GO
/****** Object:  StoredProcedure [dbo].[api_user_cash_out]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_user_cash_out]
	@UserId		bigint,
	@AccountId		bigint,
	@Amount		money
as
begin set nocount on
begin tran
	declare @Balance money = 0, @FrozenBalance money = 0, @Status int, @ErrorMessage nvarchar(50)
	select @Balance = Balance, @FrozenBalance = FrozenBalance from [User] where UserId = @UserId

	-- 对于老接口，会传入0或NULL bankid， 就调用USERBANK表的这个账户
	if isnull(@AccountId,0) = 0 
	begin
		select @Status = 0, @ErrorMessage = '请选择收款账号'
	end
	else
	begin
		update UserAccount set [Default] = 1 where userid = @UserId and AccountId = @AccountId
		update UserAccount set [Default] = 0 where userid = @UserId and AccountId <> @AccountId

		if @Amount > 0
		begin
			-- 本来就有余额够提，让他提
			if @Balance >= @Amount
			begin
				insert into UserCashOut(UserId, AccountId, Amount, Balance, StatusId)
				values(@UserId, @AccountId, @Amount, @Balance, 1)
			
				update [User]
				set Balance = Balance - @Amount
				where UserId = @UserId

				set @Balance = @Balance - @Amount
				select @Status = 1
			end
			else
			begin
				select @Status = 0, @ErrorMessage = '您的资金余额不足'
			end
		end
	end

	select @Balance Balance, isnull(@Status,0) Status, isnull(@ErrorMessage,'') ErrorMessage
	commit tran
end


GO
/****** Object:  StoredProcedure [dbo].[api_user_cash_out_bak]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_user_cash_out_bak]
	@UserId		bigint,
	@AccountId		bigint,
	@Amount		money
as
begin set transaction isolation level read uncommitted	set nocount on
begin tran
	declare @Balance money = 0, @FrozenBalance money = 0, @Status int, @ErrorMessage nvarchar(50)
	select @Balance = Balance, @FrozenBalance = FrozenBalance from [User] where UserId = @UserId

	-- 对于老接口，会传入0或NULL bankid， 就调用USERBANK表的这个账户
	if isnull(@AccountId,0) = 0 
	begin
		select top 1 @AccountId = AccountId from UserAccount where userid = @Userid and DateDeleted is null order by [Default] desc
	end

	update UserAccount set [Default] = 0 where userid = @UserId
	update UserAccount set [Default] = 1 where userid = @UserId and AccountId = @AccountId

	if @Amount > 0
	begin
		-- 本来就有余额够提，让他提
		if @Balance >= @Amount
		begin
			insert into UserCashOut(UserId, AccountId, Amount, Balance, StatusId)
			values(@UserId, @AccountId, @Amount, @Balance, 1)
			
			update [User]
			set Balance = Balance - @Amount
			where UserId = @UserId

			set @Balance = @Balance - @Amount
			select @Status = 1
		end
		else
		-- 不够提的话, 看看是否有活动
		begin
			declare @DateFrom datetime, @DateTo datetime, @Bonus money, @Interval int, @Goal int, @Name nvarchar(50) = '疯狂推广计划'
			select @DateFrom = DateFrom, @DateTo = DateTo, @Bonus = Bonus, @Interval = Interval, @Goal = Goal from setting where name = @Name

			-- 活动开始
			if GETDATE() between @DateFrom and @DateTo
			begin
				-- 判断是否满足活动提现要求
				-- 查询第一个邀请用户时间起 开始计时
				declare @count int = 0
				declare @FirstUserDate datetime
				select top 1 @FirstUserDate = DateCreated from PromoterRegistration where promoteruserid = @Userid and datecreated > @DateFrom order by DateCreated
				if @FirstUserDate is not null
				begin
					select @count = count(0) from PromoterRegistration where promoteruserid = @Userid and DateCreated between @FirstUserDate and DateAdd(hour,@Interval,@FirstUserDate)

					if @count >= @Goal
					begin
						-- 成功提现 -- 先进行充值，备注 活动充值

						select @Balance = Balance from [User] where UserId = @UserId
						update [user] set balance = @Balance + @Bonus, FrozenBalance = 0 where userid = @UserId
						insert into UserCashIn(UserId, Amount, Balance, Note) values(@UserId, @Bonus, @Balance + @Bonus, @Name)

						if @Balance + @Bonus >= @Amount
						begin
							insert into UserCashOut(UserId, AccountId, Amount, Balance, StatusId)
							values(@UserId, @AccountId, @Amount, @Balance + @Bonus, 1)
			
							update [User]
							set Balance = Balance - @Amount
							where UserId = @UserId

							set @Balance = @Balance + @Bonus - @Amount
							select @Status = 1
						end
						else
						begin
							select @Status = 0, @ErrorMessage = '您的资金余额不足'
						end
					end
					else
					begin
						-- 如果已经超过1小时，则不用再玩了
						if getdate() between @FirstUserDate and DateAdd(hour,@Interval,@FirstUserDate)
						begin
							select @Status = 0, @ErrorMessage = '再加把劲 还需邀请 '+convert(varchar(50),@Goal-@count)+' 位新用户就能成功提现'
						end
						else
						begin
							select @Status = 0, @ErrorMessage = '亲，你的活动已经结束了，请等待下次机会'
						end
					end
				end
				else
				begin	
					select @Status = 0, @ErrorMessage = '再加把劲 还需邀请 '+convert(varchar(50),@Goal-@count)+' 位新用户就能成功提现'
				end
			end
			else
			begin
				-- 活动已经结束，判断之前是否参与活动
				if (select FrozenBalance from [user] where userid = @userid) > 0
				begin
					select @Status = 0, @ErrorMessage = '您的资金余额不足,活动已经结束'
				end
				else
				begin
					select @Status = 0, @ErrorMessage = '您的资金余额不足'
				end
			end
		end
	end

	select @Balance Balance, isnull(@Status,0) Status, isnull(@ErrorMessage,'') ErrorMessage
	commit tran
end


GO
/****** Object:  StoredProcedure [dbo].[api_user_change_password]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_user_change_password]
	@UserId		bigint,
	@OldPassword nvarchar(50),
	@NewPassword nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on
	update [User]
	set Password = @NewPassword
	where UserId = @UserId and Password = @OldPassword

end

GO
/****** Object:  StoredProcedure [dbo].[api_user_job_apply]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_user_job_apply]
	@UserId		bigint,
	@JobId		bigint,
	@JobTypeId	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Message nvarchar(255), @CompanyId bigint, @JobTitle nvarchar(255), @MessageId bigint, @UserName nvarchar(50), @Device nvarchar(50), @DeviceToken nvarchar(255)
	declare @VoiceAlert bit, @Vibrate bit, @NotificationCount int, @IsLogin bit, @BaiduUserId nvarchar(50)
	declare @AlertType nvarchar(50) 
	
	if exists(select 1 
		from
		(
			select 1 Applies
			from ActivityJob
			where JobId = @JobId and @JobTypeId = 1 and Reptile = 1 
			union all
			select 1 
			from CampusJob
			where JobId = @JobId and @JobTypeId = 2 and Reptile = 1 
			union all
			select 1 
			from InternJob
			where JobId = @JobId and @JobTypeId = 3 and Reptile = 1 
			union all
			select 1 
			from ServiceJob
			where JobId = @JobId and @JobTypeId = 4 and Reptile = 1 
			union all
			select 1 
			from TutorJob
			where JobId = @JobId and @JobTypeId = 5 and Reptile = 1 
		) job
	)
	begin
		select @Message = '请电话咨询', @AlertType = '4'
		goto done
	end

	if exists(select 1 
		from
		(
			select 1 Applies
			from ActivityJobApply
			where UserId = @UserId and JobId = @JobId and StatusId <> 3 and StatusId <> 4 and @JobTypeId = 1
			union all
			select 1 
			from CampusJobApply
			where UserId = @UserId and JobId = @JobId and StatusId <> 3 and StatusId <> 4 and @JobTypeId = 2
			union all
			select 1 
			from InternJobApply
			where UserId = @UserId and JobId = @JobId and StatusId <> 3 and StatusId <> 4 and @JobTypeId = 3
			union all
			select 1 
			from ServiceJobApply
			where UserId = @UserId and JobId = @JobId and StatusId <> 3 and StatusId <> 4 and @JobTypeId = 4
			union all
			select 1 
			from TutorJobApply
			where UserId = @UserId and JobId = @JobId and StatusId <> 3 and StatusId <> 4 and @JobTypeId = 5
		) applies
	)
	begin
		select @Message = '已申请过该岗位', @AlertType = '1'
		goto done
	end

	
	if exists(select 1 
		from
		(
			select 1 Applies
			from ActivityJob
			where JobId = @JobId and DateExpiry < dateadd(d,0,datediff(d,0,GETDATE())) and @JobTypeId = 1
			union all
			select 1 
			from CampusJob
			where JobId = @JobId and DateExpiry < dateadd(d,0,datediff(d,0,GETDATE())) and @JobTypeId = 2
			union all
			select 1 
			from InternJob
			where JobId = @JobId and DateExpiry < dateadd(d,0,datediff(d,0,GETDATE())) and @JobTypeId = 3
			union all
			select 1 
			from ServiceJob
			where JobId = @JobId and DateExpiry < dateadd(d,0,datediff(d,0,GETDATE())) and @JobTypeId = 4
			union all
			select 1 
			from TutorJob
			where JobId = @JobId and DateExpiry < dateadd(d,0,datediff(d,0,GETDATE())) and @JobTypeId = 5
		) applies
	)
	begin
		select @Message = '该岗位已经下架', @AlertType = '5'
		goto done
	end

	if exists(
		select 1 
		from [User]
		where UserId = @UserId and
			(Gender is null or RegionId is null or FullName is null)
	)
	begin
		select @Message = '完善你的信息，让我们更好的了解你', @AlertType = '2'
		goto done
	end
	else if 
	(
		select COUNT(0) Applies
		from
		(
			select 1 Applies
			from ActivityJobApply
			where UserId = @UserId and StatusId = 1
			union all
			select 1 
			from CampusJobApply
			where UserId = @UserId and StatusId = 1
			union all
			select 1 
			from InternJobApply
			where UserId = @UserId and StatusId = 1
			union all
			select 1 
			from ServiceJobApply
			where UserId = @UserId and StatusId = 1
			union all
			select 1 
			from TutorJobApply
			where UserId = @UserId and StatusId = 1
		) applies
	) >= 10
	begin
		select @Message = '已达到申请的上限啦，请先取消之前的申请', @AlertType = '3'
		goto done
	end

	done:  

	

	if isnull(@Message,'') = ''
	begin
		if	@JobTypeId = 1
		begin
			select @CompanyId = CompanyId, @JobTitle = Title from ActivityJob where JobId = @JobId
			select @UserName = FullName from [User] where UserId = @UserId
			select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin from Company where CompanyId = @CompanyId

			if exists(select 1 from ActivityJobApply where JobId = @JobId and UserId = @UserId)
			begin
				update ActivityJobApply set StatusId = 1 where JobId = @JobId and UserId = @UserId
			end
			else
			begin
				insert into ActivityJobApply(JobId, UserId, StatusId)
				values(@JobId, @UserId, 1)
			end

			insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
			values(@UserId, @CompanyId, @JobId, @JobTypeId, '[报名] '+ISNULL(@UserName,'')+'申请了岗位', 3, 0)
			set @MessageId = SCOPE_IDENTITY()

			if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
			begin
				update Company
				set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
				where CompanyId = @CompanyId

				insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
				values(@MessageId, '已申请', 3, '[报名] '+ISNULL(@UserName,'')+'申请了岗位', @JobTitle, @UserId, @CompanyId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
			end
		end
		else if @JobTypeId = 2
		begin
			select @CompanyId = CompanyId, @JobTitle = Title from CampusJob where JobId = @JobId
			select @UserName = FullName from [User] where UserId = @UserId
			select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin  from Company where CompanyId = @CompanyId

			if exists(select 1 from CampusJobApply where JobId = @JobId and UserId = @UserId)
			begin
				update CampusJobApply set StatusId = 1 where JobId = @JobId and UserId = @UserId
			end
			else
			begin
				insert into CampusJobApply(JobId, UserId, StatusId)
				values(@JobId, @UserId, 1)
			end

			insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
			values(@UserId, @CompanyId, @JobId, @JobTypeId, '[报名] '+ISNULL(@UserName,'')+'申请了岗位', 3, 0)
			set @MessageId = SCOPE_IDENTITY()
			if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
			begin
				update Company
				set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
				where CompanyId = @CompanyId

				insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
				values(@MessageId, '已申请', 3, '[报名] '+ISNULL(@UserName,'')+'申请了岗位', @JobTitle, @UserId, @CompanyId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
			end
		end
		else if @JobTypeId = 3
		begin
			select @CompanyId = CompanyId, @JobTitle = Title from InternJob where JobId = @JobId
			select @UserName = FullName from [User] where UserId = @UserId
			select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin  from Company where CompanyId = @CompanyId

			if exists(select 1 from InternJobApply where JobId = @JobId and UserId = @UserId)
			begin
				update InternJobApply set StatusId = 1 where JobId = @JobId and UserId = @UserId
			end
			else
			begin
				insert into InternJobApply(JobId, UserId, StatusId)
				values(@JobId, @UserId, 1)
			end

			insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
			values(@UserId, @CompanyId, @JobId, @JobTypeId, '[报名] '+ISNULL(@UserName,'')+'申请了岗位', 3, 0)
			set @MessageId = SCOPE_IDENTITY()
			if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
			begin
				update Company
				set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
				where CompanyId = @CompanyId

				insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
				values(@MessageId, '已申请', 3, '[报名] '+ISNULL(@UserName,'')+'申请了岗位', @JobTitle, @UserId, @CompanyId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
			end
		end
		else if @JobTypeId = 4
		begin
			select @CompanyId = CompanyId, @JobTitle = Title from ServiceJob where JobId = @JobId
			select @UserName = FullName from [User] where UserId = @UserId
			select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin  from Company where CompanyId = @CompanyId

			if exists(select 1 from ServiceJobApply where JobId = @JobId and UserId = @UserId)
			begin
				update ServiceJobApply set StatusId = 1 where JobId = @JobId and UserId = @UserId
			end
			else
			begin
				insert into ServiceJobApply(JobId, UserId, StatusId)
				values(@JobId, @UserId, 1)
			end

			insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
			values(@UserId, @CompanyId, @JobId, @JobTypeId, '[报名] '+ISNULL(@UserName,'')+'申请了岗位', 3, 0)
			set @MessageId = SCOPE_IDENTITY()
			if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
			begin
				update Company
				set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
				where CompanyId = @CompanyId

				insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
				values(@MessageId, '已申请', 3, '[报名] '+ISNULL(@UserName,'')+'申请了岗位', @JobTitle, @UserId, @CompanyId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
			end
		end
		else if @JobTypeId = 5
		begin
			select @CompanyId = CompanyId, @JobTitle = Title from TutorJob where JobId = @JobId
			select @UserName = FullName from [User] where UserId = @UserId
			select @Device = Device, @DeviceToken = DeviceToken, @BaiduUserId = BaiduUserId, @VoiceAlert = VoiceAlert, @Vibrate = Vibrate, @NotificationCount = NotificationCount + 1, @IsLogin = IsLogin  from Company where CompanyId = @CompanyId

			if exists(select 1 from TutorJobApply where JobId = @JobId and UserId = @UserId)
			begin
				update TutorJobApply set StatusId = 1 where JobId = @JobId and UserId = @UserId
			end
			else
			begin
				insert into TutorJobApply(JobId, UserId, StatusId)
				values(@JobId, @UserId, 1)
			end

			insert into Message(SendingId, TargetId, JobId, JobTypeId, Message, MessageTypeId, [Read])
			values(@UserId, @CompanyId, @JobId, @JobTypeId, '[报名] '+ISNULL(@UserName,'')+'申请了岗位', 3, 0)
			set @MessageId = SCOPE_IDENTITY()
			if ((@Device = 'IOS' and ISNULL(@DeviceToken,'')<>'') or (@Device = 'Android' and isnull(@BaiduUserId,'') <> '')) and @IsLogin = 1
			begin
				update Company
				set @NotificationCount = NotificationCount + 1, NotificationCount = NotificationCount + 1 
				where CompanyId = @CompanyId

				insert into Notification(MessageId, MessageType, MessageTypeId, Message, MessageTitle, SendingId, TargetId, JobId, JobTypeId, Device, DeviceToken, BaiduUserId, VoiceAlert, Vibrate, NotificationCount)
				values(@MessageId, '已申请', 3, '[报名] '+ISNULL(@UserName,'')+'申请了岗位', @JobTitle, @UserId, @CompanyId, @JobId, @JobTypeId, @Device, @DeviceToken, @BaiduUserId, @VoiceAlert, @Vibrate, @NotificationCount)
			end
		end
	end
	select isnull(@Message,'') Message, isnull(@AlertType,'0') AlertType
end



GO
/****** Object:  StoredProcedure [dbo].[api_user_job_complain]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_user_job_complain]
	@UserId		bigint,
	@JobId		bigint,
	@ComplainStatusId	int,
	@JobTypeId	int,
	@Description	nvarchar(255)
as
begin set transaction isolation level read uncommitted	set nocount on
	if	@JobTypeId = 1
	begin
		insert into ActivityJobComplain(JobId, UserId, StatusId, Description)
		values(@JobId, @UserId, @ComplainStatusId, @Description)
	end
	else if @JobTypeId = 2
	begin
		insert into CampusJobComplain(JobId, UserId, StatusId, Description)
		values(@JobId, @UserId, @ComplainStatusId, @Description)
	end
	else if @JobTypeId = 3
	begin
		insert into InternJobComplain(JobId, UserId, StatusId, Description)
		values(@JobId, @UserId, @ComplainStatusId, @Description)
	end
	else if @JobTypeId = 4
	begin
		insert into ServiceJobComplain(JobId, UserId, StatusId, Description)
		values(@JobId, @UserId, @ComplainStatusId, @Description)
	end
	else if @JobTypeId = 5
	begin
		insert into TutorJobComplain(JobId, UserId, StatusId, Description)
		values(@JobId, @UserId, @ComplainStatusId, @Description)
	end
end



GO
/****** Object:  StoredProcedure [dbo].[api_user_login]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[api_user_login]
	@UserId	bigint,
	@Mobile nvarchar(50),
	@Device nvarchar(50),
	@DeviceToken nvarchar(255),
	@IPAddress	nvarchar(255),
	@DownloadFromApplicationId int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @DateExpired datetime, @RegisterId bigint, @Token nvarchar(255), @TokenExpiryDate datetime

	set @Token = NEWID()
	set @TokenExpiryDate = DATEADD(month,1,getdate())
	set @DownloadFromApplicationId = Nullif(@DownloadFromApplicationId,0)
	
	update [User]
	set DeviceToken = @DeviceToken,
		Device = @Device,
		DownloadFromApplicationId = @DownloadFromApplicationId,
		IsLogin = 1
	where userid = @userid

	if exists(select 1 from UserLogon where UserId = @UserId)
	begin
		update UserLogon
		set Token = @Token,
		TokenExpiryDate = @TokenExpiryDate,
		DateLogon = GETDATE(),
		IPAddress = @IPAddress
		where userid = @UserId
	end
	else
	begin
		insert into UserLogon(UserId, Token, TokenExpiryDate, DateLogon, IPAddress)
		values(@UserId, @Token, @TokenExpiryDate, GETDATE(), @IPAddress)
	end

	select @Token Token, @TokenExpiryDate TokenExpiryDate

end

GO
/****** Object:  StoredProcedure [dbo].[event_get_register_user_count_by_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[event_get_register_user_count_by_user]
	@UserId	bigint
as
begin
	declare @PromoterUserId bigint, @Date nvarchar(50), @RegisterUserId bigint, @Mobile nvarchar(50), @number int
	--select @PromoterUserId = PromoterUserId from PromoterRegistration where userId = @UserId
	set @PromoterUserId =  @UserId
	--if not exists(select 1 from [EventLog] where userid = @PromoterUserId and EventId = 1) return

	declare @DateFrom datetime, @DateTo datetime, @Bonus money, @Interval int, @Goal int
	select @DateFrom = DateFrom, @DateTo = DateTo, @Bonus = Bonus, @Interval = Interval, @Goal = Goal from setting where name = '疯狂推广计划'
	declare @FirstUserDate datetime
	select top 1 @FirstUserDate = DateCreated from PromoterRegistration where promoteruserid = @PromoterUserId and datecreated > @DateFrom order by DateCreated

	
	select u.UserId,  left(convert(nvarchar,u.DateCreated,120),16) DateCreated, isnull(left(us.Mobile,3)+'****' + Right(us.Mobile,4),'') Mobile ,row_number() over (order by u.DateCreated Desc ) RowNumber ,left(convert(nvarchar,DateAdd(hour,@Interval,@FirstUserDate),120),16)  EventStopDate , @FirstUserDate FirstUserDate
	from PromoterRegistration u
	join [User] us on us.UserId = u.UserId
	where PromoterUserId = @PromoterUserId and u.DateCreated between @FirstUserDate and DateAdd(hour,@Interval,@FirstUserDate)

	
	
end

GO
/****** Object:  StoredProcedure [dbo].[event_push_register_message_by_region_or_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[event_push_register_message_by_region_or_user]
	@UserId	bigint
as
begin
	declare @content nvarchar(max)
	declare @DateFrom datetime, @DateTo datetime, @Bonus money, @Interval int, @Goal int
	select @DateFrom = DateFrom, @DateTo = DateTo, @Bonus = Bonus, @Interval = Interval, @Goal = Goal from event where getdate() between datefrom and dateto

	update [user] set frozenbalance = @Bonus where userid = @UserId
	select @content = '仅需3步即可获取'+convert(nvarchar(50),@Bonus)+'元红包（可点击首页banner查看并分享）

◆ 邀请好友注册淘兼职APP
◆ 注册时填写你的推荐码：'+convert(nvarchar(50),@UserId)+'
◆ 进【管理-我的钱包】提现你的红包

---------------  活动规则  ----------------
★ 本活动仅支持淘兼职个人用户参与，请将软件升级到最新版本
★ 活动于 '+right(left(convert(nvarchar,@DateFrom,120),16),11)+' 至 '+right(left(convert(nvarchar,@DateTo,120),16),11)+' 
★ 有效新用户指在注册时填写你的推荐码
★ 从活动开始日起,你即可获得'+convert(nvarchar(50),@Bonus)+'元现金红包,首个注册用户起1小时内,成功邀请'+convert(nvarchar(50),@Goal)+'位新用户,就能解冻红包并提现'

	exec [admin_system_message_push_user] @AdminId=1,@UserId=@UserId,@Message='[找到新伙伴 动手赚外快]',@Content=@content
end

GO
/****** Object:  StoredProcedure [dbo].[event_push_register_notify_message_by_region_or_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[event_push_register_notify_message_by_region_or_user]
	@UserId	bigint
as
begin
	declare @PromoterUserId bigint, @Date nvarchar(50), @RegisterUserId bigint, @Mobile nvarchar(50), @number int
	select @PromoterUserId = PromoterUserId from PromoterRegistration where userid = @UserId
	
	if not exists(select 1 from [EventLog] where userid = @PromoterUserId and EventId = 1) return

	declare @DateFrom datetime, @DateTo datetime, @Bonus money, @Interval int, @Goal int
	select @DateFrom = DateFrom, @DateTo = DateTo, @Bonus = Bonus, @Interval = Interval, @Goal = Goal from event where getdate() between datefrom and dateto
	declare @FirstUserDate datetime
	select top 1 @FirstUserDate = DateCreated from PromoterRegistration where promoteruserid = @PromoterUserId and datecreated > @DateFrom order by DateCreated

	declare cur_user cursor for 
	select u.UserId,  left(convert(nvarchar,u.DateCreated,120),16), isnull(left(us.Mobile,3)+'****' + Right(us.Mobile,4),'')
	from PromoterRegistration u
	join [User] us on us.UserId = u.UserId
	where PromoterUserId = @PromoterUserId and u.DateCreated between @FirstUserDate and DateAdd(hour,@Interval,@FirstUserDate)

	select @number = count(0) from PromoterRegistration where PromoterUserId = @PromoterUserId and DateCreated between @FirstUserDate and DateAdd(hour,@Interval,@FirstUserDate)

	declare @content nvarchar(max), @count int=0

	if @number < @Goal
	begin
		if getdate() between @FirstUserDate and DateAdd(hour,@Interval,@FirstUserDate)
		begin
			select @content = '★ 活动结束时间为 '+left(convert(nvarchar,DateAdd(hour,@Interval,@FirstUserDate),120),16)+'
★ 只差 '+ convert(nvarchar(50),@Goal-@number) +' 位新伙伴！加油！！

-----------  我的邀请进度  ------------

'
		end
	end
	else
	begin
		select @content = '★ 成功找到 ' +convert(nvarchar(50),@number)+' 位新伙伴！
★ 快去【我的钱包】中提现你的现金红包吧！

-----------  我的邀请进度  ------------

'	end

	open cur_user
	fetch next from cur_user into @RegisterUserId, @Date, @Mobile
	while @@FETCH_STATUS = 0
	begin
		select @content = @content + ' '+ @Mobile + '   ' + @Date  + '   ' + convert(nvarchar(50),@count+1) + '
'
		set @count = @count + 1
		fetch next from cur_user into @RegisterUserId, @Date, @Mobile
	end
	close cur_user
	deallocate cur_user

	select @content = @content + '
------------------------------------------'
	
	if @number < @Goal
	begin
		if getdate() between @FirstUserDate and DateAdd(hour,@Interval,@FirstUserDate)
		begin
			exec [admin_system_message_push_user] @AdminId=1,@UserId=@PromoterUserId,@Message='[新伙伴注册汇报]',@Content=@content
		end
	end
	else
	begin
	
		if not exists(select 1 from [dbo].[EventLog] where userid = @PromoterUserId and EventId = 1 and Finished = 1)
		begin
			exec [admin_system_message_push_user] @AdminId=1,@UserId=@PromoterUserId,@Message='[新伙伴注册汇报]',@Content=@content
			update [EventLog] set Finished = 1 where userid = @PromoterUserId and EventId = 1
		end
		else
		begin
			declare @SystemMessageId int
			select top 1 @SystemMessageId = SystemMessageId from Message where TargetId = @PromoterUserId and MessageTypeId = 1 and SendingId = 0 order by MessageId desc
			update SystemMessage set Content = @Content where SystemMessageId = @SystemMessageId
		end
	end
end

GO
/****** Object:  StoredProcedure [dbo].[event_push_register_promoter_user_messaeg_by_event2]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[event_push_register_promoter_user_messaeg_by_event2]
	@UserId	bigint
as
begin
	declare @PromoterUserId bigint, @Date nvarchar(50), @RegisterUserId bigint, @Mobile nvarchar(50), @number int
	select @PromoterUserId = PromoterUserId from PromoterRegistration where userid = @UserId

	declare @DateFrom datetime, @DateTo datetime, @Bonus money, @Interval int, @Goal int, @Name nvarchar(50)
	select @DateFrom = DateFrom, @DateTo = DateTo, @Bonus = Bonus, @Interval = Interval, @Goal = Goal, @Name = Name from event where getdate() between datefrom and dateto

	-- 如果不是推广人员推的, 可以参加活动
	if not exists(select 1 from PromoterTeamMemberLog where UserId = @PromoterUserId) and getdate() between @DateFrom and @DateTo
	begin
		declare @TopLogId bigint, @amount money = 0
		select top 1 @TopLogId = LogId, @amount = bonus from EventLog where EventId = 2 and bonus > 0 order by LogId desc
		declare @TopLogId2 bigint , @amount2 money = 0
		select top 1 @TopLogId2 = LogId, @amount2 = bonus from EventLog where EventId = 2 and bonus > 0 and LogId <> @TopLogId order by LogId desc

		declare @awards money = 0, @LogId bigint, @Balance money
		select @mobile = isnull(left(Mobile,3)+'****' + Right(Mobile,4),'') from [user] where userid = @userid
		select @Balance = balance from [user] where userid = @PromoterUserId
		insert into EventLog(UserId, EventId, Finished, Bonus) values(@PromoterUserId, 2, 0, 0)
		set @LogId = scope_identity()

		-- 刚好第9个的时候，奖励9元-之前的奖励
		if @LogId % 9 = 0 and @amount > 0 and @amount2 > 0
		begin
			set @awards = @Bonus-@amount-@amount2
			update EventLog set Bonus = @awards where logid = @LogId
		end
		-- 刚好第6个的时候，奖励2-9元
		else if @LogId % 6 = 0 and @amount > 0
		begin
			set @awards = rand() * (@Bonus-@amount-2-2) + 2
			update EventLog set Bonus = @awards where logid = @LogId
		end
		-- 刚好第3个的时候，奖励2-9元
		else if @LogId % 3 = 0
		begin
			set @awards = rand() * (@Bonus-2-2-2) + 2
			update EventLog set Bonus = @awards where logid = @LogId
		end
		
		declare @content nvarchar(max)

		if @awards > 0
		begin
			insert into UserCashIn(UserId, Amount, Balance, Note) values(@PromoterUserId, @awards, @Balance + @awards, @Name)
			update [user] set balance = balance + @awards where userid = @PromoterUserId
			select @content = '◆'+@mobile+'注册成功,恭喜你获得 '+convert(nvarchar(50),@awards)+' 元红包奖励

◆请到【我的钱包-余额提现】中领取红包
◆请继续加油哦!更多红包等着你!!'
			exec [admin_system_message_push_user] @AdminId=1,@UserId=@PromoterUserId,@Message='[红包来啦!!!]',@Content=@content
		end
		else
		begin
			select @content = '◆'+@mobile+'注册成功,很遗憾本次没获得红包

◆请继续加油哦!再邀请一下下,红包马上就来啦!!'
			exec [admin_system_message_push_user] @AdminId=1,@UserId=@PromoterUserId,@Message='[再接再励]',@Content=@content
		end
	end
end

GO
/****** Object:  StoredProcedure [dbo].[event_push_register_user_message_by_event2]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[event_push_register_user_message_by_event2]
	@UserId	bigint
as
begin
	declare @content nvarchar(max)
	declare @DateFrom datetime, @DateTo datetime, @Bonus money, @Interval int, @Goal int
	select @DateFrom = DateFrom, @DateTo = DateTo, @Bonus = Bonus, @Interval = Interval, @Goal = Goal from event where getdate() between datefrom and dateto
	if getdate() between @DateFrom and @DateTo
	begin
		select @content = '◆邀请好友注册淘兼职APP
◆注册时填写你的推荐码: '+convert(nvarchar(50),@UserId)+'
◆你将有机会获得2~9元不等的红包奖励
◆红包将存入【我的钱包-账户余额】中

★偷偷的告诉你,每3个人中就会有1个人中奖哦~'

		exec [admin_system_message_push_user] @AdminId=1,@UserId=@UserId,@Message='[邀请好友,可领红包]',@Content=@content
	end
end

GO
/****** Object:  StoredProcedure [dbo].[job_backup_all]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_backup_all]
as
begin set transaction isolation level read uncommitted	set nocount on
	-- loop each values list
	declare @sql nvarchar(max)

	set @sql = 'exec Test.dbo.job_backup_daily'
	exec(@sql)
		
	if datepart(d,getdate()) = 1
	begin
		set @sql = 'exec Test.dbo.job_backup_monthly'
		exec(@sql)
	end

	set @sql = 'exec [Test.Stats].dbo.job_backup_daily'
	exec(@sql)
		
	if datepart(d,getdate()) = 1
	begin
		set @sql = 'exec [Test.Stats].dbo.job_backup_monthly'
		exec(@sql)
	end
end	



GO
/****** Object:  StoredProcedure [dbo].[job_backup_daily]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_backup_daily]
as
begin set transaction isolation level read uncommitted	set nocount on
	set datefirst 1
	-- do backup
	declare @file_name nvarchar(255)
	-- set @file_name = 'tmall_' + convert(nvarchar,dateadd(d,-1,getdate()),112) + '.bak'
	set @file_name = db_name() + '_d_' + convert(nvarchar,datepart(dw,dateadd(d,-1,getdate()))) + '.bak'
	
	declare @name nvarchar(255)
	set @name = db_name() + N'-d-Full Database Backup'
	
	declare @db_name nvarchar(50) = db_name()
	backup database @db_name
	to disk = @file_name
	with noformat, init, skip, norewind, nounload, stats = 10, name = @name
	
	/*
	You can see how these options map back to the dialog box. The NOINIT clause is what says to append the backup to the existing backup file. The other option is INIT which will overwrite the backup file. The BACKUP statement will create a single file with a BAK extension that contains what is in your data file and log file. You can backup the database while SQL Server is running and people can still use the database. It might be a little bit slower depending on your disk throughput.
	Restoring a database is a little more complicated. Right-clicking on Databases in SSMS bring up a dialog box like this:
	I've already changed the database name to AdventureWorksNew. I clicked the From Device radio button and navigated to my backup file. If you're restoring on the same computer where the original database resides you can just leave the From Database radio button selected and choose the database. It will automatically select the backup. Clicking on the options tab brings us to the second part of the dialog:
	Notice that it wants to restore the two file names right on top of the file names for AdventureWorks. SQL Server won't actually let you do that unless you check the "Overwrite the existing database" checkbox above. You'll need to edit those filenames to change the name. If I script this statement out it gives me this:

	RESTORE DATABASE [AdventureWorksNew] 
		FROM  DISK = N'\\nas\Backup\L40\SQL2005\AdventureWorks_backup_200702120215.bak' 
		WITH  FILE = 1,  
		MOVE N'AdventureWorks_Data' TO N'C:\Data\MSSQL.1\MSSQL\Data\AdventureWorksNew_Data.mdf',  
		MOVE N'AdventureWorks_Log' TO N'C:\Data\MSSQL.1\MSSQL\Data\AdventureWorksNew_Log.ldf',  
		NOUNLOAD,  STATS = 10Notice the MOVE commands have the new file name that I typed in.
	One thing to be aware of is the SQL Server Recovery Model. If you right-click on a database and choose Properties and then click the Options tab you'll see the recovery model as the second item listed. The two main settings for this are Simple and Full. In Simple Recovery SQL Server doesn't keep transactions in the transaction log that have already been "hardened" to disk. They are automatically removed and the space in the file is reused. In Full Recovery mode SQL Server keeps every transaction in the transaction log file until you explicitly backup the transaction log. Simple Recovery mode is better for developers or servers that are only backed up nightly. In Full Recovery mode you'll need to do transaction log backups which I'll cover in a future article. If you see your database growing larger and larger the most likely cause is a growing transaction log. To resolve this, change the recovery model to Simple, backup the database and then shrink the database. You can shrink the database by right-clicking on the database and choosing Tasks -> Shrink -> Database and then clicking OK.
	When you create a database, SQL Server starts with a copy of the "model" database. If you set the Recovery Model of the "model" database to Simple all future databases will start out in Simple Recovery mode.
	*/		
	------------------------------------------------------------------------------------------- 
	-- Record Most Recent Database Backup for Each Database - Detailed 
	------------------------------------------------------------------------------------------- 
	insert into BackupLog(
		a.[Server],  
		a.[Database], 
		b.StartDate,  
		a.EndDate, 
		b.ExpireDate, 
		b.Size,  
		b.LogicalDevice,  
		b.PhysicalDevice,   
		b.BackupSet, 
		b.Description)
	select  
		a.[server],  
		a.database_name, 
		b.backup_start_date,  
		a.backup_finish_date, 
		b.expiration_date, 
		b.backup_size,  
		b.logical_device_name,  
		b.physical_device_name,   
		b.backupset_name, 
		b.[description] 
	from 
	   ( 
		   select   
			   convert(nvarchar(100), serverproperty('servername')) as [server], 
			   bs.database_name,  
			   max(bs.backup_finish_date) as backup_finish_date 
		   from msdb.dbo.backupmediafamily bf
		   join msdb.dbo.backupset bs on bf.media_set_id = bs.media_set_id  
		   where bs.[type] = 'd' and bs.database_name = db_name()
		   group by bs.database_name  
	   ) as a    
	   left join
	   ( 
			select   
				convert(nvarchar(100), serverproperty('servername')) as [server], 
				bs.database_name,  
				bs.backup_start_date,  
				bs.backup_finish_date, 
				bs.expiration_date, 
				bs.backup_size,  
				bf.logical_device_name,  
				bf.physical_device_name,   
				bs.name as backupset_name, 
				bs.[description] 
			from msdb.dbo.backupmediafamily bf
			join msdb.dbo.backupset bs on bf.media_set_id = bs.media_set_id
			where bs.[type] = 'd' and bs.database_name = db_name()
	   ) as b on a.[server] = b.[server] and a.[database_name] = b.[database_name] and a.backup_finish_date = b.backup_finish_date 
	order by a.database_name 
end

GO
/****** Object:  StoredProcedure [dbo].[job_backup_monthly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_backup_monthly]
as
begin set transaction isolation level read uncommitted	set nocount on
	set datefirst 1
	-- do backup
	declare @file_name nvarchar(255)
	-- set @file_name = 'tmall_' + convert(nvarchar,dateadd(d,-1,getdate()),112) + '.bak'
	set @file_name = db_name() + '_m_' + convert(nvarchar,datepart(m,dateadd(d,-1,getdate()))) + '.bak'
	
	declare @name nvarchar(255)
	set @name = db_name() + N'-m-Full Database Backup'
	declare @db_name nvarchar(50) = db_name()
	
	backup database @db_name
	to disk = @file_name
	with noformat, init, skip, norewind, nounload, stats = 10, name = @name
	
	/*
	You can see how these options map back to the dialog box. The NOINIT clause is what says to append the backup to the existing backup file. The other option is INIT which will overwrite the backup file. The BACKUP statement will create a single file with a BAK extension that contains what is in your data file and log file. You can backup the database while SQL Server is running and people can still use the database. It might be a little bit slower depending on your disk throughput.
	Restoring a database is a little more complicated. Right-clicking on Databases in SSMS bring up a dialog box like this:
	I've already changed the database name to AdventureWorksNew. I clicked the From Device radio button and navigated to my backup file. If you're restoring on the same computer where the original database resides you can just leave the From Database radio button selected and choose the database. It will automatically select the backup. Clicking on the options tab brings us to the second part of the dialog:
	Notice that it wants to restore the two file names right on top of the file names for AdventureWorks. SQL Server won't actually let you do that unless you check the "Overwrite the existing database" checkbox above. You'll need to edit those filenames to change the name. If I script this statement out it gives me this:

	RESTORE DATABASE [AdventureWorksNew] 
		FROM  DISK = N'\\nas\Backup\L40\SQL2005\AdventureWorks_backup_200702120215.bak' 
		WITH  FILE = 1,  
		MOVE N'AdventureWorks_Data' TO N'C:\Data\MSSQL.1\MSSQL\Data\AdventureWorksNew_Data.mdf',  
		MOVE N'AdventureWorks_Log' TO N'C:\Data\MSSQL.1\MSSQL\Data\AdventureWorksNew_Log.ldf',  
		NOUNLOAD,  STATS = 10Notice the MOVE commands have the new file name that I typed in.
	One thing to be aware of is the SQL Server Recovery Model. If you right-click on a database and choose Properties and then click the Options tab you'll see the recovery model as the second item listed. The two main settings for this are Simple and Full. In Simple Recovery SQL Server doesn't keep transactions in the transaction log that have already been "hardened" to disk. They are automatically removed and the space in the file is reused. In Full Recovery mode SQL Server keeps every transaction in the transaction log file until you explicitly backup the transaction log. Simple Recovery mode is better for developers or servers that are only backed up nightly. In Full Recovery mode you'll need to do transaction log backups which I'll cover in a future article. If you see your database growing larger and larger the most likely cause is a growing transaction log. To resolve this, change the recovery model to Simple, backup the database and then shrink the database. You can shrink the database by right-clicking on the database and choosing Tasks -> Shrink -> Database and then clicking OK.
	When you create a database, SQL Server starts with a copy of the "model" database. If you set the Recovery Model of the "model" database to Simple all future databases will start out in Simple Recovery mode.
	*/		
	------------------------------------------------------------------------------------------- 
	-- Record Most Recent Database Backup for Each Database - Detailed 
	------------------------------------------------------------------------------------------- 
	insert into BackupLog(
		a.[Server],  
		a.[Database], 
		b.StartDate,  
		a.EndDate, 
		b.ExpireDate, 
		b.Size,  
		b.LogicalDevice,  
		b.PhysicalDevice,   
		b.BackupSet, 
		b.Description)
	select  
		a.[server],  
		a.database_name, 
		b.backup_start_date,  
		a.backup_finish_date, 
		b.expiration_date, 
		b.backup_size,  
		b.logical_device_name,  
		b.physical_device_name,   
		b.backupset_name, 
		b.[description] 
	from 
	   ( 
		   select   
			   convert(nvarchar(100), serverproperty('servername')) as [server], 
			   bs.database_name,  
			   max(bs.backup_finish_date) as backup_finish_date 
		   from msdb.dbo.backupmediafamily bf
		   join msdb.dbo.backupset bs on bf.media_set_id = bs.media_set_id  
		   where bs.[type] = 'd' and bs.database_name = db_name()
		   group by bs.database_name  
	   ) as a    
	   left join
	   ( 
			select   
				convert(nvarchar(100), serverproperty('servername')) as [server], 
				bs.database_name,  
				bs.backup_start_date,  
				bs.backup_finish_date, 
				bs.expiration_date, 
				bs.backup_size,  
				bf.logical_device_name,  
				bf.physical_device_name,   
				bs.name as backupset_name, 
				bs.[description] 
			from msdb.dbo.backupmediafamily bf
			join msdb.dbo.backupset bs on bf.media_set_id = bs.media_set_id
			where bs.[type] = 'd' and bs.database_name = db_name()
	   ) as b on a.[server] = b.[server] and a.[database_name] = b.[database_name] and a.backup_finish_date = b.backup_finish_date 
	order by a.database_name 
end

GO
/****** Object:  StoredProcedure [dbo].[job_build_date]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[job_build_date]
as
begin set transaction isolation level read uncommitted	set nocount on
	if (select count(*) from [Date]) > 0 return
	declare @start_date datetime, @date_id int, @end_date datetime
	select @start_date = '2014-01-01', @date_id = 1, @end_date = '2020-01-01' 
	set datefirst 1
	while @start_date < convert(datetime, @end_date)
	begin
		insert into [Date] values(
		@date_id, 
		@start_date, 
		year(@start_date), 
		month(@start_date), 
		datename(m,@start_date),
		datepart(y,@start_date),
		day(@start_date),
		datepart(w,@start_date),
		datename(w,@start_date),
		datepart(wk,@start_date), 
		GETDATE())
		set @start_date = dateadd(d,1,@start_date)
		set @date_id = @date_id + 1
	end
end

-- select * from dim_date

-- truncate table dim_date



GO
/****** Object:  StoredProcedure [dbo].[job_generate_device_version_stat_daily]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_device_version_stat_daily]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Date date
	set @Date = DATEADD(d,-1,datediff(d,0,getdate()))
	delete from DeviceVersionDaily where Date = @Date

	-- daily report
	insert into DeviceVersionDaily(Date, Device, Version, Total)
	select 
		@Date, isnull(u.Device,''), isnull(u.Version,''), count(0)
	from [User] u 
	where u.DateCreated between @Date and dateadd(d,1,@Date)
	group by isnull(u.Device,''), isnull(u.Version,'')
	
end





GO
/****** Object:  StoredProcedure [dbo].[job_generate_device_version_stat_monthly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_device_version_stat_monthly]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @DateFrom date, @DateTo date
	--select @dateFrom = '2014-1-1', @dateto = '2015-2-22'
	select @DateFrom = DATEADD(d,-1, datediff(d,0, getdate()))
	select @DateTo = DATEADD(d,-1, datediff(d,0, getdate()))

	declare @MonthFrom date, @MonthTo date
	select @MonthFrom =CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(@dateFrom)-1),@dateFrom),120)
	select @MonthTo =CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,@dateto))),DATEADD(mm,1,@dateto)),120)
	delete from DeviceVersionMonthly where DateFrom between @MonthFrom and @MonthTo

	-- monthly report
	insert into DeviceVersionMonthly([Month], DateFrom, DateTo, Device, Version, Total)
	select 
		month(u.DateCreated), 
		CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(u.DateCreated)-1),u.DateCreated),120), 
		CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,u.DateCreated))),DATEADD(mm,1,u.DateCreated)),120), 
		isnull(u.Device,''), isnull(u.Version,''), count(0)
	from [User] u
	where u.DateCreated between @MonthFrom and dateadd(d,1,@MonthTo)
	group by month(u.DateCreated), 
		CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(u.DateCreated)-1),u.DateCreated),120),
		CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,u.DateCreated))),DATEADD(mm,1,u.DateCreated)),120), 
		isnull(u.Device,''), isnull(u.Version,'')
	order by CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(u.DateCreated)-1),u.DateCreated),120)

end




GO
/****** Object:  StoredProcedure [dbo].[job_generate_device_version_stat_total]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_device_version_stat_total]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Date date
	set @Date = DATEADD(d,-1,datediff(d,0,getdate()))
	delete from DeviceVersionTotal where Date = @Date

	-- daily report
	insert into DeviceVersionTotal(Date, Device, Version, Total)
	select 
		@Date, isnull(u.Device,''), isnull(u.Version,''), count(0)
	from [user] u
	group by u.Device, u.Version

	declare @ReportId bigint, @Today datetime, @Yesterday datetime, @WeekFrom datetime, @WeekTo datetime, @MonthFrom datetime, @MonthTo datetime, @WeekNumber int
	set @Today = @Date
	set @Yesterday = DATEADD(d, -1, @Today)
	select @WeekNumber = WeekNumber from Date where date = @Today
	select @WeekFrom = Min(Date) from Date where WeekNumber = @WeekNumber and [Year] = Year(@Today)
	select @WeekTo = Max(Date) from Date where WeekNumber = @WeekNumber and [Year] = Year(@Today)
	select @MonthFrom = Min(Date) from Date where [Month] = Month(@Today) and [Year] = Year(@Today)
	select @MonthTo = Max(Date) from Date where [Month] = Month(@Today) and [Year] = Year(@Today)

	declare cur cursor for select ReportId from DeviceVersionTotal where Date = @Date

	open cur
	fetch next from cur into @ReportId
	while @@FETCH_STATUS = 0
	begin
		update s
		set s.CurrentWeekActiveTotal = (
			select count(0) 
			from [user] u 
			join (select userid from UserLogonLog where action = 'logon' and DateLogged < dateadd(d,1,@WeekTo) group by userid having count(0) > 1 and max(DateLogged) >= @WeekFrom) sub on sub.UserId = u.UserId
			where u.Device = s.Device and u.version = s.version)
		from DeviceVersionTotal s
		where s.ReportId = @ReportId
		
		update s
		set s.CurrentMonthActiveTotal = (
			select count(0) 
			from [user] u 
			join (select userid from UserLogonLog where action = 'logon' and DateLogged < dateadd(d,1,@MonthTo) group by userid having count(0) > 1 and max(DateLogged) >= @MonthFrom) sub on sub.UserId = u.UserId
			where u.Device = s.Device and u.version = s.version)
		from DeviceVersionTotal s
		where s.ReportId = @ReportId

		fetch next from cur into @ReportId
	end
	close cur
	deallocate cur
end





GO
/****** Object:  StoredProcedure [dbo].[job_generate_device_version_stat_weekly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_device_version_stat_weekly]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @DateFrom date, @DateTo date
	--select @dateFrom = '2014-1-1', @dateto = '2015-2-22'
	select @DateFrom = DATEADD(d,-1, datediff(d,0, getdate()))
	select @DateTo = DATEADD(d,-1, datediff(d,0, getdate()))

	declare @WeekFrom date, @WeekTo date, @yearfrom int, @weeknumberfrom int, @yearto int, @weeknumberto int
	select @yearfrom = [year], @weeknumberfrom = weeknumber from Date where Date = @DateFrom
	select @yearto = [year], @weeknumberto = weeknumber from Date where Date = @DateTo

	select @WeekFrom = (select min(date) from Date where WeekNumber = @weeknumberfrom and [year] = @yearfrom)
	select @WeekTo = (select max(date) from Date where WeekNumber = @weeknumberto and [year] = @yearto)
	delete from DeviceVersionWeekly where DateFrom between @WeekFrom and @WeekTo

	-- monthly report
	insert into DeviceVersionWeekly(WeekNumber, DateFrom, DateTo, Device, Version, Total)
	select 
		d.WeekNumber, 
		(select min(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
		(select max(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
		isnull(u.Device,''), isnull(u.Version,''), count(0)
	from [User] u 
	join Date d on d.date = dateadd(d,0,datediff(d,0,u.datecreated))
	where u.DateCreated between @WeekFrom and dateadd(d,1,@WeekTo)
	group by d.[Year], d.WeekNumber, isnull(u.Device,''), isnull(u.Version,'')
	order by d.[Year], d.WeekNumber

end




GO
/****** Object:  StoredProcedure [dbo].[job_generate_job_stat_daily]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_job_stat_daily]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Date date
	set @Date = DATEADD(d,-1,datediff(d,0,getdate()))

	delete from JobDaily where Date = @Date
	-- daily report
	insert into JobDaily(Date, CityId, CityName, RegionId, RegionName, JobTypeId, JobTypeName, JobCategoryId, JobCategoryName, GroupId, PublishCount, ViewCount, ApplyCount)
	select *
		from(
		select 
			dateadd(d,0,datediff(d,0,j.DatePublished)) DatePublished, pr.RegionId CityId, pr.Name CityName, r.RegionId, r.Name RegionName, j.JobTypeId, t.Name JobTypeName, p.PositionId, p.Name, g.GroupId,
			count(0) PublishCount, sum(j.viewtimes) ViewCount, sum(applies.Applies) ApplyCount
		from ActivityJob j
		join ActivityJobPosition p on p.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from ActivityJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @Date and j.DatePublished < DateAdd(d,1,@Date) and j.statusid = 2
		group by dateadd(d,0,datediff(d,0,j.DatePublished)), pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, p.PositionId, p.Name, g.GroupId
		union all
		select 
			dateadd(d,0,datediff(d,0,j.DatePublished)), pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.CategoryId, c.Name, g.GroupId, count(0), sum(j.viewtimes), sum(applies.Applies)
		from CampusJob j
		join CampusJobCategory c on c.CategoryId = j.CategoryId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from CampusJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @Date and j.DatePublished < DateAdd(d,1,@Date) and j.statusid = 2
		group by dateadd(d,0,datediff(d,0,j.DatePublished)), pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.CategoryId, c.Name, g.GroupId
		union all
		select 
			dateadd(d,0,datediff(d,0,j.DatePublished)), pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.CategoryId, c.Name, g.GroupId, count(0), sum(j.viewtimes), sum(applies.Applies)
		from InternJob j
		join InternJobCategory c on c.CategoryId = j.CategoryId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from InternJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @Date and j.DatePublished < DateAdd(d,1,@Date) and j.statusid = 2
		group by dateadd(d,0,datediff(d,0,j.DatePublished)), pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.CategoryId, c.Name, g.GroupId
		union all
		select 
			dateadd(d,0,datediff(d,0,j.DatePublished)), pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.PositionId, c.Name, g.GroupId, count(0), sum(j.viewtimes), sum(applies.Applies)
		from ServiceJob j
		join ServiceJobPosition c on c.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from ServiceJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @Date and j.DatePublished < DateAdd(d,1,@Date) and j.statusid = 2
		group by dateadd(d,0,datediff(d,0,j.DatePublished)), pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.PositionId, c.Name, g.GroupId
		union all
		select 
			dateadd(d,0,datediff(d,0,j.DatePublished)), pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, p.PaperId, p.Name, g.GroupId, count(0), sum(j.viewtimes), sum(applies.Applies)
		from TutorJob j
		join TutorJobPaper p on p.PaperId = j.PaperId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from TutorJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @Date and j.DatePublished < DateAdd(d,1,@Date) and j.statusid = 2
		group by dateadd(d,0,datediff(d,0,j.DatePublished)), pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, p.PaperId, p.Name, g.GroupId
	) total
	order by total.DatePublished
end





GO
/****** Object:  StoredProcedure [dbo].[job_generate_job_stat_monthly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_job_stat_monthly]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @DateFrom date, @DateTo date
	--select @dateFrom = '2014-1-1', @dateto = '2015-2-22'
	select @DateFrom = DATEADD(d,-1, datediff(d,0, getdate()))
	select @DateTo = DATEADD(d,-1, datediff(d,0, getdate()))

	declare @MonthFrom date, @MonthTo date
	select @MonthFrom =CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(@dateFrom)-1),@dateFrom),120)
	select @MonthTo =CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,@dateto))),DATEADD(mm,1,@dateto)),120)
	delete from JobMonthly where DateFrom between @MonthFrom and @MonthTo

	-- monthly report
	insert into JobMonthly([Month], DateFrom, DateTo, CityId, CityName, RegionId, RegionName, JobTypeId, JobTypeName, JobCategoryId, JobCategoryName, GroupId, PublishCount, ViewCount, ApplyCount)
	select *
	from(
		select 
			Month(j.DatePublished) [Month], 
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(j.DatePublished)-1),j.DatePublished),120) DateFrom,
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,j.DatePublished))),DATEADD(mm,1,j.DatePublished)),120) DateTo,
			pr.RegionId CityId, pr.Name CityName, r.RegionId, r.Name RegionName, j.JobTypeId, t.Name JobTypeName, p.PositionId, p.Name, g.GroupId, count(0) PublishCount, sum(j.viewtimes) ViewCount, sum(applies.Applies) ApplyCount
		from ActivityJob j
		join ActivityJobPosition p on p.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from ActivityJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @MonthFrom and j.DatePublished < dateadd(d,1,@MonthTo) and j.statusid = 2
		group by 
			Month(j.DatePublished), 
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(j.DatePublished)-1),j.DatePublished),120),
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,j.DatePublished))),DATEADD(mm,1,j.DatePublished)),120), 
			pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, p.PositionId, p.Name, g.GroupId
		union all
		select 
			Month(j.DatePublished), 
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(j.DatePublished)-1),j.DatePublished),120),
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,j.DatePublished))),DATEADD(mm,1,j.DatePublished)),120),
			pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.CategoryId, c.Name, g.GroupId, count(0), sum(j.viewtimes), sum(applies.Applies)
		from CampusJob j
		join CampusJobCategory c on c.CategoryId = j.CategoryId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from CampusJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @MonthFrom and j.DatePublished < dateadd(d,1,@MonthTo) and j.statusid = 2
		group by Month(j.DatePublished), 
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(j.DatePublished)-1),j.DatePublished),120),
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,j.DatePublished))),DATEADD(mm,1,j.DatePublished)),120), 
			pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.CategoryId, c.Name, g.GroupId
		union all
		select 
			Month(j.DatePublished), 
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(j.DatePublished)-1),j.DatePublished),120),
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,j.DatePublished))),DATEADD(mm,1,j.DatePublished)),120),
			pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.CategoryId, c.Name, g.GroupId, count(0), sum(j.viewtimes), sum(applies.Applies)
		from InternJob j
		join InternJobCategory c on c.CategoryId = j.CategoryId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from InternJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @MonthFrom and j.DatePublished < dateadd(d,1,@MonthTo) and j.statusid = 2
		group by Month(j.DatePublished), 
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(j.DatePublished)-1),j.DatePublished),120),
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,j.DatePublished))),DATEADD(mm,1,j.DatePublished)),120), 
			pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.CategoryId, c.Name, g.GroupId
		union all
		select 
			Month(j.DatePublished), 
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(j.DatePublished)-1),j.DatePublished),120),
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,j.DatePublished))),DATEADD(mm,1,j.DatePublished)),120), 
			pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.PositionId, c.Name, g.GroupId, count(0), sum(j.viewtimes), sum(applies.Applies)
		from ServiceJob j
		join ServiceJobPosition c on c.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from ServiceJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @MonthFrom and j.DatePublished < dateadd(d,1,@MonthTo) and j.statusid = 2
		group by Month(j.DatePublished), 
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(j.DatePublished)-1),j.DatePublished),120),
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,j.DatePublished))),DATEADD(mm,1,j.DatePublished)),120), 
			pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.PositionId, c.Name, g.GroupId
		union all
		select 
			Month(j.DatePublished), 
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(j.DatePublished)-1),j.DatePublished),120),
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,j.DatePublished))),DATEADD(mm,1,j.DatePublished)),120),
			pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, p.PaperId, p.Name, g.GroupId, count(0), sum(j.viewtimes), sum(applies.Applies)
		from TutorJob j
		join TutorJobPaper p on p.PaperId = j.PaperId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from TutorJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @MonthFrom and j.DatePublished < dateadd(d,1,@MonthTo) and j.statusid = 2
		group by Month(j.DatePublished), 
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(j.DatePublished)-1),j.DatePublished),120),
			CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,j.DatePublished))),DATEADD(mm,1,j.DatePublished)),120), 
			pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, p.PaperId, p.Name, g.GroupId
	) total
	order by total.DateFrom
end




GO
/****** Object:  StoredProcedure [dbo].[job_generate_job_stat_weekly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_job_stat_weekly]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @DateFrom date, @DateTo date
	--select @dateFrom = '2014-1-1', @dateto = '2015-2-22'
	select @DateFrom = DATEADD(d,-1, datediff(d,0, getdate()))
	select @DateTo = DATEADD(d,-1, datediff(d,0, getdate()))

	declare @WeekFrom date, @WeekTo date, @yearfrom int, @weeknumberfrom int, @yearto int, @weeknumberto int
	select @yearfrom = [year], @weeknumberfrom = weeknumber from Date where Date = @DateFrom
	select @yearto = [year], @weeknumberto = weeknumber from Date where Date = @DateTo

	select @WeekFrom = (select min(date) from Date where WeekNumber = @weeknumberfrom and [year] = @yearfrom)
	select @WeekTo = (select max(date) from Date where WeekNumber = @weeknumberto and [year] = @yearto)
	delete from JobWeekly where DateFrom between @WeekFrom and @WeekTo

	-- monthly report
	insert into JobWeekly(WeekNumber, DateFrom, DateTo, CityId, CityName, RegionId, RegionName, JobTypeId, JobTypeName, JobCategoryId, JobCategoryName, GroupId, PublishCount, ViewCount, ApplyCount)
	select *
	from(
		select 
			d.WeekNumber, 
			(select min(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber) DateFrom,
			(select max(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber) DateTo,
			pr.RegionId CityId, pr.Name CityName, r.RegionId, r.Name RegionName, j.JobTypeId, t.Name JobTypeName, p.PositionId, p.Name, g.GroupId, count(0) PublishCount, sum(j.viewtimes) ViewCount, sum(applies.Applies) ApplyCount
		from ActivityJob j
		join ActivityJobPosition p on p.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		join Date d on d.date = dateadd(d,0,datediff(d,0,j.DatePublished))
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from ActivityJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @WeekFrom and j.DatePublished < dateadd(d,1,@WeekTo) and j.statusid = 2
		group by d.[year], d.WeekNumber, pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, p.PositionId, p.Name, g.GroupId
		union all
		select 
			d.WeekNumber, 
			(select min(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
			(select max(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
			pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.CategoryId, c.Name, g.GroupId, count(0), sum(j.viewtimes), sum(applies.Applies)
		from CampusJob j
		join CampusJobCategory c on c.CategoryId = j.CategoryId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		join Date d on d.date = dateadd(d,0,datediff(d,0,j.DatePublished))
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from CampusJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @WeekFrom and j.DatePublished < dateadd(d,1,@WeekTo) and j.statusid = 2
		group by d.[year], d.WeekNumber, pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.CategoryId, c.Name, g.GroupId
		union all
		select 
			d.WeekNumber, 
			(select min(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
			(select max(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
			pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.CategoryId, c.Name, g.GroupId, count(0), sum(j.viewtimes), sum(applies.Applies)
		from InternJob j
		join InternJobCategory c on c.CategoryId = j.CategoryId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		join Date d on d.date = dateadd(d,0,datediff(d,0,j.DatePublished))
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from InternJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @WeekFrom and j.DatePublished < dateadd(d,1,@WeekTo) and j.statusid = 2
		group by d.[year], d.WeekNumber, pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.CategoryId, c.Name, g.GroupId
		union all
		select 
			d.WeekNumber, 
			(select min(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
			(select max(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
			pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.PositionId, c.Name, g.GroupId, count(0), sum(j.viewtimes), sum(applies.Applies)
		from ServiceJob j
		join ServiceJobPosition c on c.PositionId = j.PositionId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		join Date d on d.date = dateadd(d,0,datediff(d,0,j.DatePublished))
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from ServiceJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @WeekFrom and j.DatePublished < dateadd(d,1,@WeekTo) and j.statusid = 2
		group by d.[year], d.WeekNumber, pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, c.PositionId, c.Name, g.GroupId
		union all
		select 
			d.WeekNumber, 
			(select min(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
			(select max(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
			pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, p.PaperId, p.Name, g.GroupId, count(0), sum(j.viewtimes), sum(applies.Applies)
		from TutorJob j
		join TutorJobPaper p on p.PaperId = j.PaperId
		join Region r on r.RegionId = j.RegionId
		join Region pr on pr.RegionId = r.ParentRegionId
		join JobType t on t.TypeId = j.JobTypeId
		join Date d on d.date = dateadd(d,0,datediff(d,0,j.DatePublished))
		left join JobAllocateType at on at.TypeId = j.JobAllocateTypeId
		left join JobAllocateTypeGroup g on g.GroupId = at.GroupId
		outer apply(
				select COUNT(0) Applies
				from TutorJobApply a 
				where a.JobId = j.JobId and a.StatusId = 2
			) applies
		where j.DatePublished >= @WeekFrom and j.DatePublished < dateadd(d,1,@WeekTo) and j.statusid = 2
		group by d.[year], d.WeekNumber,pr.RegionId, pr.Name, r.RegionId, r.Name, j.JobTypeId, t.Name, p.PaperId, p.Name, g.GroupId
	) total
	order by total.DateFrom
end




GO
/****** Object:  StoredProcedure [dbo].[job_generate_promoter_stat_daily]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_promoter_stat_daily]
	@Date date
as
begin set transaction isolation level read uncommitted	set nocount on
	
	set @Date = isnull(@Date,DATEADD(d,-1,datediff(d,0,getdate())))

	delete from PromoterDaily where Date = @Date
	-- daily report
	insert into PromoterDaily(Date, PromoterId, PromoterName, TeamId, TeamName, UserId, UserName, Mobile, InvitationCode, Leader, Total)
	select 
		@Date, p.PromoterId, p.UserName, t.TeamId, t.Name, m.UserId, isnull(u.FullName,''), u.Mobile, u.UserId, m.Leader, count(0)
	from Promoter p
	join PromoterTeam t on t.PromoterId = p.PromoterId
	join PromoterTeamMember m on m.TeamId = t.TeamId
	join [User] u on u.UserId = m.UserId
	join PromoterRegistration r on r.PromoterUserId = u.UserId
	where r.DateCreated between @Date and DateAdd(d,1,@Date)
	group by p.PromoterId, p.UserName, t.TeamId, t.Name, m.UserId, u.FullName, u.Mobile, u.UserId, m.Leader

end





GO
/****** Object:  StoredProcedure [dbo].[job_generate_promoter_stat_monthly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_promoter_stat_monthly]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @DateFrom date, @DateTo date
	--select @dateFrom = '2014-1-1', @dateto = '2015-2-22'
	select @DateFrom = DATEADD(d,-1, datediff(d,0, getdate()))
	select @DateTo = DATEADD(d,-1, datediff(d,0, getdate()))

	declare @MonthFrom date, @MonthTo date
	select @MonthFrom =CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(@dateFrom)-1),@dateFrom),120)
	select @MonthTo =CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,@dateto))),DATEADD(mm,1,@dateto)),120)
	delete from PromoterMonthly where DateFrom between @MonthFrom and @MonthTo

	-- monthly report
	insert into PromoterMonthly([Month], DateFrom, DateTo, PromoterId, PromoterName, TeamId, TeamName, UserId, UserName, Mobile, InvitationCode, Leader, Total)
	select 
		month(r.DateCreated), 
		CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(r.DateCreated)-1),r.DateCreated),120), 
		CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,r.DateCreated))),DATEADD(mm,1,r.DateCreated)),120), 
		p.PromoterId, p.UserName, t.TeamId, t.Name, m.UserId, isnull(u.FullName,''), u.Mobile, u.UserId, m.Leader, count(0)
	from Promoter p
	join PromoterTeam t on t.PromoterId = p.PromoterId
	join PromoterTeamMember m on m.TeamId = t.TeamId
	join [User] u on u.UserId = m.UserId
	join PromoterRegistration r on r.PromoterUserId = u.UserId
	where r.DateCreated between @MonthFrom and dateadd(d,1,@MonthTo)
	group by month(r.DateCreated), 
		CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(r.DateCreated)-1),r.DateCreated),120),
		CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,r.DateCreated))),DATEADD(mm,1,r.DateCreated)),120), 
		p.PromoterId, p.UserName, t.TeamId, t.Name, m.UserId, u.FullName, u.Mobile, u.UserId, m.Leader
	order by CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(r.DateCreated)-1),r.DateCreated),120)

end




GO
/****** Object:  StoredProcedure [dbo].[job_generate_promoter_stat_weekly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_promoter_stat_weekly]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @DateFrom date, @DateTo date
	--select @dateFrom = '2014-1-1', @dateto = '2015-2-22'
	select @DateFrom = DATEADD(d,-1, datediff(d,0, getdate()))
	select @DateTo = DATEADD(d,-1, datediff(d,0, getdate()))

	declare @WeekFrom date, @WeekTo date, @yearfrom int, @weeknumberfrom int, @yearto int, @weeknumberto int
	select @yearfrom = [year], @weeknumberfrom = weeknumber from Date where Date = @DateFrom
	select @yearto = [year], @weeknumberto = weeknumber from Date where Date = @DateTo

	select @WeekFrom = (select min(date) from Date where WeekNumber = @weeknumberfrom and [year] = @yearfrom)
	select @WeekTo = (select max(date) from Date where WeekNumber = @weeknumberto and [year] = @yearto)
	delete from PromoterWeekly where DateFrom between @WeekFrom and @WeekTo

	-- monthly report
	insert into PromoterWeekly(WeekNumber, DateFrom, DateTo, PromoterId, PromoterName, TeamId, TeamName, UserId, UserName, Mobile, InvitationCode, Leader, Total)
	select 
		d.WeekNumber, 
		(select min(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
		(select max(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
		p.PromoterId, p.UserName, t.TeamId, t.Name, m.UserId, isnull(u.FullName,''), u.Mobile, u.UserId, m.Leader, count(0)
	from Promoter p
	join PromoterTeam t on t.PromoterId = p.PromoterId
	join PromoterTeamMember m on m.TeamId = t.TeamId
	join [User] u on u.UserId = m.UserId
	join PromoterRegistration r on r.PromoterUserId = u.UserId
	join Date d on d.date = dateadd(d,0,datediff(d,0,r.datecreated))
	where r.DateCreated between @WeekFrom and dateadd(d,1,@WeekTo)
	group by d.[Year], d.WeekNumber, p.PromoterId, p.UserName, t.TeamId, t.Name, m.UserId, u.FullName, u.Mobile, u.UserId, m.Leader
	order by d.[Year], d.WeekNumber

end




GO
/****** Object:  StoredProcedure [dbo].[job_generate_promoter_total]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_promoter_total]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Date date
	set @Date = DATEADD(d,-1,datediff(d,0,getdate()))

	delete from PromoterTotal where Date = @Date

	-- total report
	insert into PromoterTotal(Date, PromoterId, PromoterName, TeamId, TeamName, UserId, UserName, Mobile, InvitationCode, Leader, Total)
	select 
		@Date, p.PromoterId, p.UserName, t.TeamId, t.Name, m.UserId, isnull(u.FullName,''), u.Mobile, u.UserId, m.Leader, count(0)
	from Promoter p
	join PromoterTeam t on t.PromoterId = p.PromoterId
	join PromoterTeamMember m on m.TeamId = t.TeamId
	join [User] u on u.UserId = m.UserId
	join PromoterRegistration r on r.PromoterUserId = u.UserId
	group by p.PromoterId, p.UserName, t.TeamId, t.Name, m.UserId, isnull(u.FullName,''), u.Mobile, u.UserId, m.Leader
end





GO
/****** Object:  StoredProcedure [dbo].[job_generate_user_registration_stat_daily]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_user_registration_stat_daily]
	@Date date
as
begin set transaction isolation level read uncommitted	set nocount on
	
	set @Date = isnull(@Date,DATEADD(d,-1,datediff(d,0,getdate())))

	delete from UserRegistrationDaily where Date = @Date

	-- daily report
	insert into UserRegistrationDaily(Date, RegionId, RegionName, SchoolId, SchoolName, Total)
	select 
		@Date, s.RegionId, isnull(r.Name,''), s.SchoolId, s.Name, count(0)
	from [user] u
	join School s on s.SchoolId = u.SchoolId
	left join Region r on r.RegionId = s.RegionId
	where u.DateCreated between @Date and DateAdd(d,1,@Date)
	group by s.RegionId, r.Name, s.SchoolId, s.Name

end





GO
/****** Object:  StoredProcedure [dbo].[job_generate_user_registration_stat_monthly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_user_registration_stat_monthly]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @DateFrom date, @DateTo date
	--select @dateFrom = '2014-1-1', @dateto = '2015-2-22'
	select @DateFrom = DATEADD(d,-1, datediff(d,0, getdate()))
	select @DateTo = DATEADD(d,-1, datediff(d,0, getdate()))

	declare @MonthFrom date, @MonthTo date
	select @MonthFrom =CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(@dateFrom)-1),@dateFrom),120)
	select @MonthTo =CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,@dateto))),DATEADD(mm,1,@dateto)),120)
	delete from UserRegistrationMonthly where DateFrom between @MonthFrom and @MonthTo

	-- monthly report
	insert into UserRegistrationMonthly([Month], DateFrom, DateTo, RegionId, RegionName, SchoolId, SchoolName, Total)
	select 
		month(u.DateCreated), 
		CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(u.DateCreated)-1),u.DateCreated),120), 
		CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,u.DateCreated))),DATEADD(mm,1,u.DateCreated)),120), 
		s.RegionId, isnull(r.Name,''), s.SchoolId, s.Name, count(0)
	from [user] u
	join School s on s.SchoolId = u.SchoolId
	left join Region r on r.RegionId = s.RegionId
	where u.DateCreated between @MonthFrom and dateadd(d,1,@MonthTo)
	group by month(u.DateCreated), 
		CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(u.DateCreated)-1),u.DateCreated),120),
		CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(DATEADD(mm,1,u.DateCreated))),DATEADD(mm,1,u.DateCreated)),120), 
		s.RegionId, r.Name, s.SchoolId, s.Name
	order by CONVERT(nVARCHAR(10),DATEADD(dd,-(DAY(u.DateCreated)-1),u.DateCreated),120)
end




GO
/****** Object:  StoredProcedure [dbo].[job_generate_user_registration_stat_total]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_user_registration_stat_total]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Date date
	set @Date = DATEADD(d,-1,datediff(d,0,getdate()))
	delete from UserRegistrationTotal where Date = @Date

	-- daily report
	insert into UserRegistrationTotal(Date, RegionId, RegionName, SchoolId, SchoolName, Total)
	select 
		@Date, s.RegionId, isnull(r.Name,''), s.SchoolId, s.Name, count(0)
	from [user] u
	join School s on s.SchoolId = u.SchoolId
	left join Region r on r.RegionId = s.RegionId
	group by s.RegionId, r.Name, s.SchoolId, s.Name
	order by s.Name

	declare @ReportId bigint, @Today datetime, @Yesterday datetime, @WeekFrom datetime, @WeekTo datetime, @MonthFrom datetime, @MonthTo datetime, @WeekNumber int
	set @Today = @Date
	set @Yesterday = DATEADD(d, -1, @Today)
	select @WeekNumber = WeekNumber from Date where date = @Today
	select @WeekFrom = Min(Date) from Date where WeekNumber = @WeekNumber and [Year] = Year(@Today)
	select @WeekTo = Max(Date) from Date where WeekNumber = @WeekNumber and [Year] = Year(@Today)
	select @MonthFrom = Min(Date) from Date where [Month] = Month(@Today) and [Year] = Year(@Today)
	select @MonthTo = Max(Date) from Date where [Month] = Month(@Today) and [Year] = Year(@Today)

	declare cur cursor for select ReportId from UserRegistrationTotal where Date = @Date

	open cur
	fetch next from cur into @ReportId
	while @@FETCH_STATUS = 0
	begin
		update s
		set s.TodayTotal = (select count(0) from [user] u where u.schoolid = s.SchoolId and u.datecreated >= @Today and u.datecreated < DateAdd(d,1,@Today))
		from UserRegistrationTotal s
		where s.ReportId = @ReportId

		update s
		set s.YesterdayTotal = (select count(0) from [user] u where u.schoolid = s.SchoolId and u.datecreated >= @Yesterday and u.datecreated < @Today)
		from UserRegistrationTotal s
		where s.ReportId = @ReportId

		update s
		set s.TodayActiveTotal = (
			select count(0) 
			from [user] u 
			join (select userid from UserLogonLog where action = 'logon' and DateLogged < dateadd(d,1,@Today) group by userid having count(0) > 1 and max(DateLogged) >= @Today) sub on sub.UserId = u.UserId
			where u.schoolid = s.SchoolId)
		from UserRegistrationTotal s
		where s.ReportId = @ReportId

		update s
		set s.YesterdayActiveTotal = (
			select count(0) 
			from [user] u 
			join (select userid from UserLogonLog where action = 'logon' and DateLogged < @Today group by userid having count(0) > 1 and max(DateLogged) >= @Yesterday and max(DateLogged) < @Today) sub on sub.UserId = u.UserId
			where u.schoolid = s.SchoolId)
		from UserRegistrationTotal s
		where s.ReportId = @ReportId

		update s
		set s.CurrentWeekActiveTotal = (
			select count(0) 
			from [user] u 
			join (select userid from UserLogonLog where action = 'logon' and DateLogged < dateadd(d,1,@WeekTo) group by userid having count(0) > 1 and max(DateLogged) >= @WeekFrom) sub on sub.UserId = u.UserId
			where u.schoolid = s.SchoolId)
		from UserRegistrationTotal s
		where s.ReportId = @ReportId
		
		update s
		set s.CurrentMonthActiveTotal = (
			select count(0) 
			from [user] u 
			join (select userid from UserLogonLog where action = 'logon' and DateLogged < dateadd(d,1,@MonthTo) group by userid having count(0) > 1 and max(DateLogged) >= @MonthFrom) sub on sub.UserId = u.UserId
			where u.schoolid = s.SchoolId)
		from UserRegistrationTotal s
		where s.ReportId = @ReportId

		fetch next from cur into @ReportId
	end
	close cur
	deallocate cur
end





GO
/****** Object:  StoredProcedure [dbo].[job_generate_user_registration_stat_weekly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_user_registration_stat_weekly]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @DateFrom date, @DateTo date
	--select @dateFrom = '2014-1-1', @dateto = '2015-2-22'
	select @DateFrom = DATEADD(d,-1, datediff(d,0, getdate()))
	select @DateTo = DATEADD(d,-1, datediff(d,0, getdate()))

	declare @WeekFrom date, @WeekTo date, @yearfrom int, @weeknumberfrom int, @yearto int, @weeknumberto int
	select @yearfrom = [year], @weeknumberfrom = weeknumber from Date where Date = @DateFrom
	select @yearto = [year], @weeknumberto = weeknumber from Date where Date = @DateTo

	select @WeekFrom = (select min(date) from Date where WeekNumber = @weeknumberfrom and [year] = @yearfrom)
	select @WeekTo = (select max(date) from Date where WeekNumber = @weeknumberto and [year] = @yearto)
	delete from UserRegistrationWeekly where DateFrom between @WeekFrom and @WeekTo

	-- monthly report
	insert into UserRegistrationWeekly(WeekNumber, DateFrom, DateTo, RegionId, RegionName, SchoolId, SchoolName, Total)
	select 
		d.WeekNumber, 
		(select min(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
		(select max(date) from date where [year] = d.[year] and WeekNumber = d.weeknumber),
		s.RegionId, isnull(r.Name,''), s.SchoolId, s.Name, count(0)
	from [user] u
	join School s on s.SchoolId = u.SchoolId
	left join Region r on r.RegionId = s.RegionId
	join Date d on d.date = dateadd(d,0,datediff(d,0,u.datecreated))
	where u.DateCreated between @WeekFrom and dateadd(d,1,@WeekTo)
	group by d.[Year], d.WeekNumber, s.RegionId, r.Name, s.SchoolId, s.Name
	order by d.[Year], d.WeekNumber

end


GO
/****** Object:  StoredProcedure [dbo].[job_generate_user_retention_daily]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_generate_user_retention_daily]
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Date date
	set @Date = DATEADD(d,-1,datediff(d,0,getdate()))

	-- day1
	if exists(select 1 from UserRetention where Date = @Date)
	begin
		update r 
		set Total = (select COUNT(0) from [User] u where u.DateCreated between @Date and DATEADD(d,1,@Date)),
			Day1 = (select count(0) from (select u.UserId
						from [User] u 
						join UserLogonLog ul on ul.UserId = u.UserId 
						where u.DateCreated between @Date and DATEADD(d,1,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
						group by u.userId
						having COUNT(0) > 1) sub)
		from UserRetention r
		where Date = @Date
	end
	else
	begin
		insert into UserRetention(Date, Total, Day1)
		values(@Date, (select COUNT(0) from [User] u where u.DateCreated between @Date and DATEADD(d,1,@Date)),
			 (select count(0) from (select u.UserId
						from [User] u 
						join UserLogonLog ul on ul.UserId = u.UserId 
						where u.DateCreated between @Date and DATEADD(d,1,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
						group by u.userId
						having COUNT(0) > 1) sub))
	end

	-- day 2
	update r 
	set Day2 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-1,@Date) and @Date and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-1,@Date)

	-- day 3
	update r 
	set Day3 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-2,@Date) and DATEADD(d,-1,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-2,@Date)

	-- day 4
	update r 
	set Day4 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-3,@Date) and DATEADD(d,-2,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-3,@Date)

	-- day 5
	update r 
	set Day5 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-4,@Date) and DATEADD(d,-3,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-4,@Date)

	-- day 6
	update r 
	set Day6 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-5,@Date) and DATEADD(d,-4,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-5,@Date)

	-- day 7
	update r 
	set Day7 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-6,@Date) and DATEADD(d,-5,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-6,@Date)

	-- day 8
	update r 
	set Day8 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-7,@Date) and DATEADD(d,-6,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-7,@Date)

	-- day 9
	update r 
	set Day9 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-8,@Date) and DATEADD(d,-7,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-8,@Date)

	-- day 10
	update r 
	set Day10 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-9,@Date) and DATEADD(d,-8,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-9,@Date)

	-- day 11
	update r 
	set Day11 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-10,@Date) and DATEADD(d,-9,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-10,@Date)

	-- day 12
	update r 
	set Day12 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-11,@Date) and DATEADD(d,-10,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-11,@Date)

	-- day 13
	update r 
	set Day13 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-12,@Date) and DATEADD(d,-11,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-12,@Date)

	-- day 14
	update r 
	set Day14 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-13,@Date) and DATEADD(d,-12,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-13,@Date)

	-- day 30
	update r 
	set Day30 = (select count(0) from (select u.UserId
					from [User] u 
					join UserLogonLog ul on ul.UserId = u.UserId 
					where u.DateCreated between DATEADD(d,-29,@Date) and DATEADD(d,-28,@Date) and ul.Action = 'Logon' and ul.DateLogged between @Date and DATEADD(d,1,@Date)
					group by u.userId) sub)
	from UserRetention r
	where Date = DATEADD(d,-29,@Date)
end





GO
/****** Object:  StoredProcedure [dbo].[job_import_reptile_data]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_import_reptile_data]
as
begin set transaction isolation level read uncommitted	set nocount on
	begin tran
	declare @JobAllocateTypeId int
	set @JobAllocateTypeId = 6
	insert into ActivityJob(CompanyId, CompanyName, Title, JobTypeId, StatusId, PositionId, RegionId, WageUnitId, Wage, IncludeDinner, IncludeRoom, IncludeCommission,
		TermId, Gender, Deposit, PeopleRequired, Contact, ContactPhone, Address, DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, ViewTimes, Recommended, Reptile, SourceWebSite,
		MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon, ThuNight, FriMorning,
		FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, IgnoreTimeSheet, DatePublished, DateCreated, DateModified,JobAllocateTypeId)
	select null, CompanyName, Title, JobTypeId, 
		case when r.RequireVerify = 0 and Title not like '%网络兼职%' and Title not like '%淘宝%' and Title not like '%刷单%' and Title not like '%模特%' and Title not like '%按摩%' 
			and Title not like '%洗碗工%' and Title not like '%酒吧%' and Title not like '%小费%' and Title not like '%刷信誉%' and Title not like '%在家%' 
			and Title not like '%有电脑即可%' and Title not like '%大学生打码%' and Title not like '%刷钻%' and Title not like '%手机兼职%' then 
			case
				when SourceWebSite = '1010' then 2
				when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) = '时' and isnull(nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),''),0) between 8 and 18 then 2
				when  SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) = '天' and isnull(nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),''),0) between 40 and 150 then 2
				when  SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) = '月' and isnull(nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),''),0) between 500 and 3500 then 2 else 1
			end
		else 1 end, 
		p.PositionId, d.RegionId, 
		case when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) <> '次' then u.UnitId else null end, 
		case when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) <> '次' then nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),'') else null end, 
		isnull(IncludeDinner,0) IncludeDinner, isnull(IncludeRoom,0) IncludeRoom, isnull(IncludeCommission,0) IncludeCommission, t.TermId, isnull(Gender,2) Gender, 0, PeopleRequired, Contact, ContactPhone, Address,
		GETDATE(), DATEADD(m,1,getdate()), WorkFrom, WorkEnd, Description, 0, 0, 1, SourceWebSite,
		MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon, ThuNight, FriMorning,
		FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, 
		case when d.MonMorning = 0 and d.MonAfternoon = 0 and d.MonNight = 0 and d.TueMorning = 0 and d.TueAfternoon = 0 and d.TueNight = 0 and d.WedMorning = 0 and d.WedAfternoon = 0 and d.WedNight = 0 
			and d.ThuMorning = 0 and d.ThuAfternoon = 0 and d.ThuNight = 0 and d.FriMorning = 0 and d.FriAfternoon = 0 and d.FriNight = 0 and d.SatMorning = 0 and d.SatAfternoon = 0 and d.SatNight = 0
			and d.SunMorning = 0 and d.SunAfternoon = 0 and d.SunNight = 0 then 1 else 0 end,
		case when SourceWebSite in ('58','兼职猫') then left(convert(nvarchar,dateadd(d,0,datediff(d,0,PublishDate)),120),10) + ' ' + left(cast(dateadd(SECOND, cast(ABS(CHECKSUM(NewId())) as int), convert(time, '00:00')) as nvarchar(50)),8) else PublishDate end, 
		GETDATE(), GETDATE(),@JobAllocateTypeId
	from ReptileData d
	join ActivityJobPosition p on p.Name = d.CategoryName
	join Region r on r.RegionId = d.CityId and r.ImportReptile = 1
	join Region sr on sr.RegionId = d.RegionId and sr.ParentRegionId = r.RegionId
	left join WageUnit u on u.Name = RIGHT(d.Wage, 1) and RIGHT(Wage, 1) <> '次'
	left join Term t on t.Name = d.Term
	where Imported = 0 and d.DateCreated > DATEADD(m,-1,DATEDIFF(d,0,getdate())) and JobTypeId = 1 
	
	update d
	set Imported = 1
	from ReptileData d
	join Region r on r.RegionId = d.CityId and r.ImportReptile = 1
	join Region sr on sr.RegionId = d.RegionId and sr.ParentRegionId = r.RegionId
	join ActivityJobPosition p on p.Name = d.CategoryName
	where Imported = 0 and d.DateCreated > DATEADD(m,-1,DATEDIFF(d,0,getdate())) and JobTypeId = 1 

	insert into CampusJob(CompanyId, CompanyName, Title, JobTypeId, StatusId, CategoryId, SchoolId, RegionId, 
		Gender, PeopleRequired, Contact, ContactPhone, Address, DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, ViewTimes, Recommended, Reptile, SourceWebSite,
		MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon, ThuNight, FriMorning,
		FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, IgnoreTimeSheet, DatePublished, DateCreated, DateModified,JobAllocateTypeId)
	select null, CompanyName, Title, JobTypeId, 
		case when r.RequireVerify = 0 and Title not like '%网络兼职%' and Title not like '%淘宝%' and Title not like '%刷单%' and Title not like '%模特%' and Title not like '%按摩%' 
			and Title not like '%洗碗工%' and Title not like '%酒吧%' and Title not like '%小费%' and Title not like '%刷信誉%' and Title not like '%在家%' 
			and Title not like '%有电脑即可%' and Title not like '%大学生打码%' and Title not like '%刷钻%' and Title not like '%手机兼职%' then 2
		else 1 end, 
		p.CategoryId, s.SchoolId, d.RegionId, isnull(Gender,2) Gender, PeopleRequired, Contact, ContactPhone, Address,
		GETDATE(), DATEADD(m,1,getdate()), WorkFrom, WorkEnd, Description, 0, 0, 1, SourceWebSite,
		MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon, ThuNight, FriMorning,
		FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, 
		case when d.MonMorning = 0 and d.MonAfternoon = 0 and d.MonNight = 0 and d.TueMorning = 0 and d.TueAfternoon = 0 and d.TueNight = 0 and d.WedMorning = 0 and d.WedAfternoon = 0 and d.WedNight = 0 
			and d.ThuMorning = 0 and d.ThuAfternoon = 0 and d.ThuNight = 0 and d.FriMorning = 0 and d.FriAfternoon = 0 and d.FriNight = 0 and d.SatMorning = 0 and d.SatAfternoon = 0 and d.SatNight = 0
			and d.SunMorning = 0 and d.SunAfternoon = 0 and d.SunNight = 0 then 1 else 0 end,
		case when SourceWebSite in ('58','兼职猫') then left(convert(nvarchar,dateadd(d,0,datediff(d,0,PublishDate)),120),10) + ' ' + left(cast(dateadd(SECOND, cast(ABS(CHECKSUM(NewId())) as int), convert(time, '00:00')) as nvarchar(50)),8) else PublishDate end, 
			GETDATE(), GETDATE(),@JobAllocateTypeId
	from ReptileData d
	join Region r on r.RegionId = d.CityId and r.ImportReptile = 1
	join Region sr on sr.RegionId = d.RegionId and sr.ParentRegionId = r.RegionId
	join School s on s.Name = '其他学校'
	join CampusJobCategory p on p.Name = d.CategoryName
	where Imported = 0 and d.DateCreated > DATEADD(m,-1,DATEDIFF(d,0,getdate())) and JobTypeId = 2 

	update d
	set Imported = 1
	from ReptileData d
	join Region r on r.RegionId = d.CityId and r.ImportReptile = 1
	join Region sr on sr.RegionId = d.RegionId and sr.ParentRegionId = r.RegionId
	join CampusJobCategory p on p.Name = d.CategoryName
	where Imported = 0 and d.DateCreated > DATEADD(m,-1,DATEDIFF(d,0,getdate())) and JobTypeId = 2 

	insert into InternJob(CompanyId, CompanyName, Title, JobTypeId, StatusId, CategoryId, RegionId, WageUnitId, Wage, IncludeDinner, IncludeRoom, IncludeCommission,
		Gender, Deposit, PeopleRequired, Contact, ContactPhone, Address, DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, ViewTimes, Recommended, Reptile, SourceWebSite,
		MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon, ThuNight, FriMorning,
		FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, IgnoreTimeSheet, DatePublished, DateCreated, DateModified,JobAllocateTypeId)
	select null, CompanyName, Title, JobTypeId, 
		case when r.RequireVerify = 0 and Title not like '%网络兼职%' and Title not like '%淘宝%' and Title not like '%刷单%' and Title not like '%模特%' and Title not like '%按摩%' 
			and Title not like '%洗碗工%' and Title not like '%酒吧%' and Title not like '%小费%' and Title not like '%刷信誉%' and Title not like '%在家%' 
			and Title not like '%有电脑即可%' and Title not like '%大学生打码%' and Title not like '%刷钻%' and Title not like '%手机兼职%' then 
			case 
				when SourceWebSite = '1010' then 2
				when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) = '时' and isnull(nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),''),0) between 8 and 18 then 2
				when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) = '天' and isnull(nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),''),0) between 40 and 150 then 2
				when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) = '月' and isnull(nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),''),0) between 500 and 3500 then 2 else 1
			end
		else 1 end, 
		c.CategoryId, d.RegionId, 
		case when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) <> '次' then u.UnitId else null end, 
		case when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) <> '次' then nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),'') else null end, 
		isnull(IncludeDinner,0) IncludeDinner, isnull(IncludeRoom,0) IncludeRoom, isnull(IncludeCommission,0) IncludeCommission, isnull(Gender,2) Gender, 0, PeopleRequired, Contact, ContactPhone, Address,
		GETDATE(), DATEADD(m,1,getdate()), WorkFrom, WorkEnd, Description, 0, 0, 1, SourceWebSite, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon, ThuNight, FriMorning,
		FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, 
		case when d.MonMorning = 0 and d.MonAfternoon = 0 and d.MonNight = 0 and d.TueMorning = 0 and d.TueAfternoon = 0 and d.TueNight = 0 and d.WedMorning = 0 and d.WedAfternoon = 0 and d.WedNight = 0 
			and d.ThuMorning = 0 and d.ThuAfternoon = 0 and d.ThuNight = 0 and d.FriMorning = 0 and d.FriAfternoon = 0 and d.FriNight = 0 and d.SatMorning = 0 and d.SatAfternoon = 0 and d.SatNight = 0
			and d.SunMorning = 0 and d.SunAfternoon = 0 and d.SunNight = 0 then 1 else 0 end,
		case when SourceWebSite in ('58','兼职猫') then left(convert(nvarchar,dateadd(d,0,datediff(d,0,PublishDate)),120),10) + ' ' + left(cast(dateadd(SECOND, cast(ABS(CHECKSUM(NewId())) as int), convert(time, '00:00')) as nvarchar(50)),8) else PublishDate end, 
			GETDATE(), GETDATE(),@JobAllocateTypeId
	from ReptileData d
	join Region r on r.RegionId = d.CityId and r.ImportReptile = 1
	join Region sr on sr.RegionId = d.RegionId and sr.ParentRegionId = r.RegionId
	join InternJobCategory c on c.Name = d.CategoryName
	left join WageUnit u on u.Name = RIGHT(d.Wage, 1) and RIGHT(Wage, 1) <> '次'
	left join Term t on t.Name = d.Term
	where Imported = 0 and d.DateCreated > DATEADD(m,-1,DATEDIFF(d,0,getdate())) and JobTypeId = 3 

	update d
	set Imported = 1
	from ReptileData d
	join Region r on r.RegionId = d.CityId and r.ImportReptile = 1
	join Region sr on sr.RegionId = d.RegionId and sr.ParentRegionId = r.RegionId
	join InternJobCategory c on c.Name = d.CategoryName
	where Imported = 0 and d.DateCreated > DATEADD(m,-1,DATEDIFF(d,0,getdate())) and JobTypeId = 3 

	insert into ServiceJob(CompanyId, CompanyName, Title, JobTypeId, StatusId, CategoryId, PositionId, RegionId, WageUnitId, Wage, IncludeDinner, IncludeRoom, IncludeCommission,
		TermId, Gender, Deposit, PeopleRequired, Contact, ContactPhone, Address, DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, ViewTimes, Recommended, Reptile, SourceWebSite,
		MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon, ThuNight, FriMorning,
		FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, IgnoreTimeSheet, DatePublished, DateCreated, DateModified,JobAllocateTypeId)
	select null, CompanyName, Title, JobTypeId, 
		case when r.RequireVerify = 0 and Title not like '%网络兼职%' and Title not like '%淘宝%' and Title not like '%刷单%' and Title not like '%模特%' and Title not like '%按摩%' 
			and Title not like '%洗碗工%' and Title not like '%酒吧%' and Title not like '%小费%' and Title not like '%刷信誉%' and Title not like '%在家%' 
			and Title not like '%有电脑即可%' and Title not like '%大学生打码%' and Title not like '%刷钻%' and Title not like '%手机兼职%' then 
			case 
				when SourceWebSite = '1010' then 2
				when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) = '时' and isnull(nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),''),0) between 8 and 18 then 2
				when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) = '天' and isnull(nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),''),0) between 40 and 150 then 2
				when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) = '月' and isnull(nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),''),0) between 500 and 3500 then 2 else 1
			end
		else 1 end, 
		c.CategoryId, p.PositionId, d.RegionId, 
		case when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) <> '次' then u.UnitId else null end, 
		case when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) <> '次' then nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),'') else null end, 
		isnull(IncludeDinner,0) IncludeDinner, isnull(IncludeRoom,0) IncludeRoom, isnull(IncludeCommission,0) IncludeCommission, t.TermId, isnull(Gender,2) Gender, 0, PeopleRequired, Contact, ContactPhone, Address,
		GETDATE(), DATEADD(m,1,getdate()), WorkFrom, WorkEnd, Description, 0, 0, 1, SourceWebSite, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon, ThuNight, FriMorning,
		FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, 
		case when d.MonMorning = 0 and d.MonAfternoon = 0 and d.MonNight = 0 and d.TueMorning = 0 and d.TueAfternoon = 0 and d.TueNight = 0 and d.WedMorning = 0 and d.WedAfternoon = 0 and d.WedNight = 0 
			and d.ThuMorning = 0 and d.ThuAfternoon = 0 and d.ThuNight = 0 and d.FriMorning = 0 and d.FriAfternoon = 0 and d.FriNight = 0 and d.SatMorning = 0 and d.SatAfternoon = 0 and d.SatNight = 0
			and d.SunMorning = 0 and d.SunAfternoon = 0 and d.SunNight = 0 then 1 else 0 end,
		case when SourceWebSite in ('58','兼职猫') then left(convert(nvarchar,dateadd(d,0,datediff(d,0,PublishDate)),120),10) + ' ' + left(cast(dateadd(SECOND, cast(ABS(CHECKSUM(NewId())) as int), convert(time, '00:00')) as nvarchar(50)),8) else PublishDate end, 
		GETDATE(), GETDATE(),@JobAllocateTypeId
	from ReptileData d
	join Region r on r.RegionId = d.CityId and r.ImportReptile = 1
	join Region sr on sr.RegionId = d.RegionId and sr.ParentRegionId = r.RegionId
	join ServiceJobCategory c on c.Name = d.SubCategoryName
	join ServiceJobPosition p on p.Name = d.CategoryName
	left join WageUnit u on u.Name = RIGHT(d.Wage, 1) and RIGHT(Wage, 1) <> '次'
	left join Term t on t.Name = d.Term
	where Imported = 0 and d.DateCreated > DATEADD(m,-1,DATEDIFF(d,0,getdate())) and JobTypeId = 4 

	update d
	set Imported = 1
	from ReptileData d
	join Region r on r.RegionId = d.CityId and r.ImportReptile = 1
	join Region sr on sr.RegionId = d.RegionId and sr.ParentRegionId = r.RegionId
	join ServiceJobCategory c on c.Name = d.SubCategoryName
	join ServiceJobPosition p on p.Name = d.CategoryName
	where Imported = 0 and d.DateCreated > DATEADD(m,-1,DATEDIFF(d,0,getdate())) and JobTypeId = 4 

	insert into TutorJob(CompanyId, CompanyName, Title, JobTypeId, StatusId, LevelId, PaperId, RegionId,  WageUnitId, Wage, IncludeDinner, IncludeRoom, IncludeCommission,
		TermId, Gender, Deposit, PeopleRequired, Contact, ContactPhone, Address, DateFrom, DateExpiry, WorkFrom, WorkEnd, Description, ViewTimes, Recommended, Reptile, SourceWebSite,
		MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon, ThuNight, FriMorning,
		FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, IgnoreTimeSheet, DatePublished, DateCreated, DateModified,JobAllocateTypeId)
	select null, CompanyName, Title, JobTypeId, 
		case when r.RequireVerify = 0 and Title not like '%网络兼职%' and Title not like '%淘宝%' and Title not like '%刷单%' and Title not like '%模特%' and Title not like '%按摩%' 
			and Title not like '%洗碗工%' and Title not like '%酒吧%' and Title not like '%小费%' and Title not like '%刷信誉%' and Title not like '%在家%' 
			and Title not like '%有电脑即可%' and Title not like '%大学生打码%' and Title not like '%刷钻%' and Title not like '%手机兼职%' then 
			case 
				when SourceWebSite = '1010' then 2 
				when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) = '时' and isnull(nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),''),0) between 8 and 18 then 2
				when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) = '天' and isnull(nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),''),0) between 40 and 150 then 2
				when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) = '月' and isnull(nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),''),0) between 500 and 3500 then 2 else 1
			end
		else 1 end, 
		l.LevelId, p.PaperId, d.RegionId, 
		case when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) <> '次' then u.UnitId else null end, 
		case when SourceWebSite in ('58','兼职猫') and RIGHT(Wage, 1) <> '次' then nullif(SUBSTRING(Wage,0,CHARINDEX('元', Wage)),'') else null end, 
		isnull(IncludeDinner,0) IncludeDinner, isnull(IncludeRoom,0) IncludeRoom, isnull(IncludeCommission,0) IncludeCommission, t.TermId, isnull(Gender,2) Gender, 0, PeopleRequired, Contact, ContactPhone, Address,
		GETDATE(), DATEADD(m,1,getdate()), WorkFrom, WorkEnd, Description, 0, 0, 1, SourceWebSite, MonMorning, MonAfternoon, MonNight, TueMorning, TueAfternoon, TueNight, WedMorning, WedAfternoon, WedNight, ThuMorning, ThuAfternoon, ThuNight, FriMorning,
		FriAfternoon, FriNight, SatMorning, SatAfternoon, SatNight, SunMorning, SunAfternoon, SunNight, 
		case when d.MonMorning = 0 and d.MonAfternoon = 0 and d.MonNight = 0 and d.TueMorning = 0 and d.TueAfternoon = 0 and d.TueNight = 0 and d.WedMorning = 0 and d.WedAfternoon = 0 and d.WedNight = 0 
			and d.ThuMorning = 0 and d.ThuAfternoon = 0 and d.ThuNight = 0 and d.FriMorning = 0 and d.FriAfternoon = 0 and d.FriNight = 0 and d.SatMorning = 0 and d.SatAfternoon = 0 and d.SatNight = 0
			and d.SunMorning = 0 and d.SunAfternoon = 0 and d.SunNight = 0 then 1 else 0 end,
		case when SourceWebSite in ('58','兼职猫') then left(convert(nvarchar,dateadd(d,0,datediff(d,0,PublishDate)),120),10) + ' ' + left(cast(dateadd(SECOND, cast(ABS(CHECKSUM(NewId())) as int), convert(time, '00:00')) as nvarchar(50)),8) else PublishDate end, 
		GETDATE(), GETDATE(),@JobAllocateTypeId
	from ReptileData d
	join Region r on r.RegionId = d.CityId and r.ImportReptile = 1
	join Region sr on sr.RegionId = d.RegionId and sr.ParentRegionId = r.RegionId
	join TutorJobLevel l on l.Name = d.SubCategoryName
	join TutorJobPaper p on p.Name = d.CategoryName
	left join WageUnit u on u.Name = RIGHT(d.Wage, 1) and RIGHT(Wage, 1) <> '次'
	left join Term t on t.Name = d.Term
	where Imported = 0 and d.DateCreated > DATEADD(m,-1,DATEDIFF(d,0,getdate())) and JobTypeId = 5 

	update d
	set Imported = 1
	from ReptileData d
	join Region r on r.RegionId = d.CityId and r.ImportReptile = 1
	join Region sr on sr.RegionId = d.RegionId and sr.ParentRegionId = r.RegionId
	join TutorJobLevel l on l.Name = d.SubCategoryName
	join TutorJobPaper p on p.Name = d.CategoryName
	where Imported = 0 and d.DateCreated > DATEADD(m,-1,DATEDIFF(d,0,getdate())) and JobTypeId = 5 
	commit tran
end


GO
/****** Object:  StoredProcedure [dbo].[job_import_user_manually]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_import_user_manually]
as
begin
    set transaction isolation level read uncommitted
	set nocount on
	begin tran

	declare @table table(Mobile nvarchar(50))
	declare @top int = ABS(CHECKSUM(NewId())) % 10
	insert into @table(Mobile)
	select top (@top) Mobile from [ExcelData] e 	where  e.Imported = 0  and  not exists(select * from [user] u where u.Mobile= e.Mobile)  

	insert into [user] (Mobile,SchoolId,FullName,Password,Salt,Device,DeviceToken,RegionId,[Version],DownloadFromApplicationId ,VoiceAlert,Vibrate,IsLogin,NotificationCount,DateCreated,DateModified,[Manual])
	select  e.Mobile,SchoolId,FullName,Password,Salt,'IOS' Device,'2b734c003f91d68f43b7aa9051c01b333a27645a7de5fa91fe1a27487dfcb976' DeviceToken,5 RegionId,'2.4.0' [Version],DownloadFromApplicationId,1,1,1,0,getdate(),getdate(),1 from [ExcelData] e 
	join @table temp on temp.Mobile = e.Mobile

	declare @Mobile nvarchar(50)
	declare cur cursor for select Mobile from @table

	open cur
	fetch next from cur into @Mobile
	while @@FETCH_STATUS = 0
	begin
		insert into PromoterRegistration (PromoterUserId ,UserId)
		select 
		(select top 1 UserId from PromoterTeamMember ptm 
		join PromoterTeam pt on ptm.TeamId = pt.TeamId 
		join Promoter p on p.PromoterId = pt.PromoterId where p.promoterid = 2071 order by newid()),
		UserId 
		from [user] u
		where u.mobile = @Mobile

		fetch next from cur into @Mobile
	end
	close cur
	deallocate cur

	update t set t.Imported = 1 from ExcelData t join @table temp on temp.Mobile = t.Mobile



	--select top 10 cast(Mobile as varchar(50)) as Mobile,SchoolId,FullName,Password,Salt,DownloadFromApplicationId,1,1,1,0,getdate(),getdate() from [ExcelData] e 
	--where  not exists(select * from [user] u where u.Mobile= e.Mobile )  
	commit tran
end


GO
/****** Object:  StoredProcedure [dbo].[job_update_fake_view_times]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_update_fake_view_times]
as
begin set transaction isolation level read uncommitted	set nocount on
	update ActivityJob 
	set FakeViewTimes = case 
		when DatePublished >= dateadd(d,0,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 10
		when DatePublished >= dateadd(d,-1,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 10
		when DatePublished >= dateadd(d,-2,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 5
		when DatePublished >= dateadd(d,-6,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 3
		when DatePublished >= dateadd(d,-10,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 1
		else FakeViewTimes end
	where StatusId = 2 and DatePublished >= dateadd(d,-10,datediff(d,0,GETDATE()))
	
	update CampusJob 
	set FakeViewTimes = case 
		when DatePublished >= dateadd(d,0,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 10
		when DatePublished >= dateadd(d,-1,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 10
		when DatePublished >= dateadd(d,-2,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 5
		when DatePublished >= dateadd(d,-6,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 3
		when DatePublished >= dateadd(d,-10,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 1
		else FakeViewTimes end
	where StatusId = 2 and DatePublished >= dateadd(d,-10,datediff(d,0,GETDATE()))

	update InternJob 
	set FakeViewTimes = case 
		when DatePublished >= dateadd(d,0,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 10
		when DatePublished >= dateadd(d,-1,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 10
		when DatePublished >= dateadd(d,-2,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 5
		when DatePublished >= dateadd(d,-6,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 3
		when DatePublished >= dateadd(d,-10,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 1
		else FakeViewTimes end
	where StatusId = 2 and DatePublished >= dateadd(d,-10,datediff(d,0,GETDATE()))

	update ServiceJob 
	set FakeViewTimes = case 
		when DatePublished >= dateadd(d,0,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 10
		when DatePublished >= dateadd(d,-1,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 10
		when DatePublished >= dateadd(d,-2,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 5
		when DatePublished >= dateadd(d,-6,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 3
		when DatePublished >= dateadd(d,-10,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 1
		else FakeViewTimes end
	where StatusId = 2 and DatePublished >= dateadd(d,-10,datediff(d,0,GETDATE()))

	update TutorJob 
	set FakeViewTimes = case 
		when DatePublished >= dateadd(d,0,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 10
		when DatePublished >= dateadd(d,-1,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 10
		when DatePublished >= dateadd(d,-2,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 5
		when DatePublished >= dateadd(d,-6,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 3
		when DatePublished >= dateadd(d,-10,datediff(d,0,GETDATE())) and DATEPART(HOUR, GETDATE()) between 9 and 23 then FakeViewTimes + ABS(CHECKSUM(NewId())) % 1
		else FakeViewTimes end
	where StatusId = 2 and DatePublished >= dateadd(d,-10,datediff(d,0,GETDATE()))
end


GO
/****** Object:  StoredProcedure [dbo].[job_update_job_sticky]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[job_update_job_sticky]
as
begin
	update ActivityJob
	set Sticky = 0 
	where StickyExpired < dateadd(d,0,datediff(d,0,getdate())) and Sticky = 1

	update CampusJob
	set Sticky = 0 
	where StickyExpired < dateadd(d,0,datediff(d,0,getdate())) and Sticky = 1

	update InternJob
	set Sticky = 0 
	where StickyExpired < dateadd(d,0,datediff(d,0,getdate())) and Sticky = 1

	update ServiceJob
	set Sticky = 0 
	where StickyExpired < dateadd(d,0,datediff(d,0,getdate())) and Sticky = 1

	update TutorJob
	set Sticky = 0 
	where StickyExpired < dateadd(d,0,datediff(d,0,getdate())) and Sticky = 1

	update ActivityJob
	set datepublished = getdate()
	where Sticky = 1

	update CampusJob
	set datepublished = getdate()
	where Sticky = 1

	update InternJob
	set datepublished = getdate()
	where Sticky = 1

	update ServiceJob
	set datepublished = getdate()
	where Sticky = 1

	update TutorJob
	set datepublished = getdate()
	where Sticky = 1
end
GO
/****** Object:  StoredProcedure [dbo].[promoter_get_promoter_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[promoter_get_promoter_list]
	@PromoterId	int,
	@DateFrom	datetime,
	@DateTo		datetime
as
begin set transaction isolation level read uncommitted	set nocount on 
		select distinct p.PromoterId  
		, p.UserName PromoterName, p.DateCreated PromoterCreated
		, t.Name TeamName, t.DateCreated TeamCreated, u.Mobile, u.FullName
		, u.UserId, m.DateCreated MemberCreated, m.Leader
		
			,SUM(case when u.UserId is null then 0 else 1 end) over(partition by p.PromoterId) PromoterCount, 
			count(0) over(partition by p.PromoterId) PromoterSpan, 
			SUM(case when u.UserId is null then 0 else 1 end) over(partition by t.teamId) TeamCount, 
			SUM(case when u.UserId is null then 0 else 1 end) over() TotalCount
		from Promoter  p
		left join PromoterTeam t on t.PromoterId = p.PromoterId and t.DateDeleted is null
		left join PromoterTeamMember m on m.TeamId = t.TeamId
		left join [User] u on u.UserId = m.UserId
		where p.DateDeleted is null and  p.PromoterId = @PromoterId			 
			and (p.DateCreated > @DateFrom or @DateFrom is null)
			and (p.DateCreated < DateAdd(d,1,@DateTo) or @DateTo is null)
	order by PromoterCreated, TeamCreated, MemberCreated 
end

GO
/****** Object:  StoredProcedure [dbo].[promoter_registration_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[promoter_registration_user]
    @BeginDate			date,
	@EndDate			date,
	@PromoterUserId		bigint,
	@PromoterUserNameORMobile nvarchar(50),
	@schoolname			nvarchar(30),
	@UserMobile			nvarchar(30),
	@DeviceVersion		 nvarchar(30)
  as 
begin set transaction isolation level read uncommitted	set nocount on
 --declare @PromoterUserId nvarchar(10),@schoolname nvarchar(30)
 --select  @PromoterUserId='1234' 
 --,@schoolname='宁波大学'

	select @EndDate=dateadd(day,1,@EndDate)
	declare @schoolid int, @Userid bigint
	if  @schoolname=''
	   select @schoolid =null
	else
	   select @schoolid = schoolid from school where name like @schoolname + '%'
	if  @UserMobile=''
	   select @userid =null
	else
	   select @userid = userid from [user] where Mobile like @UserMobile+'%'
    if @DeviceVersion=''
	  select @DeviceVersion =null

	select
		pr.PromoterUserId PromoterCode--推荐码
		,isnull(pu.FullName,'未知姓名')+'('+pu.mobile+')'  PromoterUserNameANDMobile --推荐人及手机
		,s.[Name] as UserSchoolName --用户学校
		,u.Mobile as UserMobile--用户联系方式
		,isnull(u.FullName,'未知姓名') UserName--用户姓名
		,isnull(u.[Device]+u.[Version],'') DeviceVersion --注册用户设备版本
		,isnull(promotercityregion.name,'') PromoterDistinct--推广人所属区域+promoterregion.Name
		,isnull(cityregion.name,'') UserDistinct--推广对象所属区域+Region.name
		,u.datecreated
	from [dbo].[User] pu 
		inner join PromoterRegistration pr ON pr.PromoterUserId=pu.UserId
		inner join [dbo].[User] u on u.UserId=pr.UserId
		inner join  [dbo].[School] s on s.SchoolId=u.SchoolId 
		inner join  [dbo].[School] ps on ps.SchoolId=pu.SchoolId 
		left join region cityregion on cityregion.[RegionId]=s.[RegionId]
		left join region promotercityregion on promotercityregion.[RegionId]=ps.[RegionId]
	WHERE (pr.datecreated  BETWEEN @BeginDate AND @EndDate)
			and (PromoterUserId  = @PromoterUserId or @PromoterUserId  is null)
			and (u.schoolid = @schoolid or @schoolid is null)
			and (u.userid = @userid or @userid is null)
			and (u.[Device] like @DeviceVersion+'%' or @DeviceVersion is null)
	ORDER BY pu.userid,s.SchoolId
end 
  

GO
/****** Object:  StoredProcedure [dbo].[promoter_update_password]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE procedure [dbo].[promoter_update_password]
	@PromoterId	int,
	@hashedPassword	nvarchar(255),
	@salt		nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on 
UPDATE [dbo].[Promoter]
   SET  [Password] = @hashedPassword
      ,[Salt] = @salt
      ,[DateModified] = getdate()
 WHERE  [PromoterId]=@PromoterId
end
GO
/****** Object:  StoredProcedure [dbo].[report_get_admin_promoter_daily]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[report_get_admin_promoter_daily]
	@BeginDate   date,
	@EndDate	 date,
	@CreatedUserId   INT, 
	@PromoterId	     INT 
as
BEGIN set transaction isolation level read uncommitted	set nocount on 
  SELECT distinct    
      [Date]
      ,view_promoter_daily.[PromoterId]
      ,[dbo].[view_promoter_daily].[PromoterName]+'【'+view_report_get_promoter_creator.UserName+'】' PromoterName
      ,[TeamId]
      ,[TeamName]
      ,[UserId]
      ,[dbo].[view_promoter_daily].[UserName]
      ,[Mobile]
      ,[InvitationCode]
      ,[Leader]
      ,ISNULL( [Total],0) Total
  FROM [dbo].[view_promoter_daily] 
	   INNER JOIN view_report_get_promoter_creator  ON [dbo].[view_promoter_daily].PromoterId=view_report_get_promoter_creator.PromoterId
   WHERE Date BETWEEN @BeginDate AND @EndDate
   AND ( @PromoterId=view_promoter_daily.PromoterId  OR  @PromoterId IS NULL) 
   AND (CreatedUserId=@CreatedUserId OR @CreatedUserId IS NULL)
   ORDER BY Date,PromoterId,TeamId,UserId,Total DESC
END

GO
/****** Object:  StoredProcedure [dbo].[report_get_admin_promoter_monthly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[report_get_admin_promoter_monthly]
	@BeginDate   date,
	@EndDate	 date,
	@CreatedUserId      INT, 
	@PromoterId	     INT 
	
as
BEGIN set transaction isolation level read uncommitted	set nocount on 
SELECT distinct    
      ISNULL( [Month],0) Month
      ,ISNULL( [DateFrom],GETDATE()) DateFrom
      ,ISNULL( [DateTo],GETDATE()) DateTo
      ,view_promoter_monthly.[PromoterId]
      ,[dbo].[view_promoter_monthly].[PromoterName]+'【'+view_report_get_promoter_creator.UserName+'】' PromoterName
      ,[TeamId]
      ,[TeamName]
      ,[UserId]
      ,[dbo].[view_promoter_monthly].[UserName]
      ,[Mobile]
      ,[InvitationCode]
      ,[Leader]
      ,ISNULL( [Total],0) Total
  FROM [dbo].[view_promoter_monthly]
	   INNER JOIN view_report_get_promoter_creator  ON [dbo].[view_promoter_monthly].PromoterId=view_report_get_promoter_creator.PromoterId
   WHERE (DateFrom  BETWEEN   @BeginDate AND   @EndDate)
   AND   ( @PromoterId=view_promoter_monthly.PromoterId  OR  @PromoterId IS NULL) 
   AND (CreatedUserId=@CreatedUserId OR @CreatedUserId IS NULL)
   ORDER BY [DateFrom]
      ,Total DESC
END 

GO
/****** Object:  StoredProcedure [dbo].[report_get_admin_promoter_total]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[report_get_admin_promoter_total]
	@CreatedUserId      INT, 
	@PromoterId	     INT
as
BEGIN set transaction isolation level read uncommitted	set nocount on
SELECT distinct  [Date]
      ,view_promoter_total.[PromoterId]
      ,[dbo].[view_promoter_total].[PromoterName]+'【'+view_report_get_promoter_creator.UserName+'】' PromoterName
      ,[TeamId]
      ,[TeamName]
      ,[UserId]
      ,[dbo].[view_promoter_total].[UserName]
      ,[Mobile]
      ,[InvitationCode]
      ,[Leader]
      ,ISNULL( [Total],0) Total
  FROM [dbo].[view_promoter_total]
	   INNER JOIN view_report_get_promoter_creator  ON [dbo].[view_promoter_total].PromoterId=view_report_get_promoter_creator.PromoterId
   WHERE ( @PromoterId=view_promoter_total.PromoterId  OR  @PromoterId IS NULL OR  @PromoterId=0)
   AND (CreatedUserId=@CreatedUserId OR @CreatedUserId IS NULL)
   ORDER BY Date,Total,PromoterId,TeamId,UserId DESC
END


GO
/****** Object:  StoredProcedure [dbo].[report_get_admin_promoter_weekly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[report_get_admin_promoter_weekly]
	@BeginDate   date,
	@EndDate	 date,
	@CreatedUserId  INT,
	@PromoterId	     INT  
as
BEGIN set transaction isolation level read uncommitted	set nocount on 

 SELECT distinct    
       [WeekNumber]
      ,ISNULL( [DateFrom],GETDATE()) DateFrom
      ,ISNULL( [DateTo],GETDATE()) DateTo
      ,view_promoter_weekly.[PromoterId]
      ,[dbo].[view_promoter_weekly].[PromoterName]+'【'+view_report_get_promoter_creator.UserName+'】' PromoterName
      ,[TeamId]
      ,[TeamName]
      ,[UserId]
      ,view_promoter_weekly.[UserName]
      ,[Mobile]
      ,[InvitationCode]
      ,[Leader]
      ,ISNULL( [Total],0) Total
  FROM [dbo].[view_promoter_weekly] 
	   INNER JOIN view_report_get_promoter_creator  ON [dbo].[view_promoter_weekly].PromoterId=view_report_get_promoter_creator.PromoterId
  WHERE DateFrom>=@BeginDate AND DateTo<=@EndDate 
   AND   ( @PromoterId=view_promoter_weekly.PromoterId  OR  @PromoterId IS NULL) 
   AND (CreatedUserId=@CreatedUserId OR @CreatedUserId IS NULL)
   ORDER BY DateFrom,Total DESC
END

GO
/****** Object:  StoredProcedure [dbo].[report_get_agent_promoter_daily]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[report_get_agent_promoter_daily]
	@BeginDate   date,
	@EndDate	 date,
	@PromoterId	   INT,
	@PromoterIds   NVARCHAR(MAX)
as
BEGIN set transaction isolation level read uncommitted	set nocount on
  SELECT distinct    
      [Date]
      ,promoter.[PromoterId]
      ,[PromoterName]
      ,[TeamId]
      ,[TeamName]
      ,view_promoter_daily.[UserId]
      ,[dbo].[view_promoter_daily].[UserName]
      ,[Mobile]
      ,[InvitationCode]
      ,[Leader]
      ,ISNULL( [Total],0) Total
  FROM [dbo].[view_promoter_daily] 
	   LEFT JOIN promoter on [dbo].[view_promoter_daily].promoterId= promoter.PromoterId  
   WHERE Date BETWEEN @BeginDate AND @EndDate
   AND ( @PromoterId=view_promoter_daily.PromoterId  OR  @PromoterId IS NULL) 
    AND  (','+@PromoterIds LIKE '%,' + CONVERT(NVARCHAR(10), view_promoter_daily.PromoterId)+',%' OR ISNULL(@PromoterIds,'')='')
   ORDER BY Date,PromoterId,TeamId,UserId,Total DESC
END


GO
/****** Object:  StoredProcedure [dbo].[report_get_agent_promoter_monthly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[report_get_agent_promoter_monthly]
	@BeginDate   date,
	@EndDate	 date,
	@PromoterId	   INT,
	@PromoterIds   NVARCHAR(MAX)
	
as
BEGIN set transaction isolation level read uncommitted	set nocount on 
SELECT distinct    
      ISNULL( [Month],0) Month
      ,ISNULL( [DateFrom],GETDATE()) DateFrom
      ,ISNULL( [DateTo],GETDATE()) DateTo
      ,view_promoter_monthly.[PromoterId]
      ,[dbo].[view_promoter_monthly].[PromoterName]
      ,[TeamId]
      ,[TeamName]
      ,[UserId]
      ,[dbo].[view_promoter_monthly].[UserName]
      ,[Mobile]
      ,[InvitationCode]
      ,[Leader]
      ,ISNULL( [Total],0) Total
  FROM [dbo].[view_promoter_monthly] 
	   INNER JOIN promoter on [dbo].[view_promoter_monthly].promoterId= promoter.PromoterId  
   WHERE (DateFrom  BETWEEN   @BeginDate AND   @EndDate)
   AND   ( @PromoterId=view_promoter_monthly.PromoterId  OR  @PromoterId IS NULL) 
    AND  (','+@PromoterIds LIKE '%,' + CONVERT(NVARCHAR(10), view_promoter_monthly.PromoterId)+',%' OR ISNULL(@PromoterIds,'')='')
   ORDER BY [DateFrom]
      ,DateTo,Total DESC
END 

GO
/****** Object:  StoredProcedure [dbo].[report_get_agent_promoter_total]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
CREATE procedure [dbo].[report_get_agent_promoter_total] 
	@PromoterId	   INT,
	@PromoterIds   NVARCHAR(MAX)
as
BEGIN set transaction isolation level read uncommitted	set nocount on
SELECT distinct    
     [Date]
      ,view_promoter_total.[PromoterId]
      ,[dbo].[view_promoter_total].[PromoterName]
      ,[TeamId]
      ,[TeamName]
      ,[UserId]
      ,[dbo].[view_promoter_total].[UserName]
      ,[Mobile]
      ,[InvitationCode]
      ,[Leader]
      ,ISNULL( [Total],0) Total
  FROM [dbo].[view_promoter_total]
	   INNER JOIN promoter on [dbo].[view_promoter_total].promoterId= promoter.PromoterId  
   WHERE ( @PromoterId=view_promoter_total.PromoterId  OR  @PromoterId IS NULL OR  @PromoterId=0) 
    AND  (promoter.PromoterId in (select cast(string as int) from dbo.fn_split_string_by(@PromoterIds,',')) OR ISNULL(@PromoterIds,'')='')
   ORDER BY Date,Total,PromoterId,TeamId,UserId DESC
END




GO
/****** Object:  StoredProcedure [dbo].[report_get_agent_promoter_weekly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[report_get_agent_promoter_weekly]
	@BeginDate   date,
	@EndDate	 date,
	@PromoterId	   INT,
	@PromoterIds   NVARCHAR(MAX)
as
BEGIN set transaction isolation level read uncommitted	set nocount on 

 SELECT distinct    
      [WeekNumber]
      ,ISNULL( [DateFrom],GETDATE()) DateFrom
      ,ISNULL( [DateTo],GETDATE()) DateTo
      ,view_promoter_weekly.[PromoterId]
      ,[dbo].[view_promoter_weekly].[PromoterName]
      ,[TeamId]
      ,[TeamName]
      ,[UserId]
      ,view_promoter_weekly.[UserName]
      ,[Mobile]
      ,[InvitationCode]
      ,[Leader]
      ,ISNULL( [Total],0) Total
  FROM [dbo].[view_promoter_weekly] 
	   INNER JOIN promoter on [dbo].[view_promoter_weekly].promoterId= promoter.PromoterId  
  WHERE DateFrom>=@BeginDate AND DateTo<=@EndDate 
   AND   ( @PromoterId=view_promoter_weekly.PromoterId  OR  @PromoterId IS NULL) 
    AND  (','+@PromoterIds LIKE '%,' + CONVERT(NVARCHAR(10), view_promoter_weekly.PromoterId)+',%' OR ISNULL(@PromoterIds,'')='')
   ORDER BY DateFrom,Total DESC
END

GO
/****** Object:  StoredProcedure [dbo].[report_get_deviceversion_daily]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[report_get_deviceversion_daily]
	@BeginDate   date,
	@EndDate	 date,
	@Device	     NVARCHAR(50),
	@Version     NVARCHAR(50)
as
BEGIN set transaction isolation level read uncommitted	set nocount on
  SELECT  [ReportId]
      ,[Date]
      ,CASE WHEN [Device]='' THEN '未知设备'  ELSE Device END  Device
      ,CASE WHEN [Version]='' THEN '未知版本'  ELSE Version END  Version 
      ,[Total]
      ,[DateCreated]
  FROM [dbo].[DeviceVersionDaily]
   WHERE Date BETWEEN @BeginDate AND @EndDate
   AND   ( @Device=Device  OR  @Device IS NULL)
   AND   ( @Version=Version   OR  @Version IS NULL)
   ORDER BY Date,Device,Version
END

 
 

GO
/****** Object:  StoredProcedure [dbo].[report_get_deviceversion_monthly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO










create procedure [dbo].[report_get_deviceversion_monthly]
	@BeginDate   date,
	@EndDate	 date,
	@Device	     NVARCHAR(50),
	@Version     NVARCHAR(50)
as
BEGIN set transaction isolation level read uncommitted	set nocount on 
  SELECT [ReportId]
      ,[Month]
      ,[DateFrom]
      ,[DateTo]
      ,CASE WHEN [Device]='' THEN '未知设备'  ELSE Device END  Device
      ,CASE WHEN [Version]='' THEN '未知版本'  ELSE Version END  Version 
      ,[Total]
      ,[DateCreated]
  FROM [dbo].[DeviceVersionMonthly]
   WHERE (DateFrom  BETWEEN   @BeginDate AND   @EndDate)
   AND   ( @Device=Device  OR  @Device IS NULL)
   AND   ( @Version=Version   OR  @Version IS NULL)
   ORDER BY [DateFrom]
      ,[DateTo],Device,Version



END
















GO
/****** Object:  StoredProcedure [dbo].[report_get_deviceversion_total]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[report_get_deviceversion_total] 
	@Device	     NVARCHAR(50)
as
BEGIN set transaction isolation level read uncommitted	set nocount on
SELECT [ReportId]
      ,[Date]
      ,CASE WHEN [Device]='' THEN '未知设备'  ELSE Device END  Device
      ,CASE WHEN [Version]='' THEN '未知版本'  ELSE Version END  Version 
      ,[Total]
      ,[CurrentWeekActiveTotal]
      ,[CurrentMonthActiveTotal]
      ,[DateCreated]
  FROM [dbo].[DeviceVersionTotal]
   WHERE Date=CONVERT(DATE,DATEADD(DAY,-1,GETDATE()))
   AND   ( @Device=Device  OR  @Device IS NULL)
   ORDER BY Date,Device,Version
END


GO
/****** Object:  StoredProcedure [dbo].[report_get_deviceversion_weekly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[report_get_deviceversion_weekly]
	@BeginDate   date,
	@EndDate	 date,
	@Device	     NVARCHAR(50),
	@Version     NVARCHAR(50)
as
BEGIN set transaction isolation level read uncommitted	set nocount on 

  SELECT [ReportId]
      ,[WeekNumber]
      ,[DateFrom]
      ,[DateTo]
      ,CASE WHEN [Device]='' THEN '未知设备'  ELSE Device END  Device
      ,CASE WHEN [Version]='' THEN '未知版本'  ELSE Version END  Version 
      ,[Total]
      ,[DateCreated]
  FROM [dbo].[DeviceVersionWeekly]
  WHERE DateFrom>=@BeginDate AND DateTo<=@EndDate  
   AND   ( @Device=Device  OR  @Device IS NULL)
   AND   ( @Version=Version   OR  @Version IS NULL)
   ORDER BY DateFrom,Device,Version
END

GO
/****** Object:  StoredProcedure [dbo].[report_get_job_daily]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--EXEC report_get_job_subtype @TypeId=2

 
create procedure [dbo].[report_get_job_daily]
    @BeginDate   date,
	@EndDate	 date,
	@CityId int,
	@JobTypeId INT,
	@JobCategoryId INT ,
	@GroupId INT,
	@SelectedCitieIds NVARCHAR(MAX)
as
BEGIN set transaction isolation level read uncommitted	set nocount on 
SELECT @SelectedCitieIds=@SelectedCitieIds+',-1,'

SELECT  Date
	  ,SUM(1) over(partition by  Date) DateCount 
      ,CityId
      ,CASE WHEN [CityName]='' THEN '未知城市' ELSE CityName END CityName
	  ,SUM(1) over(partition by  Date,CityId) CityCount 
      --,RegionId
      --,RegionName
      ,JobTypeId
      ,JobTypeName
	  ,SUM(1) over(partition by  Date,CityId,JobTypeId) JobTypeCount 
      ,JobCategoryId
      ,JobCategoryName
	  ,SUM(1) over(partition by  Date,CityId,JobTypeId, JobCategoryId) JobCategoryIdCount  
      ,ISNULL(SUM(PublishCount),0) PublishCount
      ,ISNULL(SUM(ViewCount),0) ViewCount
      ,ISNULL(SUM(ApplyCount) ,0)ApplyCount
      ,ISNULL(SUM(ContactCount),0) ContactCount 
  FROM dbo.JobDaily 
   WHERE Date BETWEEN @BeginDate AND @EndDate
   AND (CityId=@CityId OR @CityId IS NULL)
   AND (JobTypeId=@JobTypeId OR @JobTypeId  IS NULL)
   AND (JobCategoryId=@JobCategoryId OR @JobCategoryId  IS NULL)
   AND (GroupId=@GroupId OR @GroupId IS NULL)  
  AND (','+@SelectedCitieIds LIKE '%,' + CONVERT(NVARCHAR(10),RegionID)+',%' OR ','+@SelectedCitieIds LIKE '%,' + CONVERT(NVARCHAR(10),CityId)+',%' OR ISNULL(@SelectedCitieIds,'')='')
   GROUP BY Date 
      ,CityId
      ,CityName 
      ,JobTypeId
      ,JobTypeName 
      ,JobCategoryId
      ,JobCategoryName
   ORDER BY Date,CityId ,JobTypeId,JobCategoryId
END


GO
/****** Object:  StoredProcedure [dbo].[report_get_job_monthly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[report_get_job_monthly]
    @BeginDate   date,
	@EndDate	 date,
	@CityId int,
	@JobTypeId INT,
	@JobCategoryId INT ,
	@GroupId INT,
	@SelectedCitieIds NVARCHAR(MAX)
as
BEGIN set transaction isolation level read uncommitted	set nocount on 
SELECT @SelectedCitieIds=@SelectedCitieIds+',-1,'

SELECT   [Month]
,DateFrom
,DateTo
	  ,SUM(1) over(partition by  DateFrom) DateCount 
      ,CityId
      ,CASE WHEN [CityName]='' THEN '未知城市' ELSE CityName END CityName
	  ,SUM(1) over(partition by  DateFrom,CityId) CityCount 
      --,RegionId
      --,RegionName
      ,JobTypeId
      ,JobTypeName
	  ,SUM(1) over(partition by  DateFrom,CityId,JobTypeId) JobTypeCount 
      ,JobCategoryId
      ,JobCategoryName
	  ,SUM(1) over(partition by  DateFrom,CityId,JobTypeId, JobCategoryId) JobCategoryIdCount  
      ,ISNULL(SUM(PublishCount),0) PublishCount
      ,ISNULL(SUM(ViewCount),0) ViewCount
      ,ISNULL(SUM(ApplyCount) ,0)ApplyCount
      ,ISNULL(SUM(ContactCount),0) ContactCount 
  FROM dbo.JobMonthly
   WHERE DateFrom  BETWEEN   @BeginDate AND   @EndDate
   AND (CityId=@CityId OR @CityId IS NULL)
   AND (JobTypeId=@JobTypeId OR @JobTypeId  IS NULL)
   AND (JobCategoryId=@JobCategoryId OR @JobCategoryId  IS NULL)
   AND (GroupId=@GroupId OR @GroupId IS NULL)  
  AND (','+@SelectedCitieIds LIKE '%,' + CONVERT(NVARCHAR(10),RegionID)+',%' OR ','+@SelectedCitieIds LIKE '%,' + CONVERT(NVARCHAR(10),CityId)+',%' OR ISNULL(@SelectedCitieIds,'')='')
   GROUP BY  [Month]
,DateFrom
,DateTo
      ,CityId
      ,CityName 
      ,JobTypeId
      ,JobTypeName 
      ,JobCategoryId
      ,JobCategoryName
   ORDER BY  [Month],DateFrom,DateTo,CityId ,JobTypeId,JobCategoryId
   END
GO
/****** Object:  StoredProcedure [dbo].[report_get_job_weekly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	
create procedure [dbo].[report_get_job_weekly]
    @BeginDate   date,
	@EndDate	 date,
	@CityId int,
	@JobTypeId INT,
	@JobCategoryId INT ,
	@GroupId INT,
	@SelectedCitieIds NVARCHAR(MAX)
as
BEGIN set transaction isolation level read uncommitted	set nocount on 
SELECT @SelectedCitieIds=@SelectedCitieIds+',-1,'

SELECT [WeekNumber] 
,DateFrom 
,[DateTo]
	  ,SUM(1) over(partition by  DateFrom) DateCount 
      ,CityId
      ,CASE WHEN [CityName]='' THEN '未知城市' ELSE CityName END CityName
	  ,SUM(1) over(partition by  DateFrom,CityId) CityCount 
      --,RegionId
      --,RegionName
      ,JobTypeId
      ,JobTypeName
	  ,SUM(1) over(partition by  DateFrom,CityId,JobTypeId) JobTypeCount 
      ,JobCategoryId
      ,JobCategoryName
	  ,SUM(1) over(partition by  DateFrom,CityId,JobTypeId, JobCategoryId) JobCategoryIdCount  
      ,ISNULL(SUM(PublishCount),0) PublishCount
      ,ISNULL(SUM(ViewCount),0) ViewCount
      ,ISNULL(SUM(ApplyCount) ,0)ApplyCount
      ,ISNULL(SUM(ContactCount),0) ContactCount 
  FROM dbo.JobWeekly 
  WHERE DateFrom>=@BeginDate AND DateTo<=@EndDate  
   AND (CityId=@CityId OR @CityId IS NULL)
   AND (JobTypeId=@JobTypeId OR @JobTypeId  IS NULL)
   AND (JobCategoryId=@JobCategoryId OR @JobCategoryId  IS NULL)
   AND (GroupId=@GroupId OR @GroupId IS NULL)  
  AND (','+@SelectedCitieIds LIKE '%,' + CONVERT(NVARCHAR(10),RegionID)+',%' OR ','+@SelectedCitieIds LIKE '%,' + CONVERT(NVARCHAR(10),CityId)+',%' OR ISNULL(@SelectedCitieIds,'')='')
   GROUP BY [WeekNumber] 
,DateFrom 
,[DateTo]
      ,CityId
      ,CityName 
      ,JobTypeId
      ,JobTypeName 
      ,JobCategoryId
      ,JobCategoryName
   ORDER BY [WeekNumber] 
,DateFrom 
,[DateTo],CityId ,JobTypeId,JobCategoryId
END

GO
/****** Object:  StoredProcedure [dbo].[report_get_latest_month]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create procedure  [dbo].[report_get_latest_month]
  @TopNumber	int
as
begin set transaction isolation level read uncommitted	set nocount on 
-- 今天前表里所有的年月
SELECT TOP (ISNULL(@TopNumber,1000)) row_number() over(ORDER BY [Year] DESC,[MonthName] DESC )  RowNumber,  [Year]
	   ,Month
      ,[MonthName] 
	  ,CONVERT(VARCHAR(4),Year)+'-'+CONVERT(VARCHAR(4),MonthName) YearMonth 
FROM [dbo].[Date]
WHERE   GETDATE()>[dbo].[Date].Date   
--WHERE   DATEADD(MONTH,-1, GETDATE())>[dbo].[Date].Date   
GROUP BY [Year],Month,[MonthName]
 
end


GO
/****** Object:  StoredProcedure [dbo].[report_get_latest_week]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--CREATE procedure dbo.agent_get_joballocatetypegroup
 
--as
--BEGIN set transaction isolation level read uncommitted	set nocount on 
--SELECT [GroupId]
--      ,[Name]
--      ,[DateCreated]
--  FROM [dbo].[JobAllocateTypeGroup] 
--END
CREATE procedure [dbo].[report_get_latest_week]
  @TopNumber	int
as
begin set transaction isolation level read uncommitted	set nocount on
--上周第一天ID，今天的所对应上周ID
DECLARE @TodayBeginWeekDateId INT,@TodayDateId INT
SELECT  @TodayBeginWeekDateId=[DateId] -DayInWeek+1,@TodayDateId=[DateId]
  FROM [dbo].[Date]
  WHERE DATEPART(year,  Dateadd( DAY,-7,GETDATE()))=[dbo].[Date].Year AND CONVERT(DATE, Dateadd( DAY,-7,GETDATE()) ,21)=Date  
--SELECT * FROM
--dbo.Date
--WHERE DateId BETWEEN   @TodayBeginWeekDateId-63 AND  @TodayBeginWeekDateId+6 
SELECT TOP  (@TopNumber) row_number() over(order by Year DESC,WeekNumber DESC ) RowNumber, Year,WeekNumber,MIN(Date) WeekBeginDate,MAX(Date) WeekEndDate--,MAX(DateId)  MIXDateId,MIN(DateId)  MINDateId,@TodayDateId  TodayDateId,CASE WHEN  @TodayDateId>MIN(DateId)  THEN 1 ELSE 0 END CurrentWeek
  
FROM dbo.Date 
WHERE DateId BETWEEN   @TodayBeginWeekDateId-7*(@TopNumber-1) AND  @TodayBeginWeekDateId+6    
GROUP BY Year,WeekNumber
 HAVING  @TodayDateId>=MIN(DateId)--大于当天的周不要，跨年前有可能产生的数据
 
end



GO
/****** Object:  StoredProcedure [dbo].[report_get_latest_week_fromnow]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--CREATE procedure dbo.agent_get_joballocatetypegroup
 
--as
--BEGIN set transaction isolation level read uncommitted	set nocount on 
--SELECT [GroupId]
--      ,[Name]
--      ,ISNULL( [DateCreated],GETDATE()) DateCreated
--  FROM [dbo].[JobAllocateTypeGroup] 
--END
CREATE procedure [dbo].[report_get_latest_week_fromnow]
  @TopNumber	int
as
begin set transaction isolation level read uncommitted	set nocount on
--上周第一天ID，今天的所对应上周ID
DECLARE @TodayBeginWeekDateId INT,@TodayDateId INT
SELECT  @TodayBeginWeekDateId=[DateId] -DayInWeek+1,@TodayDateId=[DateId]
  FROM [dbo].[Date]
  WHERE DATEPART(year, GETDATE())=[dbo].[Date].Year AND CONVERT(DATE,GETDATE(),21)=Date  
--SELECT * FROM
--dbo.Date
--WHERE DateId BETWEEN   @TodayBeginWeekDateId-63 AND  @TodayBeginWeekDateId+6 
SELECT TOP  (@TopNumber) row_number() over(order by Year DESC,WeekNumber DESC ) RowNumber, Year,WeekNumber,MIN(Date) WeekBeginDate,MAX(Date) WeekEndDate--,MAX(DateId)  MIXDateId,MIN(DateId)  MINDateId,@TodayDateId  TodayDateId,CASE WHEN  @TodayDateId>MIN(DateId)  THEN 1 ELSE 0 END CurrentWeek
  
FROM dbo.Date 
WHERE DateId BETWEEN   @TodayBeginWeekDateId-7*(@TopNumber-1) AND  @TodayBeginWeekDateId+6    
GROUP BY Year,WeekNumber
 HAVING  @TodayDateId>=MIN(DateId)--大于当天的周不要，跨年前有可能产生的数据
 
end




GO
/****** Object:  StoredProcedure [dbo].[report_get_promoter_agent_promoter]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[report_get_promoter_agent_promoter]
 @LoginUserId   INT 
 as
 
BEGIN set transaction isolation level read uncommitted	set nocount on
declare @usertype int
 select @usertype=TypeId from [dbo].[AgentUser]
 where @LoginUserId =userid
 IF @usertype=3
 BEGIN
 select distinct promoter.PromoterId,promoter.username PromoterName from AgentUser inner join 
promoter on AgentUser.promoterid=promoter.promoterid
where   @LoginUserId=userid
 END
 ELSE
 BEGIN
select distinct promoter.PromoterId,promoter.username PromoterName from AgentUser inner join 
promoter on promoter.CreatedByAgentUserId=AdminAgentUserID or promoter.CreatedByAgentUserId=userid or  AgentUser.promoterid=promoter.promoterid
where @LoginUserId=AdminAgentUserID or @LoginUserId=userid
END 
end

GO
/****** Object:  StoredProcedure [dbo].[report_get_promoter_creator]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[report_get_promoter_creator] 
	@PromoterId     INT 
	,@CreatorId INT
as
BEGIN set transaction isolation level read uncommitted	set nocount on 
 ----------------------------------------------------------总代与总部名下的联盟集--------------------------------------------------------------------------------------
           --总部创建的联盟 取总部名称
 SELECT [dbo].[Promoter].[PromoterId], [dbo].[Promoter].[UserName] PromoterName, [dbo].[Admin].[AdminId] CreatedUserId,[dbo].[Admin].[UserName]+'[总部]'  UserName ,1 CreatedUserType
FROM [dbo].[Promoter] INNER JOIN 
 [dbo].[Admin] ON [dbo].[Admin].AdminId=[dbo].[Promoter].[CreatedByAdminId] 
 WHERE [dbo].[Promoter].[CreatedByAgentUserId] IS NULL    AND ( @PromoterId=[dbo].[Promoter].PromoterId  OR  @PromoterId IS NULL)  AND ( @CreatorId= [dbo].[Admin].[AdminId]  OR  @CreatorId IS NULL) 
  UNION ALL --总代理的联盟 取总代名称
SELECT [dbo].[Promoter].[PromoterId], [dbo].[Promoter].[UserName] PromoterName, [dbo].[AgentUser].[UserId] CreatedUserId,[dbo].[AgentUser].[UserName],2 CreatedUserType
FROM [dbo].[Promoter] INNER JOIN 
 [dbo].[AgentUser] ON [dbo].[AgentUser].[UserId]=[dbo].[Promoter].[CreatedByAgentUserId] 
 WHERE [dbo].[Promoter].[CreatedByAdminId] IS NULL    AND ( @PromoterId=[dbo].[Promoter].PromoterId  OR  @PromoterId IS NULL)    AND ( @CreatorId= [dbo].[AgentUser].[UserId]   OR  @CreatorId IS NULL) 
       AND [dbo].[AgentUser].TypeId=1
 UNION ALL --市、校代理的联盟，取总代名称
 SELECT [dbo].[Promoter].[PromoterId], [dbo].[Promoter].[UserName] PromoterName, AgentUserParent.[UserId] CreatedUserId,AgentUserParent.[UserName],3 CreatedUserType
FROM [dbo].[Promoter] INNER JOIN 
 [dbo].[AgentUser] ON [dbo].[AgentUser].[UserId]=[dbo].[Promoter].[CreatedByAgentUserId] INNER JOIN 
 [dbo].[AgentUser] AgentUserParent ON AgentUserParent.UserId=[dbo].[AgentUser].AdminAgentUserId AND AgentUserParent.TypeId=1
 WHERE [dbo].[Promoter].[CreatedByAdminId] IS NULL    AND ( @PromoterId=[dbo].[Promoter].PromoterId  OR  @PromoterId IS NULL)    AND ( @CreatorId= AgentUserParent.[UserId]   OR  @CreatorId IS NULL) 
       AND [dbo].[AgentUser].TypeId>1 
 END

GO
/****** Object:  StoredProcedure [dbo].[report_get_promoter_daily]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[report_get_promoter_daily]
	@BeginDate   date,
	@EndDate	 date,
	@PromoterId	     INT 
	
as
BEGIN set transaction isolation level read uncommitted	set nocount on
	-- 如果所选日期包括当天日期，则更新当天实时数据先
	declare @today date = dateadd(d,0,datediff(d,0,getdate()))
	if @EndDate >= @today
	begin
		exec job_generate_promoter_stat_daily @today
	end
  SELECT [Date]
      ,[PromoterId]
      ,[PromoterName]
      ,[TeamId]
      ,[TeamName]
      ,[UserId]
      ,[UserName]
      ,[Mobile]
      ,[InvitationCode]
      ,[Leader]
      ,[Total]
      ,getdate() [DateCreated]
  FROM view_promoter_daily
   WHERE Date BETWEEN @BeginDate AND @EndDate
   AND   ( @PromoterId=PromoterId  OR  @PromoterId IS NULL) 
   ORDER BY Date,Total DESC
END

GO
/****** Object:  StoredProcedure [dbo].[report_get_promoter_monthly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[report_get_promoter_monthly]
	@BeginDate   date,
	@EndDate	 date,
	@PromoterId	     INT 
	
as
BEGIN set transaction isolation level read uncommitted	set nocount on 
SELECT [Month]
      ,[DateFrom]
      ,[DateTo]
      ,[PromoterId]
      ,[PromoterName]
      ,[TeamId]
      ,[TeamName]
      ,[UserId]
      ,[UserName]
      ,[Mobile]
      ,[InvitationCode]
      ,[Leader]
      ,[Total]
      ,getdate() [DateCreated]
  FROM view_promoter_monthly
   WHERE (DateFrom  BETWEEN   @BeginDate AND   @EndDate)
   AND   ( @PromoterId=PromoterId  OR  @PromoterId IS NULL) 
   ORDER BY [DateFrom]
      ,[DateTo],Total DESC
END






GO
/****** Object:  StoredProcedure [dbo].[report_get_promoter_total]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[report_get_promoter_total] 
	@PromoterId	     INT
as
BEGIN set transaction isolation level read uncommitted	set nocount on
SELECT [Date]
      ,[PromoterId]
      ,[PromoterName]
      ,[TeamId]
      ,[TeamName]
      ,[UserId]
      ,[UserName]
      ,[Mobile]
      ,[InvitationCode]
      ,[Leader]
      ,[Total]
      ,getdate() as [DateCreated]
  FROM view_promoter_total
   WHERE ( @PromoterId=PromoterId  OR  @PromoterId IS NULL)
   ORDER BY Date,Total DESC
END


GO
/****** Object:  StoredProcedure [dbo].[report_get_promoter_weekly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--create procedure [dbo].[report_get_promoter]
	
--as
--BEGIN set transaction isolation level read uncommitted	set nocount on 

-- SELECT [PromoterId]
--      ,[UserName] 
--  FROM [dbo].[Promoter]
--END
--go

CREATE procedure [dbo].[report_get_promoter_weekly]
	@BeginDate   date,
	@EndDate	 date,
	@PromoterId	     INT 
	
as
BEGIN set transaction isolation level read uncommitted	set nocount on 

 SELECT [WeekNumber]
      ,[DateFrom]
      ,[DateTo]
      ,[PromoterId]
      ,[PromoterName]
      ,[TeamId]
      ,[TeamName]
      ,[UserId]
      ,[UserName]
      ,[Mobile]
      ,[InvitationCode]
      ,[Leader]
      ,[Total]
      ,getdate() [DateCreated]
  FROM view_promoter_weekly
  WHERE DateFrom>=@BeginDate AND DateTo<=@EndDate 
   AND   ( @PromoterId=PromoterId  OR  @PromoterId IS NULL) 
   ORDER BY DateFrom,Total DESC
END

GO
/****** Object:  StoredProcedure [dbo].[report_get_subjobtype]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[report_get_subjobtype]
	@TypeId INT
as
BEGIN set transaction isolation level read uncommitted	set nocount on 

 SELECT * 
  FROM  view_jobtype_jobsubtype
  WHERE view_jobtype_jobsubtype.TypeId=@TypeId OR @TypeId IS NULL
END


GO
/****** Object:  StoredProcedure [dbo].[report_get_user_registration_daily]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--EXEC report_get_user_registration_school @RegionId=NULL,@SelectedCitieIds=',111,'
--GO

create procedure [dbo].[report_get_user_registration_daily]
	@BeginDate   date,
	@EndDate	 date,
	@RegionId	 INT,
	@SchoolId    INT
	,@SelectedCitieIds NVARCHAR(MAX)
as
BEGIN set transaction isolation level read uncommitted	set nocount on
	--如果所选日期包括当天日期，则更新当天实时数据先
	declare @today date = dateadd(d,0,datediff(d,0,getdate()))
	if @EndDate >= @today
	begin
		exec job_generate_user_registration_stat_daily @today
	end

SELECT @SelectedCitieIds=@SelectedCitieIds+',-1,'
  SELECT  [ReportId] ,
        [Date]
      ,[RegionId]
      ,CASE WHEN [RegionName]='' THEN '未知城市' ELSE RegionName END RegionName
      ,[SchoolId]
      ,[SchoolName] 
      ,[Total] NewUsers 
      ,[DateCreated]
  FROM [dbo].[UserRegistrationDaily]
   WHERE Date BETWEEN @BeginDate AND @EndDate
   AND   ( @RegionId=RegionId  OR  @RegionId IS NULL)
   AND   ( @SchoolId=SchoolId   OR  @SchoolId IS NULL)
  AND (','+@SelectedCitieIds LIKE '%,' + CONVERT(NVARCHAR(10),RegionId)+',%' OR ISNULL(@SelectedCitieIds,'')='')
   --AND (','+@RegionIds LIKE '%,' + CONVERT(NVARCHAR(20),RegionId)+',%' OR ISNULL(@RegionIds,'')='')
   ORDER BY Date,RegionId, RegionName,SchoolId
END

GO
/****** Object:  StoredProcedure [dbo].[report_get_user_registration_monthly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[report_get_user_registration_monthly]
	@BeginDate   date,
	@EndDate	 date,
	@RegionId	 INT,
	@SchoolId    INT
	,@SelectedCitieIds NVARCHAR(MAX)
as
BEGIN set transaction isolation level read uncommitted	set nocount on 
SELECT @SelectedCitieIds=@SelectedCitieIds+',-1,'
  SELECT [ReportId]
      ,[Month]
      ,[DateFrom]
      ,[DateTo]
      ,[RegionId]
      ,CASE WHEN [RegionName]='' THEN '未知城市' ELSE RegionName END RegionName
      ,[SchoolId]
      ,[SchoolName] 
      ,[Total] NewUsers 
      ,[DateCreated]
  FROM [dbo].[UserRegistrationMonthly]
WHERE ([dbo].[UserRegistrationMonthly].DateFrom  BETWEEN   @BeginDate AND   @EndDate)
 --AND([dbo].[UserRegistrationMonthly].DateTo  BETWEEN convert(datetime, @BeginDate) AND  convert(datetime ,@EndDate))
   AND   ( @RegionId=RegionId  OR  @RegionId IS NULL)
   AND   ( @SchoolId=SchoolId   OR  @SchoolId IS NULL)
  AND (','+@SelectedCitieIds LIKE '%,' + CONVERT(NVARCHAR(10),RegionId)+',%' OR ISNULL(@SelectedCitieIds,'')='')
   ORDER BY [DateFrom]
      ,[DateTo],RegionId, RegionName,SchoolId
END

GO
/****** Object:  StoredProcedure [dbo].[report_get_user_registration_school]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[report_get_user_registration_school]
	@RegionId int
	,@SelectedCitieIds NVARCHAR(MAX)
as
begin set transaction isolation level read uncommitted	set nocount on 
	select DISTINCT SchoolId, s.Name, r.Name RegionName,s.RegionId
	from School s
	join Region r on r.RegionId = s.RegionId
	where (r.RegionId = @RegionId or @RegionId is null   )
  AND  (','+@SelectedCitieIds LIKE '%,' + CONVERT(NVARCHAR(10), s.RegionId)+',%' OR ISNULL(@SelectedCitieIds,'')='')
	union all
	select SchoolId, Name, '',RegionId
	from School 
	where RegionId = -1
end



GO
/****** Object:  StoredProcedure [dbo].[report_get_user_registration_total]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[report_get_user_registration_total] 
	@SchoolId    INT
	,@SelectedCitieIds NVARCHAR(MAX)
as
BEGIN set transaction isolation level read uncommitted	set nocount on
SELECT @SelectedCitieIds=@SelectedCitieIds+',-1,'
 SELECT [ReportId]
      ,[Date]
      ,[RegionId]
      ,CASE WHEN [RegionName]='' THEN '未知城市' ELSE RegionName END RegionName
      ,[SchoolId]
      ,[SchoolName]
      ,[Total]
      ,[TodayTotal]
      ,[YesterdayTotal]
      ,[TodayActiveTotal]
      ,[YesterdayActiveTotal]
      ,[CurrentWeekActiveTotal]
      ,[CurrentMonthActiveTotal]
      ,[DateCreated]
  FROM [dbo].[UserRegistrationTotal]
   WHERE Date=CONVERT(DATE,DATEADD(DAY,-1,GETDATE()))
   AND   ( @SchoolId=SchoolId   OR  @SchoolId IS NULL) 
  AND (','+@SelectedCitieIds LIKE '%,' + CONVERT(NVARCHAR(10),RegionId)+',%' OR ISNULL(@SelectedCitieIds,'')='')
   ORDER BY Date,RegionId, RegionName,SchoolId
END





GO
/****** Object:  StoredProcedure [dbo].[report_get_user_registration_weekly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create procedure [dbo].[report_get_user_registration_weekly]
	@BeginDate   date,
	@EndDate	 date,
	@RegionId	 INT,
	@SchoolId    INT
	,@SelectedCitieIds NVARCHAR(MAX)
as
BEGIN set transaction isolation level read uncommitted	set nocount on
SELECT @SelectedCitieIds=@SelectedCitieIds+',-1,'
  SELECT   [ReportId]
      ,[WeekNumber]
      ,[DateFrom]
      ,[DateTo]
      ,[RegionId]
      ,CASE WHEN [RegionName]='' THEN '未知城市' ELSE RegionName END RegionName
      ,[SchoolId]
      ,[SchoolName] 
      ,[Total] NewUsers 
      ,[DateCreated]
  FROM [dbo].[UserRegistrationWeekly]
  WHERE DateFrom>=@BeginDate AND DateTo<=@EndDate  
   AND   ( @RegionId=RegionId  OR  @RegionId IS NULL)
   AND   ( @SchoolId=SchoolId   OR  @SchoolId IS NULL)
  AND (','+@SelectedCitieIds LIKE '%,' + CONVERT(NVARCHAR(10),RegionId)+',%' OR ISNULL(@SelectedCitieIds,'')='')
   ORDER BY [DateFrom]
      ,[DateTo],RegionId, RegionName,SchoolId
END

GO
/****** Object:  StoredProcedure [dbo].[report_get_user_retention]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[report_get_user_retention]
	@BeginDate   date,
	@EndDate	 date 
as
BEGIN set transaction isolation level read uncommitted	set nocount on 
  SELECT * FROM (
SELECT [ReportId]
      ,[Date]
      ,[Total]
      ,CASE WHEN [Day1] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day1,0))/Total))+'%' END AS Day1
      ,CASE WHEN [Day2] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day2,0))/Total))+'%' END AS Day2
      ,CASE WHEN [Day3] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day3,0))/Total))+'%' END AS Day3
      ,CASE WHEN [Day4] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day4,0))/Total))+'%' END AS Day4
      ,CASE WHEN [Day5] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day5,0))/Total))+'%' END AS Day5
      ,CASE WHEN [Day6] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day6,0))/Total))+'%' END AS Day6
      ,CASE WHEN [Day7] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day7,0))/Total))+'%' END AS Day7
      ,CASE WHEN [Day8] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day8,0))/Total))+'%' END AS Day8
      ,CASE WHEN [Day9] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day9,0))/Total))+'%' END AS Day9
      ,CASE WHEN [Day10] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day10,0))/Total))+'%' END AS Day10
      ,CASE WHEN [Day11] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day11,0))/Total))+'%' END AS Day11
      ,CASE WHEN [Day12] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day12,0))/Total))+'%' END AS Day12
      ,CASE WHEN [Day13] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day13,0))/Total))+'%' END AS Day13
      ,CASE WHEN [Day14] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%'ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day14,0))/Total))+'%' END AS Day14
      ,CASE WHEN [Day30] IS NULL THEN '' WHEN  ISNULL(Total,0)=0 THEN '0%' ELSE CONVERT(NVARCHAR(10),convert(decimal(18,1),100*convert(float,ISNULL(Day30,0))/Total))+'%' END AS Day30  
  FROM [dbo].[UserRetention] 
   WHERE Date BETWEEN @BeginDate AND @EndDate
   UNION ALL SELECT 0
,'2999-01-01'
,CONVERT(NVARCHAR(10),SUM([Total])) [Total]  
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day1 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day1,0))/Total) END),0)))/SUM(CASE WHEN Day1 IS NULL THEN 0 ELSE 1 END)) END)+'%'  Day1
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day2 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day2,0))/Total) END),0)))/SUM(CASE WHEN Day2 IS NULL THEN 0 ELSE 1 END))END)+'%'  Day2
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day3 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day3,0))/Total) END),0)))/SUM(CASE WHEN Day3 IS NULL THEN 0 ELSE 1 END))END)+'%'  Day3
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day4 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day4,0))/Total) END),0)))/SUM(CASE WHEN Day4 IS NULL THEN 0 ELSE 1 END))END)+'%'   Day4
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day5 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day5,0))/Total) END),0)))/SUM(CASE WHEN Day5 IS NULL   THEN 0 ELSE 1 END))END)+'%'  Day5
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day6 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day6,0))/Total) END),0)))/SUM(CASE WHEN Day6 IS NULL   THEN 0 ELSE 1 END))END)+'%' Day6
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day7 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day7,0))/Total) END),0)))/SUM(CASE WHEN Day7 IS NULL   THEN 0 ELSE 1 END))END)+'%'  Day7
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day8 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day8,0))/Total) END),0)))/SUM(CASE WHEN Day8 IS NULL   THEN 0 ELSE 1 END))END)+'%' Day8
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day9 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day9,0))/Total) END),0)))/SUM(CASE WHEN Day9 IS NULL   THEN 0 ELSE 1 END))END)+'%' Day9
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day10 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day10,0))/Total) END),0)))/SUM(CASE WHEN Day10 IS NULL   THEN 0 ELSE 1 END))END)+'%'   Day10
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day11 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day11,0))/Total) END),0)))/SUM(CASE WHEN Day11 IS NULL   THEN 0 ELSE 1 END))END)+'%'  Day11
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day12 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day12,0))/Total) END),0)))/SUM(CASE WHEN Day12 IS NULL   THEN 0 ELSE 1 END))END)+'%'  Day12
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day13 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day13,0))/Total) END),0)))/SUM(CASE WHEN Day13 IS NULL   THEN 0 ELSE 1 END))END)+'%'  Day13
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day14 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day14,0))/Total) END),0)))/SUM(CASE WHEN Day14 IS NULL   THEN 0 ELSE 1 END))END)+'%'  Day14
,CONVERT(NVARCHAR(10), CASE WHEN SUM(CASE WHEN Day30 IS NULL THEN 0 ELSE 1 END)=0 THEN 0 ELSE convert(decimal(18,1),SUM(convert(decimal(18,2),ISNULL((CASE WHEN ISNULL(Total,0)=0 THEN 0 ELSE  convert(decimal(18,1),100*convert(float,ISNULL(Day30,0))/Total) END),0)))/SUM(CASE WHEN Day30 IS NULL   THEN 0 ELSE 1 END))END)+'%'  Day30 
  FROM [dbo].[UserRetention] 
   WHERE Date BETWEEN @BeginDate AND @EndDate) AS UserRetention  
   ORDER BY Date,Total 
END


GO
/****** Object:  StoredProcedure [dbo].[report_get_user_school]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[report_get_user_school]
	@RegionId int
	,@SelectedCitieIds NVARCHAR(MAX)
as
begin set transaction isolation level read uncommitted	set nocount on 
	select DISTINCT SchoolId, s.Name, r.Name RegionName,s.RegionId
	from School s
	join Region r on r.RegionId = s.RegionId
	where (r.RegionId = @RegionId or @RegionId is null   )
  AND  (','+@SelectedCitieIds LIKE '%,' + CONVERT(NVARCHAR(10), s.RegionId)+',%' OR ISNULL(@SelectedCitieIds,'')='')
	union all
	select SchoolId, Name, '',RegionId
	from School 
	where RegionId = -1
end



GO
/****** Object:  StoredProcedure [dbo].[rpt_get_event_stats]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[rpt_get_event_stats]
as
begin

declare @TotalUser int, @cashoutusercount int, @promoteruser int,@agentPromoterUser int = 0

declare @DateFrom datetime, @DateTo datetime, @Bonus int, @Interval int, @Goal int
			select @DateFrom = DateFrom, @DateTo = DateTo, @Bonus = Bonus, @Interval = Interval, @Goal = Goal from event where getdate() between datefrom and dateto

select @TotalUser = COUNT(0) from [User] where datecreated > @DateFrom and Manual = 0 and datecreated < @DateTo


select @cashoutusercount = count(0) 
from(
select p.PromoterUserId, count(0) a 
from PromoterRegistration p
join (select PromoterUserId, min(p2.DateCreated) FirstDateCreated from PromoterRegistration p2 
		where p2.promoteruserid not in(91769,67244) and p2.datecreated > @DateFrom and p2.datecreated < @DateTo
		group by p2.PromoterUserId) sub
	on sub.PromoterUserId = p.promoteruserid
where p.promoteruserid not in(91769,67244) and p.datecreated between sub.FirstDateCreated and dateadd(hour,1,sub.FirstDateCreated) and p.datecreated > @DateFrom and p.datecreated < @DateTo
group by p.promoteruserid having count(0) > 8
) a

-- 推广团队 去除无敌团队 活动推广人数
select @promoteruser = count(0) from PromoterRegistration where datecreated > @DateFrom and datecreated < @DateTo 

select @agentPromoterUser = count(0) from PromoterRegistration pr
join [promoterteammember] m on m.UserId = pr.promoterUserid 
 where pr.datecreated > @DateFrom and pr.datecreated < @DateTo 



declare @SuccessCount bigint, @CancelCount bigint, @FailCount bigint, @OpenCount bigint, @TriggerCount bigint, @AttendCount bigint
declare @CreateUserIdSuccessCount bigint, @CreateUserIdFailCount bigint
declare @HelpRegisterCount bigint,@RegisterCount bigint

set @SuccessCount = (select  SuccessCount  from [Test.WeChat].[dbo].[ActivityShareCount])
set @CancelCount = (select  CancelCount  from [Test.WeChat].[dbo].[ActivityShareCount])
set @FailCount = (select  FailCount  from [Test.WeChat].[dbo].[ActivityShareCount])
set @OpenCount = (select  OpenCount  from [Test.WeChat].[dbo].[ActivityShareCount])
set @TriggerCount = (select  TriggerCount  from [Test.WeChat].[dbo].[ActivityShareCount])
set @AttendCount = (select  AttendCount  from [Test.WeChat].[dbo].[ActivityShareCount])
set @CreateUserIdSuccessCount = (select  CreateUserIdSuccessCount  from [Test.WeChat].[dbo].[ActivityShareCount])
set @CreateUserIdFailCount = (select  CreateUserIdFailCount  from [Test.WeChat].[dbo].[ActivityShareCount])
set @HelpRegisterCount = (select  HelpRegisterCount  from [Test.WeChat].[dbo].[ActivityShareCount])
set @RegisterCount = (select  RegisterCount  from [Test.WeChat].[dbo].[ActivityShareCount])


select @agentPromoterUser AgentPromoterUserCount, @SuccessCount SuccessCount,@CancelCount CancelCount ,
@FailCount FailCount ,@OpenCount OpenCount ,@TriggerCount TriggerCount,@AttendCount AttendCount,
@CreateUserIdSuccessCount CreateUserIdSuccessCount,@CreateUserIdFailCount CreateUserIdFailCount,  @HelpRegisterCount HelpRegisterCount, @RegisterCount RegisterCount,
@TotalUser - @agentPromoterUser TotalUser, @promoteruser - @agentPromoterUser  PromoterUserCount, 
@Cashoutusercount CashOutUser, @cashoutusercount * @Bonus CashOut, @cashoutusercount*@Bonus*1.0 / nullif(@TotalUser - @agentPromoterUser,0) AverageUser



end
GO
/****** Object:  StoredProcedure [dbo].[sp_admin_has_permission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_admin_has_permission]
	@AdminId int,
	@RequiredPermission nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on
	set transaction isolation level read uncommitted
	set nocount on
	
	declare @HasPermission bit = 0
	if exists(select 1
		from AdminRole ur 
		join [Role] r on r.RoleId = ur.RoleId
		join [Role] r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
		join RolePermission rp on rp.RoleId = r_sub.RoleId
		join Permission p on p.PermissionId = rp.PermissionId	
		where ur.AdminId = @AdminId and p.name = @RequiredPermission
			and not exists(select 1 from AdminPermission where AdminId = @AdminId and PermissionId = p.PermissionId and Denied = 1)
		union 
		select 1
		from AdminPermission ap
		join Permission p on p.PermissionId = ap.PermissionId
		where ap.AdminId = @AdminId and p.name = @RequiredPermission and ap.Denied = 0
	)
	begin
		select @HasPermission = 1
	end
	select @HasPermission HasPermission
end


GO
/****** Object:  StoredProcedure [dbo].[sp_admin_has_role]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_admin_has_role]
	@AdminId int,
	@RequiredRole nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on
	set transaction isolation level read uncommitted
	set nocount on
	
	declare @HasRole bit = 0
	if exists(select 1
		from AdminRole ur 
		join [Role] r on r.RoleId = ur.RoleId
		join [Role] r_sub on r_sub.[left] >= r.[left] and r_sub.[right] <= r.[right] and r_sub.RootRoleId = r.RootRoleId
		where ur.AdminId = @AdminId and r_sub.name = @RequiredRole
	)
	begin
		set @HasRole = 1
	end
	select @HasRole HasRole
end



GO
/****** Object:  StoredProcedure [dbo].[sp_deadlock]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_deadlock]
as

WITH SystemHealth 
AS ( 
SELECT CAST(target_data as xml) AS TargetData 
FROM sys.dm_xe_session_targets st 
JOIN sys.dm_xe_sessions s 
ON s.address = st.event_session_address 
WHERE name = 'system_health' 
AND st.target_name = 'ring_buffer') 

SELECT XEventData.XEvent.query('(data/value/deadlock)[1]') AS DeadLockGraph 
FROM SystemHealth 
CROSS APPLY TargetData.nodes('//RingBufferTarget/event') AS XEventData (XEvent) 
WHERE XEventData.XEvent.value('@name','varchar(4000)') = 'xml_deadlock_report'

GO
/****** Object:  StoredProcedure [dbo].[sp_email_send]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_email_send]
	@UserId		bigint,
	@CompanyId	bigint,
	@AdminId	bigint,
	@MailFrom	nvarchar(255),
	@MailFromPassword nvarchar(50),
	@MailTo		nvarchar(255),
	@IsBodyHTML bit,
	@Subject	nvarchar(50),
	@Body		nvarchar(max)
as
begin set transaction isolation level read uncommitted	set nocount on
	insert into Email(UserId, CompanyId, AdminId, MailFrom, MailFromPassword, MailTo, Subject, Body, IsBodyHTML)
	values(@UserId, @CompanyId, @AdminId, @MailFrom, @MailFromPassword, @MailTo, @Subject, @Body, @IsBodyHTML)
end

GO
/****** Object:  StoredProcedure [dbo].[sp_exception_log]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_exception_log]
	@Type		nvarchar(255),
	@Message	nvarchar(255),
	@StackTrace nvarchar(max),
	@IPAddress	nvarchar(50),
	@Url		nvarchar(255),
	@UserId		int,
	@Application	nvarchar(50)
as
begin set transaction isolation level read uncommitted	set nocount on
	set nocount on
	
	insert into ExceptionLog(Type, Message, StackTrace, IPAddress, Url, UserId, Application)
	values(@Type, @Message, @StackTrace, @IPAddress, @Url, @UserId, @Application)
end

GO
/****** Object:  StoredProcedure [dbo].[sp_get_reptile_originsiteaddress_list]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_get_reptile_originsiteaddress_list] 
as
begin set transaction isolation level read uncommitted	set nocount on

	select OriginSiteAddress from ReptileData where DateCreated > DATEADD(MONTH,-1,GETDATE())


end	











GO
/****** Object:  StoredProcedure [dbo].[sp_get_top_notification]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_get_top_notification]
as
begin set transaction isolation level read uncommitted	set nocount on	
	select top 100 
		[NotificationId]
      ,[MessageId]
      ,[MessageType]
      ,[MessageTypeId]
      ,[Message]
      ,[MessageTitle]
      ,[SendingId]
      ,[TargetId]
      ,[JobId]
      ,[JobTypeId]
      ,[Device]
		,VoiceAlert
		,Vibrate
      ,[DeviceToken]
	  , BaiduUserId
      ,[DateCreated],
	  NotificationCount
	from Notification n
	where (Device = 'IOS' and ISNULL(DeviceToken,'')<>'') or (Device = 'Android' and ISNULL(BaiduUserId,'')<>'')
 	order by NotificationId

	delete n
	from Notification n
	where n.NotificationId in(
		select top 100 NotificationId
		from Notification 
		where Device = 'IOS' and ISNULL(DeviceToken,'')<>'' or (Device = 'Android' and ISNULL(BaiduUserId,'')<>'')
 		order by NotificationId
	)
end



GO
/****** Object:  StoredProcedure [dbo].[sp_get_unread_message_count]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_get_unread_message_count]
	@UserId		bigint,
	@CompanyId	bigint,
	@MessageId	bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Count int = 0

	if @CompanyId is not null
	begin
		select @Count = count(0)
		from Message
		where TargetId = @CompanyId and MessageId > @MessageId and DateDeleted is null and MessageTypeId in(1,3,5,7,8) and [Read] = 0
	end
	else if @UserId is not null
	begin
		select @Count = count(0)
		from Message
		where TargetId = @UserId and MessageId > @MessageId and DateDeleted is null and MessageTypeId in(1,2,4,6) and [Read] = 0
	end

	select @Count TotalCount
end

GO
/****** Object:  StoredProcedure [dbo].[sp_import_reptile_data]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE procedure [dbo].[sp_import_reptile_data] 
	@ReptileDatas udt_reptiledatatype READONLY
as
begin set transaction isolation level read uncommitted	set nocount on
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	insert into ReptileData (City,PublishDate,Title,CompanyName,JobType,Region,Address,
	Contact,ContactPhone,PhotoWebAddress,Telephone,PeopleRequired,Gender,Wage,Term,IncludeDinner,IncludeRoom,
	IncludeCommission,WorkFrom,WorkEnd,MonMorning,MonAfternoon,MonNight,TueMorning,TueAfternoon,
	TueNight,WedMorning,WedAfternoon,WedNight,ThuMorning,ThuAfternoon,ThuNight,FriMorning,
	FriAfternoon,FriNight,SatMorning,SatAfternoon,SatNight,SunMorning,SunAfternoon,SunNight,
	Description,OriginSiteAddress,OriginJobType,PhotoLocalPath,CityId,RegionId,JobTypeId,JobTypeName,
	CategoryId,CategoryName,SubCategoryId,SubCategoryName,SourceWebSite)
	SELECT * FROM @ReptileDatas
end










GO
/****** Object:  StoredProcedure [dbo].[sp_text]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_text]
	@text nvarchar(255)
as
begin set transaction isolation level read uncommitted	set nocount on
SELECT DISTINCT o.name AS Object_Name,o.type_desc
FROM sys.sql_modules m 
INNER JOIN sys.objects o 
ON m.object_id=o.object_id
WHERE m.definition Like '%'+@text+'%' ESCAPE '\'

end

GO
/****** Object:  StoredProcedure [dbo].[web_get_user_job_apply]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[web_get_user_job_apply]
	@UserId		bigint
as
begin set transaction isolation level read uncommitted	set nocount on
	select JobId, JobTypeId, Title, Verified, ViewTimes, Sticky, DateCreated, Deposit, CategoryName, CompanyName, DatePublished, Term, IncludeDinner, IncludeRoom, IncludeCommission, case when Gender = 1 then '男' when Gender = 0 then '女' else '' end Gender, Wage, WageUnit, Region, Status, StatusId
	from(
			select j.JobId, j.JobTypeId, j.Title, j.Sticky, co.Verified, j.ViewTimes, co.FullName CompanyName, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, p.Name CategoryName, t.Name Term, j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, r.Name Region, a.DateCreated, s.Name Status, s.StatusId
			from ActivityJobApply a
			join ActivityJob j on j.JobId = a.JobId 
			join Company co on co.CompanyId = j.CompanyId
			join WageUnit u on u.UnitId = j.WageUnitId 
			join ActivityJobPosition p on p.PositionId = j.PositionId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			join Term t on t.TermId = j.TermId
			join ApplyStatus s on s.StatusId = a.StatusId
			where a.UserId = @UserId and a.DateDeleted is null and j.StatusId = 2 and a.StatusId <> 3
			union all
			select j.JobId, j.JobTypeId,  j.Title, j.Sticky, co.Verified, j.ViewTimes, co.FullName CompanyName, j.DatePublished, cast(0 as bit) Deposit, c.Name CategoryName, '' Term, cast(0 as bit), cast(0 as bit), cast(0 as bit), j.Gender, 0, '', r.Name Region, a.DateCreated, s.Name Status, s.StatusId
			from CampusJobApply a
			join CampusJob j on j.JobId = a.JobId 
			join Company co on co.CompanyId = j.CompanyId
			join CampusJobCategory c on c.CategoryId = j.CategoryId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			join ApplyStatus s on s.StatusId = a.StatusId
			where a.UserId = @UserId and a.DateDeleted is null and j.StatusId = 2 and a.StatusId <> 3
			union all
			select j.JobId, j.JobTypeId,  j.Title, j.Sticky, co.Verified, j.ViewTimes,co.FullName CompanyName,  j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,c.Name CategoryName, '' Term, j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, r.Name Region, a.DateCreated, s.Name Status, s.StatusId
			from InternJobApply a
			join InternJob j on j.JobId = a.JobId 
			join Company co on co.CompanyId = j.CompanyId
			join WageUnit u on u.UnitId = j.WageUnitId 
			join InternJobCategory c on c.CategoryId = j.CategoryId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			join ApplyStatus s on s.StatusId = a.StatusId
			where a.UserId = @UserId and a.DateDeleted is null and j.StatusId = 2 and a.StatusId <> 3 
			union all
			select j.JobId, j.JobTypeId, j.Title, j.Sticky, co.Verified, j.ViewTimes, co.FullName CompanyName, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,c.Name CategoryName, t.Name Term, j.IncludeCommission, j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, r.Name Region, a.DateCreated, s.Name Status, s.StatusId
			from ServiceJobApply a
			join ServiceJob j on j.JobId = a.JobId 
			join Company co on co.CompanyId = j.CompanyId
			join WageUnit u on u.UnitId = j.WageUnitId 
			join ServiceJobPosition c on c.PositionId = j.PositionId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			join Term t on t.TermId = j.TermId
			join ApplyStatus s on s.StatusId = a.StatusId
			where a.UserId = @UserId and a.DateDeleted is null and j.StatusId = 2 and a.StatusId <> 3 
			union all
			select j.JobId, j.JobTypeId,  j.Title, j.Sticky, co.Verified, j.ViewTimes, co.FullName CompanyName, j.DatePublished, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit,p.Name CategoryName, t.Name Term, j.IncludeCommission,j.IncludeDinner, j.IncludeRoom, j.Gender, j.Wage, u.Name WageUnit, r.Name Region, a.DateCreated, s.Name Status, s.StatusId
			from TutorJobApply a
			join TutorJob j on j.JobId = a.JobId 
			join Company co on co.CompanyId = j.CompanyId
			join WageUnit u on u.UnitId = j.WageUnitId 
			join TutorJobPaper p on p.PaperId = j.PaperId
			join Region r on r.RegionId = j.RegionId 
			left join Region pr on pr.RegionId = r.ParentRegionId
			join Term t on t.TermId = j.TermId
			join ApplyStatus s on s.StatusId = a.StatusId
			where a.UserId = @UserId and a.DateDeleted is null and j.StatusId = 2 and a.StatusId <> 3 
	) sub
	order by DateCreated desc
end	


GO
/****** Object:  StoredProcedure [dbo].[web_job_search]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[web_job_search]
	@PageIndex	int,
	@PageSize	int,
	@SearchText	nvarchar(50),
	@Categories nvarchar(255),
	@RegionId	int,
	@Gender		int,
	@TermId		int,
	@JobTypeId	int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize
	set @SearchText = isnull(nullif(ltrim(rtrim(REPLACE(@SearchText, '  ',' '))),''),'""')
	set @SearchText = dbo.fn_fulltext_split(@SearchText)

	declare @table table(JobId bigint, JobType nvarchar(50), JobTypeId int, Title nvarchar(50), CategoryName nvarchar(50), CompanyName nvarchar(50), Term nvarchar(50),
		IncludeDinner bit, IncludeRoom bit, IncludeCommission bit, Gender int, Wage money, WageUnit nvarchar(50), Region nvarchar(50), DatePublished datetime,
		ViewTimes int, Verified bit, Deposit bit, Reptile bit, IgnoreTimeSheet bit, Sticky bit, TotalCount int)
	insert into @table
	select JobId, JobType, JobTypeId, isnull(Title,'') Title, isnull(CategoryName,'') CategoryName, isnull(CompanyName,'') CompanyName, isnull(Term,'') Term, 
		isnull(IncludeDinner,0) IncludeDinner, isnull(IncludeRoom,0) IncludeRoom, isnull(IncludeCommission,0) IncludeCommission,
		Gender, Wage, WageUnit, Region, DatePublished, ViewTimes, Verified, Deposit, Reptile, IgnoreTimeSheet, Sticky, TotalCount
	from(
		select *, row_number() over (order by case Sticky when 1 then 1 else 2 end, DatePublished desc) as [row],
		count(0) over() TotalCount
		from 
		(
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, p.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, isnull(t.Name,'') Term, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission,j.Gender, isnull(j.Wage,'') Wage, isnull(u.Name,'') WageUnit, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from ActivityJob j
			left join Company co on co.CompanyId = j.CompanyId
			left join WageUnit u on u.UnitId = j.WageUnitId 
			join ActivityJobPosition p on p.PositionId = j.PositionId
			join Region r on r.RegionId = j.RegionId 
			join JobType tp on tp.TypeId = j.JobTypeId
			left join Term t on t.TermId = j.TermId
			where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0
				and (j.Recommended = 1 or @JobTypeId = 1)
				and (j.RegionId = @RegionId or @RegionId is null)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
				and (j.Gender = @Gender or isnull(@Gender,2) = 2 or j.Gender = 2)
				and (j.TermId = @TermId or @TermId is null)
				and (p.Name in(select string from dbo.fn_split_string_by(@Categories,',')) or @Categories is null)
				and (contains(j.Title, @SearchText) or @SearchText = '""')
				and (@JobTypeId = 1 or @JobTypeId is null)
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, c.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, null Term, null, null, null, j.Gender, null, null, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(0 as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from CampusJob j 
			left join Company co on co.CompanyId = j.CompanyId
			join CampusJobCategory c on c.CategoryId = j.CategoryId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0
				and (j.Recommended = 1 or @JobTypeId = 2)
				and (j.RegionId = @RegionId or @RegionId is null)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
				and (j.Gender = @Gender or isnull(@Gender,2) = 2 or j.Gender = 2)
				and @TermId is null
				and (c.Name in(select string from dbo.fn_split_string_by(@Categories,',')) or @Categories is null)
				and (contains(j.Title, @SearchText) or @SearchText = '""')
				and (@JobTypeId = 2 or @JobTypeId is null)
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, c.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, null Term, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission,j.Gender, j.Wage, u.Name WageUnit, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from InternJob j
			left join Company co on co.CompanyId = j.CompanyId
			left join WageUnit u on u.UnitId = j.WageUnitId 
			join InternJobCategory c on c.CategoryId = j.CategoryId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0
				and (j.Recommended = 1 or @JobTypeId = 3)
				and (j.RegionId = @RegionId or @RegionId is null)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
				and (j.Gender = @Gender or isnull(@Gender,2) = 2 or j.Gender = 2)
				and @TermId is null
				and (c.Name in(select string from dbo.fn_split_string_by(@Categories,',')) or @Categories is null)
				and (contains(j.Title, @SearchText) or @SearchText = '""')
				and (@JobTypeId = 3 or @JobTypeId is null)
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, c.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, t.Name Term, j.IncludeDinner, j.IncludeRoom,j.IncludeCommission, j.Gender, j.Wage, u.Name WageUnit, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from ServiceJob j 
			left join Company co on co.CompanyId = j.CompanyId
			left join WageUnit u on u.UnitId = j.WageUnitId 
			join ServiceJobPosition c on c.PositionId = j.PositionId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			left join Term t on t.TermId = j.TermId
			where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0
				and (j.Recommended = 1 or @JobTypeId = 4)
				and (j.RegionId = @RegionId or @RegionId is null)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
				and (j.Gender = @Gender or isnull(@Gender,2) = 2 or j.Gender = 2)
				and (j.TermId = @TermId or @TermId is null)
				and (c.Name in(select string from dbo.fn_split_string_by(@Categories,',')) or @Categories is null)
				and (contains(j.Title, @SearchText) or @SearchText = '""')
				and (@JobTypeId = 4 or @JobTypeId is null)
			union all
			select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, p.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, t.Name Term, j.IncludeDinner, j.IncludeRoom,j.IncludeCommission, j.Gender, j.Wage, u.Name WageUnit, 
				r.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky
			from TutorJob j 
			left join Company co on co.CompanyId = j.CompanyId
			left join WageUnit u on u.UnitId = j.WageUnitId 
			join TutorJobPaper p on p.PaperId = j.PaperId
			join JobType tp on tp.TypeId = j.JobTypeId
			join Region r on r.RegionId = j.RegionId 
			left join Term t on t.TermId = j.TermId
			where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0
				and (j.Recommended = 1 or @JobTypeId = 5)
				and (j.RegionId = @RegionId or @RegionId is null)
				and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
				and (j.Gender = @Gender or isnull(@Gender,2) = 2 or j.Gender = 2)
				and (j.TermId = @TermId or @TermId is null)
				and (p.Name in(select string from dbo.fn_split_string_by(@Categories,',')) or @Categories is null)
				and (contains(j.Title, @SearchText) or @SearchText = '""')
				and (@JobTypeId = 5 or @JobTypeId is null)
		) all_sub
	) sub
	where sub.row between @row_from and @row_to
	order by [row]

	select * from @table
end	


GO
/****** Object:  StoredProcedure [dbo].[web_register_company]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[web_register_company]
	@Mobile nvarchar(50),
	@MobileVerificationCode nvarchar(50),
	@FullName nvarchar(50),
	@Salt	nvarchar(50),
	@HashedPassword nvarchar(255),
	@Device nvarchar(50),
	@DeviceToken nvarchar(255),
	@IPAddress	nvarchar(255),
	@DownloadFromApplicationId int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @ErrorMessage nvarchar(max), @DateExpired datetime, @JsonStatus int, @RegisterId bigint, @Token nvarchar(255), @TokenExpiryDate datetime, @CompanyId bigint

	if (select count(0) from BlockMobile where mobile = @Mobile) >= 5
	begin
		select @ErrorMessage = '别猜了，验证码肯定错的', @JsonStatus = 0
		goto done;
	end

	select top 1 @DateExpired = DateExpired, @RegisterId = RegisterId from register where mobile = @Mobile and MobileVerficationCode = @MobileVerificationCode
	
	set @Token = NEWID()
	set @TokenExpiryDate = DATEADD(month,1,getdate())
	set @DownloadFromApplicationId = Nullif(@DownloadFromApplicationId,0)

	if @RegisterId is null
	begin
		select @ErrorMessage = '验证码错误', @JsonStatus = 0
		insert into BlockMobile(Mobile, IPAddress) values(@Mobile, @IPAddress) 
		goto done;
	end
	else
	begin
		if	@DateExpired < GETDATE()
		begin
			select @ErrorMessage = '验证码已过期，请返回重新验证', @JsonStatus = 0
			insert into BlockMobile(Mobile, IPAddress) values(@Mobile, @IPAddress) 
			goto done;
		end
	end

	if exists(select 1 from Company where mobile = @mobile)
	begin
		select @ErrorMessage = '该手机号已经被注册', @JsonStatus = 0
		goto done;
	end


	if isnull(@ErrorMessage,'') = ''
	begin
		update register 
		set MobileVerified = 1, DateModified = GETDATE()
		where RegisterId = @RegisterId

		insert into Company(Mobile, FullName, Salt, Password, Device, DeviceToken, Vibrate, VoiceAlert, IsLogin, DownloadFromApplicationId)
		values(@Mobile, @FullName, @Salt, @HashedPassword, @Device, @DeviceToken, 1, 1, 1, @DownloadFromApplicationId)
		set @CompanyId = SCOPE_IDENTITY()

		set @JsonStatus = 1
		insert into WebCompanyLogon(CompanyId, token, TokenExpiryDate, IPAddress, DateLogon)
		values(@CompanyId, @Token, @TokenExpiryDate, @IPAddress, GETDATE())
		
	end

	done:

	select @ErrorMessage ErrorMessage, @JsonStatus JsonStatus, isnull(@CompanyId,0) CompanyId, isnull(@Token,'') Token, isnull(@TokenExpiryDate,getdate()) TokenExpiryDate

end


GO
/****** Object:  StoredProcedure [dbo].[web_register_user]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[web_register_user]
	@Mobile nvarchar(50),
	@MobileVerificationCode nvarchar(50),
	@SchoolId int,
	@Salt	nvarchar(50),
	@HashedPassword nvarchar(255),
	@Device nvarchar(50),
	@DeviceToken nvarchar(255),
	@IPAddress	nvarchar(255),
	@PromoterUserId	bigint,
	@DownloadFromApplicationId int
as
begin set transaction isolation level read uncommitted	set nocount on
	begin tran
	declare @ErrorMessage nvarchar(max), @DateExpired datetime, @JsonStatus int, @RegisterId bigint, @Token nvarchar(255), @TokenExpiryDate datetime, @UserId bigint

	if (select count(0) from BlockMobile where mobile = @Mobile) >= 5
	begin
		select @ErrorMessage = '别猜了，验证码肯定错的', @JsonStatus = 0
		goto done;
	end

	select top 1 @DateExpired = DateExpired, @RegisterId = RegisterId from register where mobile = @Mobile and MobileVerficationCode = @MobileVerificationCode
	
	set @Token = NEWID()
	set @TokenExpiryDate = DATEADD(month,1,getdate())
	set @DownloadFromApplicationId = Nullif(@DownloadFromApplicationId,0)

	if @RegisterId is null
	begin
		select @ErrorMessage = '验证码错误', @JsonStatus = 0
		insert into BlockMobile(Mobile, IPAddress, PromoteCode) values(@Mobile, @IPAddress, convert(nvarchar,@PromoterUserId,50)) 
		goto done;
	end
	else
	begin
		if	@DateExpired < GETDATE()
		begin
			select @ErrorMessage = '验证码已过期，请返回重新验证', @JsonStatus = 0
			insert into BlockMobile(Mobile, IPAddress, PromoteCode) values(@Mobile, @IPAddress, convert(nvarchar,@PromoterUserId,50)) 
			goto done;
		end
	end

	if exists(select 1 from [user] where mobile = @mobile)
	begin
		select @ErrorMessage = '该手机号已经被注册', @JsonStatus = 0
		goto done;
	end


	if isnull(@ErrorMessage,'') = ''
	begin
		update register 
		set MobileVerified = 1, DateModified = GETDATE()
		where RegisterId = @RegisterId

		insert into [user](Mobile, SchoolId, Salt, Password, Device, DeviceToken, Vibrate, VoiceAlert, IsLogin, DownloadFromApplicationId)
		values(@Mobile, @SchoolId, @Salt, @HashedPassword, @Device, @DeviceToken, 1, 1, 1, @DownloadFromApplicationId)
		set @UserId = SCOPE_IDENTITY()
		
		set @JsonStatus = 1
		insert into WebUserLogon(userid, token, TokenExpiryDate, IPAddress, DateLogon)
		values(@UserId, @Token, @TokenExpiryDate, @IPAddress, GETDATE())

		if exists(select 1 from [User] where UserId = @PromoterUserId) and @PromoterUserId <> @UserId
		begin
			insert into PromoterRegistration(PromoterUserId, UserId)
			values (@PromoterUserId, @UserId)
		end

		declare @DateFrom datetime, @DateTo datetime, @Bonus money, @Interval int, @Goal int
		select @DateFrom = DateFrom, @DateTo = DateTo, @Bonus = Bonus, @Interval = Interval, @Goal = Goal from event where getdate() between datefrom and dateto

		-- 活动开始
		if GETDATE() between @DateFrom and @DateTo
		begin
			exec event_push_register_user_message_by_event2 @UserId
			if nullif(@PromoterUserId,0) is not null and @PromoterUserId <> @UserId
			begin
				exec [event_push_register_promoter_user_messaeg_by_event2] @UserId
			end
		end

	end

	done:

	select isnull(@ErrorMessage,'') ErrorMessage, @JsonStatus JsonStatus, isnull(@UserId,0) UserId, isnull(@Token,'') Token, isnull(@TokenExpiryDate,getdate()) TokenExpiryDate
	commit tran
end


GO
/****** Object:  StoredProcedure [dbo].[wechat_job_get_search_campus_detail]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[wechat_job_get_search_campus_detail]
@SchoolId int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @Wage money,@IncludeDinner bit,@IncludeRoom bit,@IncludeCommission bit,@Deposit money
	select @Wage = 0.0,@IncludeDinner = 0,@IncludeRoom = 0,@IncludeCommission = 0,@Deposit = 0.0
	select Title,CompanyName,PeopleRequired,Gender,@Wage Wage,@IncludeDinner IncludeDinner,@IncludeRoom IncludeRoom,@IncludeCommission IncludeCommission,@Deposit Deposit,Address,WorkFrom,WorkEnd,MonMorning,TueMorning,WedMorning,ThuMorning,
	FriMorning,SatMorning,SunMorning,MonAfternoon,TueAfternoon,WedAfternoon,ThuAfternoon,FriAfternoon,SatAfternoon,SunAfternoon,
	MonNight,TueNight,WedNight,ThuNight,FriNight,SatNight,SunNight,Description,Contact,ContactPhone,Sticky,Recommended,
	t.name JobTypeName ,c.Name PositionName, j.JobId,j.JobTypeId,'' WageUnitName,r.Name RegionName ,'' TermName ,j.Reptile,School.Name as SchoolName from campusjob j
	join jobtype t on j.jobtypeid = t.typeid
	join region r on r.regionid = j.regionid
	left join CampusJobCategory c on c.categoryid = j.categoryid
	left join School on School.SchoolId=j.SchoolId
	where jobid = @SchoolId  and DateDeleted is null
end
GO
/****** Object:  StoredProcedure [dbo].[wechat_job_search_activity]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[wechat_job_search_activity]
	@RegionId		int ,
	@PositionId		int ,
	@Order          int ,
    @TermId         int ,
    @PageIndex		int,
	@PageSize		int
as
begin set transaction isolation level read uncommitted	set nocount on
    declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select JobId, JobTypeId, JobType, Title, PositionName, CompanyName, Term, IncludeDinner, IncludeRoom, IncludeCommission, Gender, Wage, WageUnit, 
			Region, isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, ViewTimes, Verified, Deposit, Reptile, IgnoreTimeSheet, Sticky
	from
		(
		select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, p.Name PositionName, isnull(c.FullName,j.CompanyName) CompanyName, isnull(t.Name,'') Term, j.IncludeDinner, j.IncludeRoom, j.IncludeCommission, j.Gender, isnull(j.Wage,'') Wage, isnull(u.Name,'') WageUnit, 
			sr.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(c.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, j.Reptile, IgnoreTimeSheet, Sticky,
			ROW_NUMBER() over(order by  (case @Order when 0 then DatePublished when 1 then Wage  else JobId end ) DESC) [row]
		from ActivityJob j
		join JobType tp on tp.TypeId = j.JobTypeId
		left join Company c on c.CompanyId = j.CompanyId
		join ActivityJobPosition p on p.PositionId = j.PositionId
		join Region sr on sr.RegionId = j.RegionId
		left join Region pr on pr.RegionId = sr.ParentRegionId and pr.RootRegionId = sr.RootRegionId and pr.Indentation = 2
		left join Term t on t.TermId = j.TermId
		left join WageUnit u on u.UnitId = j.WageUnitId
		where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0
		    and (j.PositionId=@PositionId or isnull(@PositionId,'') = '')
			and (j.TermId=@TermId or isnull(@TermId,'') = '')
			and (sr.RegionId = @RegionId or pr.RegionId = @RegionId or sr.RootRegionId = @RegionId or isnull(@RegionId,0) = 0)
			and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
		) sub 
		where sub.row between @row_from and @row_to
	order by row
end
GO
/****** Object:  StoredProcedure [dbo].[wechat_job_search_campus]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[wechat_job_search_campus]
	@RegionId		int,
	@SchoolId		int,
	@CategoryId		int,
	@PageIndex		int,
	@PageSize		int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select JobId, JobTypeId, JobType, Title, CategoryName, CompanyName, SchoolName, Gender, Region, isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, 
		ViewTimes, Verified, Reptile, IgnoreTimeSheet, Sticky
	from
		(
		select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, isnull(co.FullName,j.CompanyName) CompanyName, c.Name CategoryName, s.Name SchoolName, j.Gender,  
			sr.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, j.Reptile, IgnoreTimeSheet, Sticky,
			ROW_NUMBER() over(order by case j.Sticky when 1 then 1 else 2 end, j.DatePublished desc) [row]
		from CampusJob j
		join JobType tp on tp.TypeId = j.JobTypeId
		left join Company co on co.CompanyId = j.CompanyId
		join CampusJobCategory c on c.CategoryId = j.CategoryId
		join School s on s.SchoolId = j.SchoolId
		join Region sr on sr.RegionId = j.RegionId
		left join Region pr on pr.RegionId = sr.ParentRegionId and pr.RootRegionId = sr.RootRegionId and pr.Indentation = 2
		where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0 
		    and (j.SchoolId = @SchoolId or isnull(@SchoolId,'') = '')
			and (j.CategoryId = @CategoryId or isnull(@CategoryId,'') = '')
			and (sr.RegionId = @RegionId or pr.RegionId = @RegionId or sr.RootRegionId = @RegionId or isnull(@RegionId,0) = 0)
			and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
	) sub
	where sub.row between @row_from and @row_to
	order by row
end


GO
/****** Object:  StoredProcedure [dbo].[wechat_job_search_intern]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[wechat_job_search_intern]
	@RegionId		int,
	@CategoryId		int,
	@Order          int ,
	@PageIndex		int,
	@PageSize		int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize

	select JobId, JobTypeId, JobType, Title, CategoryName, CompanyName, IncludeDinner, IncludeRoom, IncludeCommission, Gender, Wage, WageUnit, 
			Region, isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, ViewTimes, Verified, Deposit, Reptile, IgnoreTimeSheet, Sticky
	from
		(
		select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, isnull(co.FullName,j.CompanyName) CompanyName, c.Name CategoryName, j.IncludeDinner, j.IncludeRoom,j.IncludeCommission, j.Gender, isnull(j.Wage,'') Wage, isnull(u.Name,'') WageUnit, 
			sr.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, j.Reptile, IgnoreTimeSheet, Sticky,
			ROW_NUMBER() over(order by  (case @Order when 0 then j.DatePublished when 1 then j.Wage  else j.JobId end ) DESC) [row]
		from InternJob j
		join JobType tp on tp.TypeId = j.JobTypeId
		left join Company co on co.CompanyId = j.CompanyId
		join InternJobCategory c on c.CategoryId = j.CategoryId
		join Region sr on sr.RegionId = j.RegionId
		left join Region pr on pr.RegionId = sr.ParentRegionId and pr.RootRegionId = sr.RootRegionId and pr.Indentation = 2
		left join WageUnit u on u.UnitId = j.WageUnitId
		where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0  
			and (sr.RegionId = @RegionId or pr.RegionId = @RegionId or sr.RootRegionId = @RegionId)
			and (j.CategoryId =@CategoryId or isnull(@CategoryId,'') = '')
		    and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
	) sub
	where sub.row between @row_from and @row_to
	order by row
end


-- select * from jobstatus

GO
/****** Object:  StoredProcedure [dbo].[wechat_job_search_service]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[wechat_job_search_service]
	@RegionId		int,
	@PositionId		int,
	@Order          int ,
    @TermId         int ,
	@PageIndex		int,
	@PageSize		int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize
	select JobId, JobTypeId, JobType, Title, CategoryName, PositionName, CompanyName, IncludeDinner, Term, IncludeRoom, IncludeCommission, Gender, Wage, WageUnit, 
			Region, isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, ViewTimes, Verified, Deposit, Reptile, IgnoreTimeSheet, Sticky
	from
		(
		select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, p.Name CategoryName, isnull(co.FullName,j.CompanyName) CompanyName, p.Name PositionName, j.IncludeDinner, isnull(t.Name,'') Term, j.IncludeRoom,j.IncludeCommission, j.Gender, isnull(j.Wage,'') Wage, isnull(u.Name,'') WageUnit, 
			sr.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky,
			ROW_NUMBER() over(order by  (case @Order when 0 then j.DatePublished when 1 then j.Wage  else j.JobId end ) DESC) [row]
		from ServiceJob j
		join JobType tp on tp.TypeId = j.JobTypeId
		left join Company co on co.CompanyId = j.CompanyId
		join ServiceJobCategory c on c.CategoryId = j.CategoryId
		join ServiceJobPosition p on p.PositionId = j.PositionId
		join Region sr on sr.RegionId = j.RegionId
		left join Region pr on pr.RegionId = sr.ParentRegionId and pr.RootRegionId = sr.RootRegionId and pr.Indentation = 2
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term t on t.TermId = j.TermId
		where j.StatusId = 2  and j.DateDeleted is null and j.Disabled = 0
		    and (j.TermId=@TermId or isnull(@TermId,'') = '')
			and (j.PositionId=@PositionId or isnull(@PositionId,'') = '')
			and (sr.RegionId = @RegionId or pr.RegionId = @RegionId or sr.RootRegionId = @RegionId or isnull(@RegionId,0) = 0)
		    and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
	) sub
	where sub.row between @row_from and @row_to
	order by row
end

GO
/****** Object:  StoredProcedure [dbo].[wechat_job_search_tutor]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[wechat_job_search_tutor]
	@RegionId		int,
	@PaperId		int,
	@Order          int,
    @TermId         int,
	@PageIndex		int,
	@PageSize		int
as
begin set transaction isolation level read uncommitted	set nocount on
	declare @row_from int, @row_to int
	select @row_from = (@PageIndex-1)*@PageSize+1, @row_to = @PageIndex*@PageSize
	
	select JobId, JobTypeId, JobType, Title, Level, Paper, CompanyName, IncludeDinner, Term, IncludeRoom, IncludeCommission, Gender, Wage, WageUnit, 
			Region, isnull(left(CONVERT(nvarchar, DatePublished,126),10),'') DatePublished, ViewTimes, Verified, Deposit, Reptile, IgnoreTimeSheet, Sticky
	from
		(
		select j.JobId, j.JobTypeId, tp.Name JobType, j.Title, l.Name Level, p.Name Paper, isnull(co.FullName,j.CompanyName) CompanyName, j.IncludeDinner, isnull(t.Name,'') Term, j.IncludeRoom, j.IncludeCommission, j.Gender, isnull(j.Wage,'') Wage, isnull(u.Name,'') WageUnit, 
			sr.Name Region, j.DatePublished, j.FakeViewTimes as ViewTimes, isnull(co.Verified,0) Verified, cast(case when j.Deposit > 0 then 1 else 0 end as bit) Deposit, Reptile, IgnoreTimeSheet, Sticky,
			ROW_NUMBER() over(order by  (case @Order when 0 then j.DatePublished when 1 then j.Wage  else j.JobId end ) DESC) [row]
		from TutorJob j
		join JobType tp on tp.TypeId = j.JobTypeId
		left join Company co on co.CompanyId = j.CompanyId
		join TutorJobLevel l on l.LevelId = j.LevelId
		join TutorJobPaper p on p.PaperId = j.PaperId
		join Region sr on sr.RegionId = j.RegionId
		left join Region pr on pr.RegionId = sr.ParentRegionId and pr.RootRegionId = sr.RootRegionId and pr.Indentation = 2
		left join WageUnit u on u.UnitId = j.WageUnitId
		left join Term t on t.TermId = j.TermId
		where j.StatusId = 2 and j.DateDeleted is null and j.[Disabled] = 0 
		    and (j.PaperId=@PaperId or isnull(@PaperId,'')='')
			and (j.TermId=@TermId or isnull(@TermId,'') = '')
			and (sr.RegionId = @RegionId or pr.RegionId = @RegionId or sr.RootRegionId = @RegionId or isnull(@RegionId,0) = 0)
		    and dateadd(d,0,datediff(d,0,GETDATE())) between j.DateFrom and j.DateExpiry
	) sub
	where sub.row between @row_from and @row_to
	order by row
end

GO
/****** Object:  Table [dbo].[ActivityJob]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ActivityJob](
	[JobId] [bigint] IDENTITY(1,1) NOT NULL,
	[CompanyId] [bigint] NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Title] [nvarchar](50) NOT NULL,
	[JobTypeId] [int] NOT NULL,
	[StatusId] [int] NOT NULL,
	[PositionId] [int] NOT NULL,
	[RegionId] [int] NOT NULL,
	[WageUnitId] [int] NULL,
	[Wage] [money] NULL,
	[IncludeDinner] [bit] NOT NULL,
	[IncludeRoom] [bit] NOT NULL,
	[IncludeCommission] [bit] NOT NULL,
	[TermId] [int] NULL,
	[Gender] [int] NOT NULL,
	[Deposit] [money] NOT NULL,
	[PeopleRequired] [int] NULL,
	[Contact] [nvarchar](50) NOT NULL,
	[ContactPhone] [nvarchar](50) NOT NULL,
	[Address] [nvarchar](255) NULL,
	[DateFrom] [date] NOT NULL,
	[DateExpiry] [date] NOT NULL,
	[WorkFrom] [date] NULL,
	[WorkEnd] [date] NULL,
	[Description] [nvarchar](max) NULL,
	[ViewTimes] [int] NOT NULL,
	[FakeViewTimes] [int] NOT NULL,
	[Shares] [int] NOT NULL,
	[WapViewTimes] [int] NOT NULL,
	[Recommended] [bit] NOT NULL,
	[Sticky] [bit] NOT NULL,
	[StickyExpired] [date] NULL,
	[Disabled] [bit] NOT NULL,
	[Reptile] [bit] NOT NULL,
	[SourceWebSite] [nvarchar](50) NULL,
	[MonMorning] [bit] NOT NULL,
	[MonAfternoon] [bit] NOT NULL,
	[MonNight] [bit] NOT NULL,
	[TueMorning] [bit] NOT NULL,
	[TueAfternoon] [bit] NOT NULL,
	[TueNight] [bit] NOT NULL,
	[WedMorning] [bit] NOT NULL,
	[WedAfternoon] [bit] NOT NULL,
	[WedNight] [bit] NOT NULL,
	[ThuMorning] [bit] NOT NULL,
	[ThuAfternoon] [bit] NOT NULL,
	[ThuNight] [bit] NOT NULL,
	[FriMorning] [bit] NOT NULL,
	[FriAfternoon] [bit] NOT NULL,
	[FriNight] [bit] NOT NULL,
	[SatMorning] [bit] NOT NULL,
	[SatAfternoon] [bit] NOT NULL,
	[SatNight] [bit] NOT NULL,
	[SunMorning] [bit] NOT NULL,
	[SunAfternoon] [bit] NOT NULL,
	[SunNight] [bit] NOT NULL,
	[IgnoreTimeSheet] [bit] NOT NULL,
	[DatePublished] [datetime] NULL,
	[AgentUserId] [int] NULL,
	[AdminId] [int] NULL,
	[JobAllocateTypeId] [int] NULL,
	[DateEmployeeManagementDeleted] [datetime] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_ActivityJob] PRIMARY KEY CLUSTERED 
(
	[JobId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ActivityJobApply]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ActivityJobApply](
	[ApplyId] [bigint] IDENTITY(1,1) NOT NULL,
	[JobId] [bigint] NOT NULL,
	[UserId] [bigint] NOT NULL,
	[StatusId] [int] NOT NULL,
	[DateHired] [datetime] NULL,
	[DateEnded] [datetime] NULL,
	[DateEndedReasonId] [int] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_ActivityJobApply] PRIMARY KEY CLUSTERED 
(
	[ApplyId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ActivityJobComplain]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ActivityJobComplain](
	[ComplainId] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [bigint] NOT NULL,
	[UserId] [bigint] NOT NULL,
	[StatusId] [int] NOT NULL,
	[Description] [nvarchar](255) NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_ActivityJobComplain] PRIMARY KEY CLUSTERED 
(
	[ComplainId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ActivityJobPosition]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ActivityJobPosition](
	[PositionId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_ActivityJobPosition] PRIMARY KEY CLUSTERED 
(
	[PositionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Admin]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Admin](
	[AdminId] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [nvarchar](50) NOT NULL,
	[Email] [nvarchar](50) NULL,
	[Password] [nvarchar](255) NOT NULL,
	[Salt] [nvarchar](50) NOT NULL,
	[LastLogonDate] [datetime] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_Admin] PRIMARY KEY CLUSTERED 
(
	[AdminId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AdminLogon]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AdminLogon](
	[LogonId] [int] IDENTITY(1,1) NOT NULL,
	[AdminId] [int] NOT NULL,
	[Token] [nvarchar](50) NOT NULL,
	[TokenExpiryDate] [datetime] NOT NULL,
	[IPAddress] [nvarchar](50) NOT NULL,
	[DateLogon] [datetime] NOT NULL,
 CONSTRAINT [PK_AdminLogon] PRIMARY KEY CLUSTERED 
(
	[LogonId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AdminPermission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AdminPermission](
	[AdminId] [int] NOT NULL,
	[PermissionId] [int] NOT NULL,
	[Denied] [bit] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_AdminPermission] PRIMARY KEY CLUSTERED 
(
	[AdminId] ASC,
	[PermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AdminRole]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AdminRole](
	[AdminId] [int] NOT NULL,
	[RoleId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_AdminRole] PRIMARY KEY CLUSTERED 
(
	[AdminId] ASC,
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Advertising]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Advertising](
	[AdvertisingId] [int] NOT NULL,
	[PositionId] [int] NOT NULL,
	[TypeId] [int] NULL,
	[Title] [nvarchar](50) NULL,
	[ImagePath] [nvarchar](255) NOT NULL,
	[NavImagePath] [nvarchar](255) NULL,
	[Link] [nvarchar](255) NULL,
	[JobId] [bigint] NULL,
	[JobTypeId] [int] NULL,
	[DateFrom] [datetime] NOT NULL,
	[DateTo] [datetime] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_ApiAdvertising] PRIMARY KEY CLUSTERED 
(
	[AdvertisingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AdvertisingPage]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AdvertisingPage](
	[PageId] [int] IDENTITY(1,1) NOT NULL,
	[ApplicationId] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](255) NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_ApiAdvertisingPage] PRIMARY KEY CLUSTERED 
(
	[PageId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AdvertisingPosition]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AdvertisingPosition](
	[PositionId] [int] IDENTITY(1,1) NOT NULL,
	[PageId] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](255) NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_ApiAdvertisingPosition] PRIMARY KEY CLUSTERED 
(
	[PositionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AdvertisingType]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AdvertisingType](
	[TypeId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_AdvertisingType] PRIMARY KEY CLUSTERED 
(
	[TypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AgentPermission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AgentPermission](
	[PermissionId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](255) NULL,
	[Group] [nvarchar](50) NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_AgentPermission] PRIMARY KEY CLUSTERED 
(
	[PermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AgentRole]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AgentRole](
	[RoleId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[ParentRoleId] [int] NULL,
	[RootRoleId] [int] NULL,
	[Left] [int] NULL,
	[Right] [int] NULL,
	[Descend] [int] NULL,
	[Indentation] [int] NULL,
	[Sequence] [int] NULL,
	[AdminAgentUserId] [int] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_AgentRole] PRIMARY KEY CLUSTERED 
(
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AgentRoleAgentPermission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AgentRoleAgentPermission](
	[RoleId] [int] NOT NULL,
	[PermissionId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_AgentRolePermission] PRIMARY KEY CLUSTERED 
(
	[RoleId] ASC,
	[PermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AgentUser]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AgentUser](
	[UserId] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [nvarchar](50) NOT NULL,
	[Email] [nvarchar](50) NULL,
	[Password] [nvarchar](255) NOT NULL,
	[Salt] [nvarchar](50) NOT NULL,
	[LastLogonDate] [datetime] NULL,
	[AdminAgentUserId] [int] NULL,
	[TypeId] [int] NOT NULL,
	[PromoterId] [int] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_AgentUser] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AgentUserAgentPermission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AgentUserAgentPermission](
	[UserId] [int] NOT NULL,
	[PermissionId] [int] NOT NULL,
	[Denied] [bit] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_AgentUserPermission] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[PermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AgentUserAgentRole]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AgentUserAgentRole](
	[UserId] [int] NOT NULL,
	[RoleId] [int] NOT NULL,
	[DateCreatd] [datetime] NOT NULL,
 CONSTRAINT [PK_AgentUserAgentRole] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AgentUserLogon]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AgentUserLogon](
	[LogonId] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[Token] [nvarchar](50) NOT NULL,
	[TokenExpiryDate] [datetime] NOT NULL,
	[IPAddress] [nvarchar](50) NOT NULL,
	[DateLogon] [datetime] NOT NULL,
 CONSTRAINT [PK_AgentUserLogon] PRIMARY KEY CLUSTERED 
(
	[LogonId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AgentUserRegion]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AgentUserRegion](
	[UserId] [int] NOT NULL,
	[RegionId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_AgentUserRegion] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[RegionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AgentUserType]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AgentUserType](
	[TypeId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_AgentUserType] PRIMARY KEY CLUSTERED 
(
	[TypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AgentUserTypeAgentPermission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AgentUserTypeAgentPermission](
	[TypeId] [int] NOT NULL,
	[PermissionId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_AgentUserTypeAgentPermission] PRIMARY KEY CLUSTERED 
(
	[TypeId] ASC,
	[PermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Application]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Application](
	[ApplicationId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_Application] PRIMARY KEY CLUSTERED 
(
	[ApplicationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ApplyStatus]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ApplyStatus](
	[StatusId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_ApplyStatus] PRIMARY KEY CLUSTERED 
(
	[StatusId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Bank]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Bank](
	[BankId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Sequence] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_Bank] PRIMARY KEY CLUSTERED 
(
	[BankId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CampusJob]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CampusJob](
	[JobId] [bigint] IDENTITY(1,1) NOT NULL,
	[CompanyId] [bigint] NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Title] [nvarchar](50) NOT NULL,
	[JobTypeId] [int] NOT NULL,
	[StatusId] [int] NOT NULL,
	[CategoryId] [int] NOT NULL,
	[SchoolId] [int] NOT NULL,
	[RegionId] [int] NOT NULL,
	[Gender] [int] NOT NULL,
	[PeopleRequired] [int] NULL,
	[Contact] [nvarchar](50) NOT NULL,
	[ContactPhone] [nvarchar](50) NOT NULL,
	[Address] [nvarchar](255) NULL,
	[DateFrom] [date] NOT NULL,
	[DateExpiry] [date] NOT NULL,
	[WorkFrom] [date] NULL,
	[WorkEnd] [date] NULL,
	[Description] [nvarchar](max) NULL,
	[ViewTimes] [int] NOT NULL,
	[FakeViewTimes] [int] NOT NULL,
	[Shares] [int] NOT NULL,
	[WapViewTimes] [int] NOT NULL,
	[Recommended] [bit] NOT NULL,
	[Sticky] [bit] NOT NULL,
	[StickyExpired] [date] NULL,
	[Disabled] [bit] NOT NULL,
	[Reptile] [bit] NOT NULL,
	[SourceWebSite] [nvarchar](50) NULL,
	[MonMorning] [bit] NOT NULL,
	[MonAfternoon] [bit] NOT NULL,
	[MonNight] [bit] NOT NULL,
	[TueMorning] [bit] NOT NULL,
	[TueAfternoon] [bit] NOT NULL,
	[TueNight] [bit] NOT NULL,
	[WedMorning] [bit] NOT NULL,
	[WedAfternoon] [bit] NOT NULL,
	[WedNight] [bit] NOT NULL,
	[ThuMorning] [bit] NOT NULL,
	[ThuAfternoon] [bit] NOT NULL,
	[ThuNight] [bit] NOT NULL,
	[FriMorning] [bit] NOT NULL,
	[FriAfternoon] [bit] NOT NULL,
	[FriNight] [bit] NOT NULL,
	[SatMorning] [bit] NOT NULL,
	[SatAfternoon] [bit] NOT NULL,
	[SatNight] [bit] NOT NULL,
	[SunMorning] [bit] NOT NULL,
	[SunAfternoon] [bit] NOT NULL,
	[SunNight] [bit] NOT NULL,
	[IgnoreTimeSheet] [bit] NOT NULL,
	[DatePublished] [datetime] NULL,
	[AgentUserId] [int] NULL,
	[AdminId] [int] NULL,
	[JobAllocateTypeId] [int] NULL,
	[DateEmployeeManagementDeleted] [datetime] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_CampusJob] PRIMARY KEY CLUSTERED 
(
	[JobId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CampusJobApply]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CampusJobApply](
	[ApplyId] [bigint] IDENTITY(1,1) NOT NULL,
	[JobId] [bigint] NOT NULL,
	[UserId] [bigint] NOT NULL,
	[StatusId] [int] NOT NULL,
	[DateHired] [datetime] NULL,
	[DateEnded] [datetime] NULL,
	[DateEndedReasonId] [int] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_CampusJobApply] PRIMARY KEY CLUSTERED 
(
	[ApplyId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CampusJobCategory]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CampusJobCategory](
	[CategoryId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_CampusJobCategory] PRIMARY KEY CLUSTERED 
(
	[CategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CampusJobComplain]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CampusJobComplain](
	[ComplainId] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [bigint] NOT NULL,
	[UserId] [bigint] NOT NULL,
	[StatusId] [int] NOT NULL,
	[Description] [nvarchar](255) NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_CampusJobComplain] PRIMARY KEY CLUSTERED 
(
	[ComplainId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CashOutStatus]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CashOutStatus](
	[StatusId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_CashOutStatus] PRIMARY KEY CLUSTERED 
(
	[StatusId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Company]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Company](
	[CompanyId] [bigint] IDENTITY(1,1) NOT NULL,
	[RegionId] [int] NULL,
	[Mobile] [nvarchar](50) NOT NULL,
	[Email] [nvarchar](255) NULL,
	[FullName] [nvarchar](50) NOT NULL,
	[PendingFullName] [nvarchar](50) NULL,
	[Contact] [nvarchar](50) NULL,
	[Password] [nvarchar](255) NOT NULL,
	[Salt] [nvarchar](50) NOT NULL,
	[PaymentPassword] [nvarchar](255) NULL,
	[PaymentSalt] [nvarchar](50) NULL,
	[Address] [nvarchar](50) NULL,
	[LicensePhoto] [nvarchar](255) NULL,
	[AgentPhoto] [nvarchar](255) NULL,
	[Longitude] [nvarchar](50) NULL,
	[Latitude] [nvarchar](50) NULL,
	[Introduction] [nvarchar](255) NULL,
	[Status] [bit] NOT NULL,
	[Verified] [bit] NOT NULL,
	[Balance] [money] NOT NULL,
	[Device] [nvarchar](50) NULL,
	[DeviceToken] [nvarchar](255) NULL,
	[BaiduUserId] [nvarchar](50) NULL,
	[Version] [nvarchar](50) NULL,
	[DownloadFromApplicationId] [int] NULL,
	[VoiceAlert] [bit] NOT NULL,
	[Vibrate] [bit] NOT NULL,
	[IsLogin] [bit] NOT NULL,
	[NotificationCount] [int] NOT NULL,
	[AgentUserId] [int] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_Company] PRIMARY KEY CLUSTERED 
(
	[CompanyId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CompanyCashFlow]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CompanyCashFlow](
	[FlowId] [bigint] IDENTITY(1,1) NOT NULL,
	[CompanyId] [bigint] NOT NULL,
	[Balance] [money] NOT NULL,
	[Payment] [money] NOT NULL,
	[FlowTypeId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_CompanyCashFlow] PRIMARY KEY CLUSTERED 
(
	[FlowId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CompanyCashFlowType]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CompanyCashFlowType](
	[TypeId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_CompanyCashFlowType] PRIMARY KEY CLUSTERED 
(
	[TypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CompanyCashIn]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CompanyCashIn](
	[CashInId] [bigint] IDENTITY(1,1) NOT NULL,
	[CompanyId] [bigint] NOT NULL,
	[TradeId] [bigint] NULL,
	[Amount] [money] NOT NULL,
	[DatePaid] [datetime] NULL,
	[DatePaymentConfirmed] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_CompanyTopUp] PRIMARY KEY CLUSTERED 
(
	[CashInId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CompanyLogon]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CompanyLogon](
	[LogonId] [bigint] IDENTITY(1,1) NOT NULL,
	[CompanyId] [bigint] NOT NULL,
	[Token] [nvarchar](50) NOT NULL,
	[TokenExpiryDate] [datetime] NOT NULL,
	[IPAddress] [nvarchar](50) NOT NULL,
	[DateLogon] [datetime] NOT NULL,
 CONSTRAINT [PK_CompanyLogon] PRIMARY KEY CLUSTERED 
(
	[LogonId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ComplainStatus]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ComplainStatus](
	[StatusId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_ComplainStatus] PRIMARY KEY CLUSTERED 
(
	[StatusId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Date]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Date](
	[DateId] [int] NOT NULL,
	[Date] [date] NOT NULL,
	[Year] [int] NOT NULL,
	[Month] [int] NOT NULL,
	[MonthName] [nvarchar](50) NOT NULL,
	[DayInYear] [int] NOT NULL,
	[DayInMonth] [int] NOT NULL,
	[DayInWeek] [int] NOT NULL,
	[DayName] [nvarchar](50) NOT NULL,
	[WeekNumber] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_Date] PRIMARY KEY CLUSTERED 
(
	[DateId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[DeviceVersion]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DeviceVersion](
	[Device] [nvarchar](50) NOT NULL,
	[Version] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_DeviceVersion] PRIMARY KEY CLUSTERED 
(
	[Device] ASC,
	[Version] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[DownloadFromApplication]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DownloadFromApplication](
	[ApplicationId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_DownloadFromApplication] PRIMARY KEY CLUSTERED 
(
	[ApplicationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Email]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Email](
	[EmailId] [bigint] IDENTITY(1,1) NOT NULL,
	[UserId] [bigint] NULL,
	[CompanyId] [bigint] NULL,
	[AdminId] [bigint] NULL,
	[MailFrom] [nvarchar](255) NOT NULL,
	[MailFromPassword] [nvarchar](50) NULL,
	[MailTo] [nvarchar](255) NOT NULL,
	[Subject] [nvarchar](50) NULL,
	[Body] [nvarchar](max) NULL,
	[IsBodyHTML] [bit] NOT NULL,
	[Sent] [bit] NOT NULL,
	[DateSent] [datetime] NULL,
	[Failed] [bit] NOT NULL,
	[FailedTimes] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_Email] PRIMARY KEY CLUSTERED 
(
	[EmailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[EntityUpdate]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntityUpdate](
	[UpdateId] [int] IDENTITY(1,1) NOT NULL,
	[Entity] [nvarchar](50) NOT NULL,
	[Version] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_EntityUpdate] PRIMARY KEY CLUSTERED 
(
	[UpdateId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Event]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Event](
	[EventId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateFrom] [datetime] NULL,
	[DateTo] [datetime] NULL,
	[Bonus] [money] NULL,
	[Interval] [int] NULL,
	[Goal] [int] NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_Setting] PRIMARY KEY CLUSTERED 
(
	[EventId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[EventLog]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EventLog](
	[LogId] [bigint] IDENTITY(1,1) NOT NULL,
	[UserId] [bigint] NOT NULL,
	[EventId] [int] NOT NULL,
	[Finished] [bit] NOT NULL,
	[Bonus] [money] NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_EventLog] PRIMARY KEY CLUSTERED 
(
	[LogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ExcelData]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExcelData](
	[Mobile] [nvarchar](50) NOT NULL,
	[SchoolId] [int] NULL,
	[FullName] [nvarchar](max) NULL,
	[Password] [nvarchar](max) NULL,
	[Salt] [nvarchar](max) NULL,
	[DownloadFromApplicationId] [int] NULL,
	[Imported] [bit] NOT NULL,
 CONSTRAINT [PK_ExcelData] PRIMARY KEY CLUSTERED 
(
	[Mobile] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Feedback]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Feedback](
	[FeedbackId] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [bigint] NULL,
	[CompanyId] [bigint] NULL,
	[Description] [nvarchar](255) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_Feedback] PRIMARY KEY CLUSTERED 
(
	[FeedbackId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[FilterActivityJob]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FilterActivityJob](
	[UserId] [bigint] NOT NULL,
	[PositionId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_FilterActivityJob] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[PositionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[FilterCampusJob]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FilterCampusJob](
	[UserId] [bigint] NOT NULL,
	[CategoryId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_FilterCampusJob] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[CategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[FilterGender]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FilterGender](
	[UserId] [bigint] NOT NULL,
	[Gender] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_FilterGender_1] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[FilterInternJob]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FilterInternJob](
	[UserId] [bigint] NOT NULL,
	[CategoryId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_FilterInternJob] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[CategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[FilterRegion]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FilterRegion](
	[UserId] [bigint] NOT NULL,
	[RegionId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_FilterRegion] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[RegionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[FilterServiceJob]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FilterServiceJob](
	[UserId] [bigint] NOT NULL,
	[PositionId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_FilterServiceJob] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[PositionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[FilterTutorJob]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FilterTutorJob](
	[UserId] [bigint] NOT NULL,
	[PaperId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_FitlerTutorJob] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[PaperId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[FilterWorkTime]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FilterWorkTime](
	[UserId] [bigint] NOT NULL,
	[MonMorning] [bit] NOT NULL,
	[MonAfternoon] [bit] NOT NULL,
	[MonNight] [bit] NOT NULL,
	[TueMorning] [bit] NOT NULL,
	[TueAfternoon] [bit] NOT NULL,
	[TueNight] [bit] NOT NULL,
	[WedMorning] [bit] NOT NULL,
	[WedAfternoon] [bit] NOT NULL,
	[WedNight] [bit] NOT NULL,
	[ThuMorning] [bit] NOT NULL,
	[ThuAfternoon] [bit] NOT NULL,
	[ThuNight] [bit] NOT NULL,
	[FriMorning] [bit] NOT NULL,
	[FriAfternoon] [bit] NOT NULL,
	[FriNight] [bit] NOT NULL,
	[SatMorning] [bit] NOT NULL,
	[SatAfternoon] [bit] NOT NULL,
	[SatNight] [bit] NOT NULL,
	[SunMorning] [bit] NOT NULL,
	[SunAfternoon] [bit] NOT NULL,
	[SunNight] [bit] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_FilterWorkTime_1] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[InternJob]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[InternJob](
	[JobId] [bigint] IDENTITY(1,1) NOT NULL,
	[CompanyId] [bigint] NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Title] [nvarchar](50) NOT NULL,
	[JobTypeId] [int] NOT NULL,
	[StatusId] [int] NOT NULL,
	[CategoryId] [int] NOT NULL,
	[RegionId] [int] NOT NULL,
	[WageUnitId] [int] NULL,
	[Wage] [money] NULL,
	[IncludeDinner] [bit] NOT NULL,
	[IncludeRoom] [bit] NOT NULL,
	[IncludeCommission] [bit] NOT NULL,
	[Gender] [int] NOT NULL,
	[Deposit] [money] NOT NULL,
	[PeopleRequired] [int] NULL,
	[Contact] [nvarchar](50) NOT NULL,
	[ContactPhone] [nvarchar](50) NOT NULL,
	[Address] [nvarchar](255) NULL,
	[DateFrom] [date] NOT NULL,
	[DateExpiry] [date] NOT NULL,
	[WorkFrom] [date] NULL,
	[WorkEnd] [date] NULL,
	[Description] [nvarchar](max) NULL,
	[ViewTimes] [int] NOT NULL,
	[FakeViewTimes] [int] NOT NULL,
	[Shares] [int] NOT NULL,
	[WapViewTimes] [int] NOT NULL,
	[Recommended] [bit] NOT NULL,
	[Sticky] [bit] NOT NULL,
	[StickyExpired] [date] NULL,
	[Disabled] [bit] NOT NULL,
	[Reptile] [bit] NOT NULL,
	[SourceWebSite] [nvarchar](50) NULL,
	[MonMorning] [bit] NOT NULL,
	[MonAfternoon] [bit] NOT NULL,
	[MonNight] [bit] NOT NULL,
	[TueMorning] [bit] NOT NULL,
	[TueAfternoon] [bit] NOT NULL,
	[TueNight] [bit] NOT NULL,
	[WedMorning] [bit] NOT NULL,
	[WedAfternoon] [bit] NOT NULL,
	[WedNight] [bit] NOT NULL,
	[ThuMorning] [bit] NOT NULL,
	[ThuAfternoon] [bit] NOT NULL,
	[ThuNight] [bit] NOT NULL,
	[FriMorning] [bit] NOT NULL,
	[FriAfternoon] [bit] NOT NULL,
	[FriNight] [bit] NOT NULL,
	[SatMorning] [bit] NOT NULL,
	[SatAfternoon] [bit] NOT NULL,
	[SatNight] [bit] NOT NULL,
	[SunMorning] [bit] NOT NULL,
	[SunAfternoon] [bit] NOT NULL,
	[SunNight] [bit] NOT NULL,
	[IgnoreTimeSheet] [bit] NOT NULL,
	[DatePublished] [datetime] NULL,
	[AgentUserId] [int] NULL,
	[AdminId] [int] NULL,
	[JobAllocateTypeId] [int] NULL,
	[DateEmployeeManagementDeleted] [datetime] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_InternJob] PRIMARY KEY CLUSTERED 
(
	[JobId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[InternJobApply]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[InternJobApply](
	[ApplyId] [bigint] IDENTITY(1,1) NOT NULL,
	[JobId] [bigint] NOT NULL,
	[UserId] [bigint] NOT NULL,
	[StatusId] [int] NOT NULL,
	[DateHired] [datetime] NULL,
	[DateEnded] [datetime] NULL,
	[DateEndedReasonId] [int] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_InterJobApply] PRIMARY KEY CLUSTERED 
(
	[ApplyId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[InternJobCategory]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[InternJobCategory](
	[CategoryId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_InternJobCategory] PRIMARY KEY CLUSTERED 
(
	[CategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[InternJobComplain]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[InternJobComplain](
	[ComplainId] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [bigint] NOT NULL,
	[UserId] [bigint] NOT NULL,
	[StatusId] [int] NOT NULL,
	[Description] [nvarchar](255) NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_InternJobComplain] PRIMARY KEY CLUSTERED 
(
	[ComplainId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[JobAllocateType]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobAllocateType](
	[TypeId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[GroupId] [int] NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_JobAllocateType] PRIMARY KEY CLUSTERED 
(
	[TypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[JobAllocateTypeGroup]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobAllocateTypeGroup](
	[GroupId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_JobAllocateTypeGroup] PRIMARY KEY CLUSTERED 
(
	[GroupId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[JobApplyAbsentComplain]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobApplyAbsentComplain](
	[ComplainId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_JobApplyAbsenceReason] PRIMARY KEY CLUSTERED 
(
	[ComplainId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[JobApplyEndReason]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobApplyEndReason](
	[ReasonId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_JobApplyEndReason] PRIMARY KEY CLUSTERED 
(
	[ReasonId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[JobApplySignIn]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobApplySignIn](
	[SignInId] [bigint] IDENTITY(1,1) NOT NULL,
	[Date] [date] NOT NULL,
	[JobId] [bigint] NOT NULL,
	[JobTypeId] [int] NOT NULL,
	[UserId] [bigint] NOT NULL,
	[DateConfirmedSignedIn] [datetime] NULL,
	[DateConfirmedSignedOut] [datetime] NULL,
	[DateUpdatedSignedIn] [datetime] NULL,
	[DateUpdatedSignedOut] [datetime] NULL,
	[WageAdjusted] [money] NULL,
	[Note] [nvarchar](255) NULL,
	[DateAbsent] [datetime] NULL,
	[AbsentComplainId] [int] NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_SignIn] PRIMARY KEY CLUSTERED 
(
	[SignInId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[JobStatus]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobStatus](
	[StatusId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](50) NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_JobStatus] PRIMARY KEY CLUSTERED 
(
	[StatusId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[JobType]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobType](
	[TypeId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_JobType] PRIMARY KEY CLUSTERED 
(
	[TypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[JobTypeRelation]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobTypeRelation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](255) NULL,
	[JobTypeId] [int] NULL,
	[JobTypeName] [nvarchar](50) NULL,
	[CategoryId] [int] NULL,
	[CategoryName] [nvarchar](50) NULL,
	[SubCategoryId] [int] NULL,
	[SubCategoryName] [nvarchar](50) NULL,
 CONSTRAINT [PK_JobTypeRelation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Marketer]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Marketer](
	[MarketerId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NULL,
	[Phone] [nvarchar](50) NULL,
	[DateCreated] [datetime] NULL,
 CONSTRAINT [PK_Marketer] PRIMARY KEY CLUSTERED 
(
	[MarketerId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[MarketerRegister]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MarketerRegister](
	[RegisterUserId] [bigint] NOT NULL,
	[MarketerId] [int] NOT NULL,
	[Mobile] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[RegisterDate] [datetime] NOT NULL,
 CONSTRAINT [PK_MarketerRegister] PRIMARY KEY CLUSTERED 
(
	[RegisterUserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Message]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Message](
	[MessageId] [bigint] IDENTITY(1,1) NOT NULL,
	[SendingId] [bigint] NOT NULL,
	[TargetId] [bigint] NOT NULL,
	[JobId] [bigint] NOT NULL,
	[JobTypeId] [int] NOT NULL,
	[Message] [nvarchar](255) NOT NULL,
	[MessageTypeId] [int] NOT NULL,
	[Read] [bit] NOT NULL,
	[SystemMessageId] [int] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_Message] PRIMARY KEY CLUSTERED 
(
	[MessageId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[MessageType]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MessageType](
	[MessageTypeId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_MessageType] PRIMARY KEY CLUSTERED 
(
	[MessageTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[NoticeBoard]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NoticeBoard](
	[BoardId] [int] IDENTITY(1,1) NOT NULL,
	[AdminId] [int] NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[Content] [nvarchar](max) NOT NULL,
	[DatePublished] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_NoticeBoard] PRIMARY KEY CLUSTERED 
(
	[BoardId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Notification]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Notification](
	[NotificationId] [bigint] IDENTITY(1,1) NOT NULL,
	[MessageId] [bigint] NOT NULL,
	[MessageType] [nvarchar](50) NOT NULL,
	[MessageTypeId] [int] NOT NULL,
	[Message] [nvarchar](max) NOT NULL,
	[MessageTitle] [nvarchar](255) NOT NULL,
	[SendingId] [bigint] NOT NULL,
	[TargetId] [bigint] NOT NULL,
	[JobId] [bigint] NOT NULL,
	[JobTypeId] [int] NOT NULL,
	[Device] [nvarchar](50) NOT NULL,
	[DeviceToken] [nvarchar](255) NULL,
	[BaiduUserId] [nvarchar](50) NULL,
	[VoiceAlert] [bit] NOT NULL,
	[Vibrate] [bit] NOT NULL,
	[NotificationCount] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_Notification] PRIMARY KEY CLUSTERED 
(
	[NotificationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Order]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Order](
	[OrderId] [bigint] IDENTITY(1,1) NOT NULL,
	[OrderNumber] [nvarchar](50) NOT NULL,
	[CompanyId] [bigint] NOT NULL,
	[JobId] [bigint] NOT NULL,
	[JobTypeId] [int] NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[Date] [date] NOT NULL,
	[PeopleCount] [int] NOT NULL,
	[Amount] [money] NOT NULL,
	[UpdatedAmount] [money] NULL,
	[DatePaid] [datetime] NULL,
	[DatePaymentConfirmed] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_Order] PRIMARY KEY CLUSTERED 
(
	[OrderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[OrderBy]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OrderBy](
	[OrderById] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_OrderBy] PRIMARY KEY CLUSTERED 
(
	[OrderById] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[OrderLine]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OrderLine](
	[OrderLineId] [bigint] IDENTITY(1,1) NOT NULL,
	[OrderId] [bigint] NOT NULL,
	[UserId] [bigint] NOT NULL,
	[DateFrom] [datetime] NULL,
	[DateTo] [datetime] NULL,
	[Amount] [money] NOT NULL,
	[UpdatedAmount] [money] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_Table_1] PRIMARY KEY CLUSTERED 
(
	[OrderLineId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PaymentNotify]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PaymentNotify](
	[payment_id] [bigint] IDENTITY(1,1) NOT NULL,
	[notify_time] [nvarchar](50) NULL,
	[notify_type] [nvarchar](50) NULL,
	[notify_id] [nvarchar](50) NULL,
	[sign_type] [nvarchar](50) NULL,
	[sign] [nvarchar](512) NULL,
	[out_trade_no] [nvarchar](255) NULL,
	[subject] [nvarchar](255) NULL,
	[payment_type] [nvarchar](50) NULL,
	[trade_no] [nvarchar](255) NULL,
	[trade_status] [nvarchar](50) NULL,
	[seller_id] [nvarchar](50) NULL,
	[seller_email] [nvarchar](255) NULL,
	[buyer_id] [nvarchar](50) NULL,
	[buyer_email] [nvarchar](255) NULL,
	[total_fee] [nvarchar](50) NULL,
	[quantity] [nvarchar](50) NULL,
	[price] [nvarchar](50) NULL,
	[body] [nvarchar](512) NULL,
	[gmt_create] [nvarchar](50) NULL,
	[gmt_payment] [nvarchar](50) NULL,
	[is_total_fee_adjust] [nvarchar](50) NULL,
	[use_coupon] [nvarchar](50) NULL,
	[discount] [nvarchar](50) NULL,
	[refund_status] [nvarchar](50) NULL,
	[gmt_refund] [nvarchar](50) NULL,
	[note] [nvarchar](50) NULL,
	[date_created] [datetime] NOT NULL,
 CONSTRAINT [PK_PaymentNotify] PRIMARY KEY CLUSTERED 
(
	[payment_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Permission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Permission](
	[PermissionId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](255) NULL,
	[Group] [nvarchar](50) NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_PermissionId] PRIMARY KEY CLUSTERED 
(
	[PermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Promoter]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Promoter](
	[PromoterId] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [nvarchar](50) NOT NULL,
	[Email] [nvarchar](50) NULL,
	[Password] [nvarchar](255) NOT NULL,
	[Salt] [nvarchar](50) NOT NULL,
	[LastLogonDate] [datetime] NULL,
	[CreatedByAdminId] [int] NULL,
	[CreatedByAgentUserId] [int] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_Promoter] PRIMARY KEY CLUSTERED 
(
	[PromoterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PromoterLogon]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PromoterLogon](
	[LogonId] [int] IDENTITY(1,1) NOT NULL,
	[PromoterId] [int] NOT NULL,
	[Token] [nvarchar](50) NOT NULL,
	[TokenExpiryDate] [datetime] NOT NULL,
	[IPAddress] [nvarchar](50) NOT NULL,
	[DateLogon] [datetime] NOT NULL,
 CONSTRAINT [PK_PromoterLogon] PRIMARY KEY CLUSTERED 
(
	[LogonId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PromoterRegistration]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PromoterRegistration](
	[PromoterUserId] [bigint] NOT NULL,
	[UserId] [bigint] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_PromoterRegistration] PRIMARY KEY CLUSTERED 
(
	[PromoterUserId] ASC,
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PromoterTeam]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PromoterTeam](
	[TeamId] [int] IDENTITY(1,1) NOT NULL,
	[PromoterId] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_PromoterTeam] PRIMARY KEY CLUSTERED 
(
	[TeamId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PromoterTeamMember]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PromoterTeamMember](
	[UserId] [bigint] NOT NULL,
	[TeamId] [int] NOT NULL,
	[Leader] [bit] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_PromoterTeamMember] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Province]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Province](
	[ProvinceId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Sequence] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_Province] PRIMARY KEY CLUSTERED 
(
	[ProvinceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Region]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Region](
	[RegionId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Letter] [nvarchar](50) NULL,
	[ParentRegionId] [int] NULL,
	[RootRegionId] [int] NULL,
	[Left] [int] NULL,
	[Right] [int] NULL,
	[Descend] [int] NULL,
	[Indentation] [int] NULL,
	[Sequence] [int] NULL,
	[ProvinceId] [int] NULL,
	[ImportReptile] [bit] NOT NULL,
	[RequireVerify] [bit] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_Region] PRIMARY KEY CLUSTERED 
(
	[RegionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Register]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Register](
	[RegisterId] [bigint] IDENTITY(1,1) NOT NULL,
	[Mobile] [nvarchar](50) NOT NULL,
	[MobileVerficationCode] [nvarchar](50) NOT NULL,
	[DateExpired] [datetime] NOT NULL,
	[MobileVerified] [bit] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_Register] PRIMARY KEY CLUSTERED 
(
	[RegisterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[RegisterBank]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RegisterBank](
	[RegisterId] [bigint] IDENTITY(1,1) NOT NULL,
	[UserId] [bigint] NOT NULL,
	[Mobile] [nvarchar](50) NOT NULL,
	[MobileVerficationCode] [nvarchar](50) NOT NULL,
	[DateExpired] [datetime] NOT NULL,
	[MobileVerified] [bit] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_RegisterBank] PRIMARY KEY CLUSTERED 
(
	[RegisterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ResetPassword]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ResetPassword](
	[ResetId] [bigint] IDENTITY(1,1) NOT NULL,
	[Mobile] [nvarchar](50) NOT NULL,
	[MobileVerficationCode] [nvarchar](50) NOT NULL,
	[DateExpired] [datetime] NOT NULL,
	[MobileVerified] [bit] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_ResetPassword] PRIMARY KEY CLUSTERED 
(
	[ResetId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Role]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Role](
	[RoleId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[ParentRoleId] [int] NULL,
	[RootRoleId] [int] NULL,
	[Left] [int] NULL,
	[Right] [int] NULL,
	[Descend] [int] NULL,
	[Indentation] [int] NULL,
	[Sequence] [int] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_Role] PRIMARY KEY CLUSTERED 
(
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[RolePermission]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RolePermission](
	[RoleId] [int] NOT NULL,
	[PermissionId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_RolePermission] PRIMARY KEY CLUSTERED 
(
	[RoleId] ASC,
	[PermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[School]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[School](
	[SchoolId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[RegionId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_School] PRIMARY KEY CLUSTERED 
(
	[SchoolId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ServiceJob]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ServiceJob](
	[JobId] [bigint] IDENTITY(1,1) NOT NULL,
	[CompanyId] [bigint] NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Title] [nvarchar](50) NOT NULL,
	[JobTypeId] [int] NOT NULL,
	[StatusId] [int] NOT NULL,
	[CategoryId] [int] NOT NULL,
	[PositionId] [int] NOT NULL,
	[RegionId] [int] NOT NULL,
	[WageUnitId] [int] NULL,
	[Wage] [money] NULL,
	[IncludeDinner] [bit] NOT NULL,
	[IncludeRoom] [bit] NOT NULL,
	[IncludeCommission] [bit] NOT NULL,
	[TermId] [int] NULL,
	[Gender] [int] NOT NULL,
	[Deposit] [money] NOT NULL,
	[PeopleRequired] [int] NULL,
	[Contact] [nvarchar](50) NOT NULL,
	[ContactPhone] [nvarchar](50) NOT NULL,
	[Address] [nvarchar](255) NULL,
	[DateFrom] [date] NOT NULL,
	[DateExpiry] [date] NOT NULL,
	[WorkFrom] [date] NULL,
	[WorkEnd] [date] NULL,
	[Description] [nvarchar](max) NULL,
	[ViewTimes] [int] NOT NULL,
	[FakeViewTimes] [int] NOT NULL,
	[Shares] [int] NOT NULL,
	[WapViewTimes] [int] NOT NULL,
	[Recommended] [bit] NOT NULL,
	[Sticky] [bit] NOT NULL,
	[StickyExpired] [date] NULL,
	[Disabled] [bit] NOT NULL,
	[Reptile] [bit] NOT NULL,
	[SourceWebSite] [nvarchar](50) NULL,
	[MonMorning] [bit] NOT NULL,
	[MonAfternoon] [bit] NOT NULL,
	[MonNight] [bit] NOT NULL,
	[TueMorning] [bit] NOT NULL,
	[TueAfternoon] [bit] NOT NULL,
	[TueNight] [bit] NOT NULL,
	[WedMorning] [bit] NOT NULL,
	[WedAfternoon] [bit] NOT NULL,
	[WedNight] [bit] NOT NULL,
	[ThuMorning] [bit] NOT NULL,
	[ThuAfternoon] [bit] NOT NULL,
	[ThuNight] [bit] NOT NULL,
	[FriMorning] [bit] NOT NULL,
	[FriAfternoon] [bit] NOT NULL,
	[FriNight] [bit] NOT NULL,
	[SatMorning] [bit] NOT NULL,
	[SatAfternoon] [bit] NOT NULL,
	[SatNight] [bit] NOT NULL,
	[SunMorning] [bit] NOT NULL,
	[SunAfternoon] [bit] NOT NULL,
	[SunNight] [bit] NOT NULL,
	[IgnoreTimeSheet] [bit] NOT NULL,
	[DatePublished] [datetime] NULL,
	[AgentUserId] [int] NULL,
	[AdminId] [int] NULL,
	[JobAllocateTypeId] [int] NULL,
	[DateEmployeeManagementDeleted] [datetime] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_ServiceJob] PRIMARY KEY CLUSTERED 
(
	[JobId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ServiceJobApply]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ServiceJobApply](
	[ApplyId] [bigint] IDENTITY(1,1) NOT NULL,
	[JobId] [bigint] NOT NULL,
	[UserId] [bigint] NOT NULL,
	[StatusId] [int] NOT NULL,
	[DateHired] [datetime] NULL,
	[DateEnded] [datetime] NULL,
	[DateEndedReasonId] [int] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_ServiceJobApply] PRIMARY KEY CLUSTERED 
(
	[ApplyId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ServiceJobCategory]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ServiceJobCategory](
	[CategoryId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_ServiceJobCategory] PRIMARY KEY CLUSTERED 
(
	[CategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ServiceJobComplain]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ServiceJobComplain](
	[ComplainId] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [bigint] NOT NULL,
	[UserId] [bigint] NOT NULL,
	[StatusId] [int] NOT NULL,
	[Description] [nvarchar](255) NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_ServiceJobComplain] PRIMARY KEY CLUSTERED 
(
	[ComplainId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ServiceJobPosition]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ServiceJobPosition](
	[PositionId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_ServiceJobPosition] PRIMARY KEY CLUSTERED 
(
	[PositionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[SystemMessage]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SystemMessage](
	[SystemMessageId] [int] IDENTITY(1,1) NOT NULL,
	[AdminId] [int] NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[Content] [nvarchar](max) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_SystemMessage] PRIMARY KEY CLUSTERED 
(
	[SystemMessageId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Term]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Term](
	[TermId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_Term] PRIMARY KEY CLUSTERED 
(
	[TermId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Trade]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Trade](
	[TradeId] [bigint] NOT NULL,
	[OrderId] [bigint] NOT NULL,
	[DatePaid] [datetime] NULL,
	[DatePaymentConfirmed] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_Trade] PRIMARY KEY CLUSTERED 
(
	[TradeId] ASC,
	[OrderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TutorJob]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TutorJob](
	[JobId] [bigint] IDENTITY(1,1) NOT NULL,
	[CompanyId] [bigint] NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Title] [nvarchar](50) NOT NULL,
	[JobTypeId] [int] NOT NULL,
	[StatusId] [int] NOT NULL,
	[LevelId] [int] NOT NULL,
	[PaperId] [int] NOT NULL,
	[RegionId] [int] NOT NULL,
	[WageUnitId] [int] NULL,
	[Wage] [money] NULL,
	[IncludeDinner] [bit] NOT NULL,
	[IncludeRoom] [bit] NOT NULL,
	[IncludeCommission] [bit] NOT NULL,
	[TermId] [int] NULL,
	[Gender] [int] NOT NULL,
	[Deposit] [money] NOT NULL,
	[PeopleRequired] [int] NULL,
	[Contact] [nvarchar](50) NOT NULL,
	[ContactPhone] [nvarchar](50) NOT NULL,
	[Address] [nvarchar](255) NULL,
	[DateFrom] [date] NOT NULL,
	[DateExpiry] [date] NOT NULL,
	[WorkFrom] [date] NULL,
	[WorkEnd] [date] NULL,
	[Description] [nvarchar](max) NULL,
	[ViewTimes] [int] NOT NULL,
	[FakeViewTimes] [int] NOT NULL,
	[Shares] [int] NOT NULL,
	[WapViewTimes] [int] NOT NULL,
	[Recommended] [bit] NOT NULL,
	[Sticky] [bit] NOT NULL,
	[StickyExpired] [date] NULL,
	[Disabled] [bit] NOT NULL,
	[Reptile] [bit] NOT NULL,
	[SourceWebSite] [nvarchar](50) NULL,
	[MonMorning] [bit] NOT NULL,
	[MonAfternoon] [bit] NOT NULL,
	[MonNight] [bit] NOT NULL,
	[TueMorning] [bit] NOT NULL,
	[TueAfternoon] [bit] NOT NULL,
	[TueNight] [bit] NOT NULL,
	[WedMorning] [bit] NOT NULL,
	[WedAfternoon] [bit] NOT NULL,
	[WedNight] [bit] NOT NULL,
	[ThuMorning] [bit] NOT NULL,
	[ThuAfternoon] [bit] NOT NULL,
	[ThuNight] [bit] NOT NULL,
	[FriMorning] [bit] NOT NULL,
	[FriAfternoon] [bit] NOT NULL,
	[FriNight] [bit] NOT NULL,
	[SatMorning] [bit] NOT NULL,
	[SatAfternoon] [bit] NOT NULL,
	[SatNight] [bit] NOT NULL,
	[SunMorning] [bit] NOT NULL,
	[SunAfternoon] [bit] NOT NULL,
	[SunNight] [bit] NOT NULL,
	[IgnoreTimeSheet] [bit] NOT NULL,
	[DatePublished] [datetime] NULL,
	[AgentUserId] [int] NULL,
	[AdminId] [int] NULL,
	[JobAllocateTypeId] [int] NULL,
	[DateEmployeeManagementDeleted] [datetime] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_Tutor] PRIMARY KEY CLUSTERED 
(
	[JobId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TutorJobApply]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TutorJobApply](
	[ApplyId] [bigint] IDENTITY(1,1) NOT NULL,
	[JobId] [bigint] NOT NULL,
	[UserId] [bigint] NOT NULL,
	[StatusId] [int] NOT NULL,
	[DateHired] [datetime] NULL,
	[DateEnded] [datetime] NULL,
	[DateEndedReasonId] [int] NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_TutorJobApply] PRIMARY KEY CLUSTERED 
(
	[ApplyId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TutorJobComplain]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TutorJobComplain](
	[ComplainId] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [bigint] NOT NULL,
	[UserId] [bigint] NOT NULL,
	[StatusId] [int] NOT NULL,
	[Description] [nvarchar](255) NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_TutorJobComplain] PRIMARY KEY CLUSTERED 
(
	[ComplainId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TutorJobLevel]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TutorJobLevel](
	[LevelId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_SchoolLevel] PRIMARY KEY CLUSTERED 
(
	[LevelId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TutorJobPaper]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TutorJobPaper](
	[PaperId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_Paper] PRIMARY KEY CLUSTERED 
(
	[PaperId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[User]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[User](
	[UserId] [bigint] IDENTITY(1,1) NOT NULL,
	[Mobile] [nvarchar](50) NOT NULL,
	[SchoolId] [int] NOT NULL,
	[FullName] [nvarchar](50) NULL,
	[Password] [nvarchar](255) NOT NULL,
	[Salt] [nvarchar](50) NOT NULL,
	[DateofBirth] [datetime] NULL,
	[Gender] [int] NULL,
	[Tall] [int] NULL,
	[RegionId] [int] NULL,
	[ProfilePhoto] [nvarchar](255) NULL,
	[Longitude] [nvarchar](50) NULL,
	[Latitude] [nvarchar](50) NULL,
	[QQ] [nvarchar](50) NULL,
	[Email] [nvarchar](50) NULL,
	[Major] [nvarchar](50) NULL,
	[WorkExperience] [nvarchar](255) NULL,
	[Balance] [money] NOT NULL,
	[FrozenBalance] [money] NOT NULL,
	[Device] [nvarchar](50) NULL,
	[DeviceToken] [nvarchar](255) NULL,
	[BaiduUserId] [nvarchar](50) NULL,
	[Version] [nvarchar](50) NULL,
	[DownloadFromApplicationId] [int] NULL,
	[VoiceAlert] [bit] NOT NULL,
	[Vibrate] [bit] NOT NULL,
	[IsLogin] [bit] NOT NULL,
	[Manual] [bit] NOT NULL,
	[NotificationCount] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_User] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[UserAccount]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserAccount](
	[AccountId] [bigint] IDENTITY(1,1) NOT NULL,
	[UserId] [bigint] NOT NULL,
	[BankId] [int] NOT NULL,
	[AccountNo] [nvarchar](255) NOT NULL,
	[AccountName] [nvarchar](50) NOT NULL,
	[Default] [bit] NOT NULL,
	[DateDeleted] [datetime] NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_UserBank_1] PRIMARY KEY CLUSTERED 
(
	[AccountId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[UserCashIn]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserCashIn](
	[CashInId] [bigint] IDENTITY(1,1) NOT NULL,
	[UserId] [bigint] NOT NULL,
	[Amount] [money] NOT NULL,
	[Balance] [money] NOT NULL,
	[Note] [nvarchar](255) NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_UserCashIn] PRIMARY KEY CLUSTERED 
(
	[CashInId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[UserCashOut]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserCashOut](
	[CashOutId] [bigint] IDENTITY(1,1) NOT NULL,
	[UserId] [bigint] NOT NULL,
	[AccountId] [bigint] NOT NULL,
	[Amount] [money] NOT NULL,
	[Balance] [money] NOT NULL,
	[StatusId] [int] NOT NULL,
	[Note] [nvarchar](255) NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK_UserCashOut] PRIMARY KEY CLUSTERED 
(
	[CashOutId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[UserFavoriteJob]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserFavoriteJob](
	[UserId] [bigint] NOT NULL,
	[JobTypeId] [int] NOT NULL,
	[JobId] [bigint] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_UserFavoriteJob] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[JobTypeId] ASC,
	[JobId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[UserLogon]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserLogon](
	[LogonId] [bigint] IDENTITY(1,1) NOT NULL,
	[UserId] [bigint] NOT NULL,
	[Token] [nvarchar](50) NOT NULL,
	[TokenExpiryDate] [datetime] NOT NULL,
	[IPAddress] [nvarchar](50) NOT NULL,
	[DateLogon] [datetime] NOT NULL,
 CONSTRAINT [PK_UserLogon] PRIMARY KEY CLUSTERED 
(
	[LogonId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[WageUnit]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WageUnit](
	[UnitId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_WageUnit] PRIMARY KEY CLUSTERED 
(
	[UnitId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[WebCompanyLogon]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WebCompanyLogon](
	[LogonId] [bigint] IDENTITY(1,1) NOT NULL,
	[CompanyId] [bigint] NOT NULL,
	[Token] [nvarchar](50) NOT NULL,
	[TokenExpiryDate] [datetime] NOT NULL,
	[IPAddress] [nvarchar](50) NOT NULL,
	[DateLogon] [datetime] NOT NULL,
 CONSTRAINT [PK_WebCompanyLogon] PRIMARY KEY CLUSTERED 
(
	[LogonId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[WebUserLogon]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WebUserLogon](
	[LogonId] [bigint] IDENTITY(1,1) NOT NULL,
	[UserId] [bigint] NOT NULL,
	[Token] [nvarchar](50) NOT NULL,
	[TokenExpiryDate] [datetime] NOT NULL,
	[IPAddress] [nvarchar](50) NOT NULL,
	[DateLogon] [datetime] NOT NULL,
 CONSTRAINT [PK_WebUserLogon] PRIMARY KEY CLUSTERED 
(
	[LogonId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  View [dbo].[view_agentuser_promoter_right]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create VIEW [dbo].[view_agentuser_promoter_right] AS 
SELECT   [dbo].[AgentUser].UserId, [dbo].[AgentUser].UserName
      ,[dbo].[AgentRole].RoleId
	  ,[dbo].[AgentRole].Name
  ,CASE WHEN [dbo].[AgentUser].Typeid>1 then [dbo].[AgentUser].Typeid    WHEN [dbo].[AgentRole].ParentRoleId IS NULL THEN 11               ELSE 12             END TypeId --11,总代管理员12，总代下的部门3，市代
  ,CASE WHEN [dbo].[AgentUser].Typeid>1 then '市代'                      WHEN [dbo].[AgentRole].ParentRoleId IS NULL THEN '总代管理员'     ELSE '总代下的部门' END TypeName --11,总代管理员12，总代下的部门3，市代
  ,CASE WHEN [dbo].[AgentUser].Typeid>1 then AgentUser.AdminAgentUserID  WHEN [dbo].[AgentRole].ParentRoleId IS NULL THEN AgentUser.UserId ELSE AgentUser.AdminAgentUserID  END AdminAgentUserID--11,总代管理员12，总代下的部门3，市代 

  --,[dbo].[AgentRole].*
  FROM  [dbo].[AgentUser] left JOIN  [dbo].[AgentUserAgentRole]  ON 
  [dbo].[AgentUser].UserId=[dbo].[AgentUserAgentRole].UserID   left JOIN 
  [dbo].[AgentRole] ON   [dbo].[AgentRole].RoleId=[dbo].[AgentUserAgentRole].RoleId
--WHERE (CASE WHEN [dbo].[AgentUser].Typeid>1 then AgentUser.AdminAgentUserID  WHEN [dbo].[AgentRole].ParentRoleId IS NULL THEN AgentUser.UserId ELSE AgentUser.AdminAgentUserID  END )=@LoginUserID

GO
/****** Object:  View [dbo].[view_job]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [dbo].[view_job] as
select [JobId],[CompanyId],[CompanyName],[Title],[JobTypeId],j.PositionId as CategoryId, p.Name as CategoryName, null as SubCategoryId, null as SubCategoryName, null as SchoolId, 
	[StatusId],[RegionId],[WageUnitId],[Wage],[IncludeDinner],[IncludeRoom],[IncludeCommission],[TermId],[Gender]
      ,[Deposit],[PeopleRequired],[Contact],[ContactPhone],[Address],[DateFrom],[DateExpiry],[WorkFrom],[WorkEnd],[Description],[ViewTimes],[FakeViewTimes],Shares,WapViewTimes,[Recommended],[Sticky]
      ,[Disabled],[Reptile],[SourceWebSite],[MonMorning],[MonAfternoon],[MonNight],[TueMorning],[TueAfternoon],[TueNight],[WedMorning],[WedAfternoon],[WedNight],[ThuMorning]
      ,[ThuAfternoon],[ThuNight],[FriMorning],[FriAfternoon],[FriNight],[SatMorning],[SatAfternoon],[SatNight],[SunMorning],[SunAfternoon],[SunNight],[IgnoreTimeSheet]
      ,[DatePublished],[AgentUserId],[AdminId],[JobAllocateTypeId],[DateEmployeeManagementDeleted],j.[DateDeleted],j.[DateCreated],j.[DateModified]
from ActivityJob j
join ActivityJobPosition p on p.PositionId = j.PositionId
union all
select [JobId],[CompanyId],[CompanyName],[Title],[JobTypeId],c.CategoryId as CategoryId, c.Name as CategoryName, null as SubCategoryId, null as SubCategoryName, SchoolId, 
	[StatusId],[RegionId],null,null,null,null,null,null,[Gender]
      ,null,[PeopleRequired],[Contact],[ContactPhone],[Address],[DateFrom],[DateExpiry],[WorkFrom],[WorkEnd],[Description],[ViewTimes],[FakeViewTimes],Shares,WapViewTimes,[Recommended],[Sticky]
      ,[Disabled],[Reptile],[SourceWebSite],[MonMorning],[MonAfternoon],[MonNight],[TueMorning],[TueAfternoon],[TueNight],[WedMorning],[WedAfternoon],[WedNight],[ThuMorning]
      ,[ThuAfternoon],[ThuNight],[FriMorning],[FriAfternoon],[FriNight],[SatMorning],[SatAfternoon],[SatNight],[SunMorning],[SunAfternoon],[SunNight],[IgnoreTimeSheet]
      ,[DatePublished],[AgentUserId],[AdminId],[JobAllocateTypeId],[DateEmployeeManagementDeleted],j.[DateDeleted],j.[DateCreated],j.[DateModified]
from CampusJob j 
join CampusJobCategory c on c.CategoryId = j.CategoryId
union all
select [JobId],[CompanyId],[CompanyName],[Title],[JobTypeId],c.CategoryId as CategoryId, c.Name as CategoryName,null as SubCategoryId, null as SubCategoryName, null as SchoolId, 
	[StatusId],[RegionId],[WageUnitId],[Wage],[IncludeDinner],[IncludeRoom],[IncludeCommission],null,[Gender]
      ,null,[PeopleRequired],[Contact],[ContactPhone],[Address],[DateFrom],[DateExpiry],[WorkFrom],[WorkEnd],[Description],[ViewTimes],[FakeViewTimes],Shares,WapViewTimes,[Recommended],[Sticky]
      ,[Disabled],[Reptile],[SourceWebSite],[MonMorning],[MonAfternoon],[MonNight],[TueMorning],[TueAfternoon],[TueNight],[WedMorning],[WedAfternoon],[WedNight],[ThuMorning]
      ,[ThuAfternoon],[ThuNight],[FriMorning],[FriAfternoon],[FriNight],[SatMorning],[SatAfternoon],[SatNight],[SunMorning],[SunAfternoon],[SunNight],[IgnoreTimeSheet]
      ,[DatePublished],[AgentUserId],[AdminId],[JobAllocateTypeId],[DateEmployeeManagementDeleted],j.[DateDeleted],j.[DateCreated],j.[DateModified]
from InternJob j
join InternJobCategory c on c.CategoryId = j.CategoryId
union all
select [JobId],[CompanyId],[CompanyName],[Title],[JobTypeId],c.CategoryId as CategoryId, c.Name as CategoryName,p.PositionId as SubCategoryId, p.Name as SubCategoryName, null as SchoolId, 
	[StatusId],[RegionId],[WageUnitId],[Wage],[IncludeDinner],[IncludeRoom],[IncludeCommission],[TermId],[Gender]
      ,null,[PeopleRequired],[Contact],[ContactPhone],[Address],[DateFrom],[DateExpiry],[WorkFrom],[WorkEnd],[Description],[ViewTimes],[FakeViewTimes],Shares,WapViewTimes,[Recommended],[Sticky]
      ,[Disabled],[Reptile],[SourceWebSite],[MonMorning],[MonAfternoon],[MonNight],[TueMorning],[TueAfternoon],[TueNight],[WedMorning],[WedAfternoon],[WedNight],[ThuMorning]
      ,[ThuAfternoon],[ThuNight],[FriMorning],[FriAfternoon],[FriNight],[SatMorning],[SatAfternoon],[SatNight],[SunMorning],[SunAfternoon],[SunNight],[IgnoreTimeSheet]
      ,[DatePublished],[AgentUserId],[AdminId],[JobAllocateTypeId],[DateEmployeeManagementDeleted],j.[DateDeleted],j.[DateCreated],j.[DateModified]
from ServiceJob j 
join ServiceJobPosition p on p.PositionId = j.PositionId
join ServiceJobCategory c on c.CategoryId = j.CategoryId
union all
select [JobId],[CompanyId],[CompanyName],[Title],[JobTypeId],c.LevelId as CategoryId, c.Name as CategoryName,p.PaperId as SubCategoryId, p.Name as SubCategoryName, null as SchoolId, 
	[StatusId],[RegionId],[WageUnitId],[Wage],[IncludeDinner],[IncludeRoom],[IncludeCommission],[TermId],[Gender]
      ,null,[PeopleRequired],[Contact],[ContactPhone],[Address],[DateFrom],[DateExpiry],[WorkFrom],[WorkEnd],[Description],[ViewTimes],[FakeViewTimes],Shares,WapViewTimes,[Recommended],[Sticky]
      ,[Disabled],[Reptile],[SourceWebSite],[MonMorning],[MonAfternoon],[MonNight],[TueMorning],[TueAfternoon],[TueNight],[WedMorning],[WedAfternoon],[WedNight],[ThuMorning]
      ,[ThuAfternoon],[ThuNight],[FriMorning],[FriAfternoon],[FriNight],[SatMorning],[SatAfternoon],[SatNight],[SunMorning],[SunAfternoon],[SunNight],[IgnoreTimeSheet]
      ,[DatePublished],[AgentUserId],[AdminId],[JobAllocateTypeId],[DateEmployeeManagementDeleted],j.[DateDeleted],j.[DateCreated],j.[DateModified]
from TutorJob j 
join TutorJobLevel c on c.LevelId = j.LevelId
join TutorJobPaper p on p.PaperId = j.PaperId

GO
/****** Object:  View [dbo].[view_job_apply]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[view_job_apply]
as
	select JobId, 1 JobTypeId, UserId, StatusId, DateHired, DateEnded, DateEndedReasonId, DateDeleted, DateCreated, DateModified
	from ActivityJobApply 
	union all
	select JobId, 2 JobTypeId, UserId, StatusId, DateHired, DateEnded, DateEndedReasonId, DateDeleted, DateCreated, DateModified
	from CampusJobApply 
	union all
	select JobId, 3 JobTypeId, UserId, StatusId, DateHired, DateEnded, DateEndedReasonId, DateDeleted, DateCreated, DateModified
	from InternJobApply 
	union all
	select JobId, 4 JobTypeId, UserId, StatusId, DateHired, DateEnded, DateEndedReasonId, DateDeleted, DateCreated, DateModified
	from ServiceJobApply 
	union all
	select JobId, 5 JobTypeId, UserId, StatusId, DateHired, DateEnded, DateEndedReasonId, DateDeleted, DateCreated, DateModified
	from TutorJobApply 

GO
/****** Object:  View [dbo].[view_jobtype_jobsubtype]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[view_jobtype_jobsubtype] AS 
--商业活动
SELECT  JobType.TypeId,JobType.Name JobTypeName, ActivityJobPosition.PositionId,ActivityJobPosition.Name  JobTypeSubName 
FROM    JobType ,ActivityJobPosition
WHERE   JobType.TypeId=1
UNION ALL--校园活动
SELECT  JobType.TypeId,JobType.Name JobTypeName,CampusJobCategory.CategoryId  PositionId,CampusJobCategory.Name  JobTypeSubName
FROM    JobType , 
        CampusJobCategory  
WHERE   JobType.TypeId=2
UNION ALL--实习生
SELECT  JobType.TypeId,JobType.Name JobTypeName,InternJobCategory.CategoryId PositionId,InternJobCategory.Name  JobTypeSubName
FROM    JobType , 
        InternJobCategory 
WHERE   JobType.TypeId=3
UNION ALL--服务生
SELECT  JobType.TypeId,JobType.Name JobTypeName,ServiceJobPosition.PositionId,ServiceJobPosition.Name  JobTypeSubName
FROM    JobType , 
        ServiceJobPosition  
WHERE   JobType.TypeId=4
UNION ALL--家教
SELECT  JobType.TypeId,JobType.Name JobTypeName,TutorJobPaper.PaperId  PositionId,TutorJobPaper.Name  JobTypeSubName
FROM    JobType , 
        TutorJobPaper
WHERE   JobType.TypeId=5
 

GO
/****** Object:  View [dbo].[view_promoter_daily]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [dbo].[view_promoter_daily]
as

SELECT        DATEADD(d, 0, DATEDIFF(d, 0, r.DateCreated)) AS Date, p.PromoterId, p.UserName AS PromoterName, t.TeamId, t.Name AS TeamName, m.UserId, 
                         ISNULL(u.FullName, '') AS UserName, u.Mobile, CONVERT(nvarchar, u.UserId, 50) AS InvitationCode, m.Leader, COUNT(0) AS Total
FROM            dbo.Promoter AS p INNER JOIN
                         dbo.PromoterTeam AS t ON t.PromoterId = p.PromoterId INNER JOIN
                         dbo.PromoterTeamMember AS m ON m.TeamId = t.TeamId INNER JOIN
                         dbo.[User] AS u ON u.UserId = m.UserId INNER JOIN
                         dbo.PromoterRegistration AS r ON r.PromoterUserId = u.UserId
GROUP BY DATEADD(d, 0, DATEDIFF(d, 0, r.DateCreated)), p.PromoterId, p.UserName, t.TeamId, t.Name, m.UserId, u.FullName, u.Mobile, u.UserId, m.Leader
GO
/****** Object:  View [dbo].[view_promoter_monthly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [dbo].[view_promoter_monthly]
as

SELECT        ISNULL(MONTH(r.DateCreated), 1) AS Month, CONVERT(nVARCHAR(10), DATEADD(dd, - (DAY(r.DateCreated) - 1), r.DateCreated), 120) AS DateFrom, 
                         CONVERT(nVARCHAR(10), DATEADD(dd, - DAY(DATEADD(mm, 1, r.DateCreated)), DATEADD(mm, 1, r.DateCreated)), 120) AS DateTo, p.PromoterId, 
                         p.UserName AS PromoterName, t.TeamId, t.Name AS TeamName, m.UserId, ISNULL(u.FullName, '') AS UserName, u.Mobile, CONVERT(nvarchar, u.UserId, 50) 
                         AS InvitationCode, m.Leader, COUNT(0) AS Total
FROM            dbo.Promoter AS p INNER JOIN
                         dbo.PromoterTeam AS t ON t.PromoterId = p.PromoterId INNER JOIN
                         dbo.PromoterTeamMember AS m ON m.TeamId = t.TeamId INNER JOIN
                         dbo.[User] AS u ON u.UserId = m.UserId INNER JOIN
                         dbo.PromoterRegistration AS r ON r.PromoterUserId = u.UserId
GROUP BY MONTH(r.DateCreated), CONVERT(nVARCHAR(10), DATEADD(dd, - (DAY(r.DateCreated) - 1), r.DateCreated), 120), CONVERT(nVARCHAR(10), DATEADD(dd, 
                         - DAY(DATEADD(mm, 1, r.DateCreated)), DATEADD(mm, 1, r.DateCreated)), 120), p.PromoterId, p.UserName, t.TeamId, t.Name, m.UserId, u.FullName, u.Mobile, 
                         u.UserId, m.Leader
GO
/****** Object:  View [dbo].[view_promoter_total]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [dbo].[view_promoter_total]
as

SELECT        DATEADD(d, 0, DATEDIFF(d, 0, GETDATE())) AS Date, p.PromoterId, p.UserName AS PromoterName, t.TeamId, t.Name AS TeamName, m.UserId, ISNULL(u.FullName, 
                         '') AS UserName, u.Mobile, CONVERT(nvarchar, u.UserId, 50) AS InvitationCode, m.Leader, COUNT(0) AS Total
FROM            dbo.Promoter AS p INNER JOIN
                         dbo.PromoterTeam AS t ON t.PromoterId = p.PromoterId INNER JOIN
                         dbo.PromoterTeamMember AS m ON m.TeamId = t.TeamId INNER JOIN
                         dbo.[User] AS u ON u.UserId = m.UserId INNER JOIN
                         dbo.PromoterRegistration AS r ON r.PromoterUserId = u.UserId
GROUP BY p.PromoterId, p.UserName, t.TeamId, t.Name, m.UserId, ISNULL(u.FullName, ''), u.Mobile, u.UserId, m.Leader

GO
/****** Object:  View [dbo].[view_promoter_weekly]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [dbo].[view_promoter_weekly]
as

SELECT        d.WeekNumber, ISNULL
                             ((SELECT        MIN(Date) AS Expr1
                                 FROM            dbo.Date
                                 WHERE        (Year = d.Year) AND (WeekNumber = d.WeekNumber)), GETDATE()) AS DateFrom, ISNULL
                             ((SELECT        MAX(Date) AS Expr1
                                 FROM            dbo.Date
                                 WHERE        (Year = d.Year) AND (WeekNumber = d.WeekNumber)), GETDATE()) AS DateTo, p.PromoterId, p.UserName AS PromoterName, t.TeamId, 
                         t.Name AS TeamName, m.UserId, ISNULL(u.FullName, '') AS UserName, u.Mobile, CONVERT(nvarchar, u.UserId, 50) AS InvitationCode, m.Leader, COUNT(0) AS Total
FROM            dbo.Promoter AS p INNER JOIN
                         dbo.PromoterTeam AS t ON t.PromoterId = p.PromoterId INNER JOIN
                         dbo.PromoterTeamMember AS m ON m.TeamId = t.TeamId INNER JOIN
                         dbo.[User] AS u ON u.UserId = m.UserId INNER JOIN
                         dbo.PromoterRegistration AS r ON r.PromoterUserId = u.UserId INNER JOIN
                         dbo.Date AS d ON d.Date = DATEADD(d, 0, DATEDIFF(d, 0, r.DateCreated))
GROUP BY d.Year, d.WeekNumber, p.PromoterId, p.UserName, t.TeamId, t.Name, m.UserId, u.FullName, u.Mobile, u.UserId, m.Leader

GO
/****** Object:  View [dbo].[view_report_get_promoter_creator]    Script Date: 2015/4/22 23:50:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[view_report_get_promoter_creator] 
 
as 
 ----------------------------------------------------------总代与总部名下的联盟集--------------------------------------------------------------------------------------
           --总部创建的联盟 取总部名称
 SELECT [dbo].[Promoter].[PromoterId], [dbo].[Promoter].[UserName] PromoterName, [dbo].[Admin].[AdminId] CreatedUserId,[dbo].[Admin].[UserName]+'[总部]'  UserName ,1 CreatedUserType
FROM [dbo].[Promoter] INNER JOIN 
 [dbo].[Admin] ON [dbo].[Admin].AdminId=[dbo].[Promoter].[CreatedByAdminId] 
 WHERE [dbo].[Promoter].[CreatedByAgentUserId] IS NULL   
  UNION ALL --总代理的联盟 取总代名称
SELECT [dbo].[Promoter].[PromoterId], [dbo].[Promoter].[UserName] PromoterName, [dbo].[AgentUser].[UserId] CreatedUserId,[dbo].[AgentUser].[UserName],2 CreatedUserType
FROM [dbo].[Promoter] INNER JOIN 
 [dbo].[AgentUser] ON [dbo].[AgentUser].[UserId]=[dbo].[Promoter].[CreatedByAgentUserId] 
 WHERE [dbo].[Promoter].[CreatedByAdminId] IS NULL     
       AND [dbo].[AgentUser].TypeId=1
 UNION ALL --市、校代理的联盟，取总代名称
 SELECT [dbo].[Promoter].[PromoterId], [dbo].[Promoter].[UserName] PromoterName, AgentUserParent.[UserId] CreatedUserId,AgentUserParent.[UserName],3 CreatedUserType
FROM [dbo].[Promoter] INNER JOIN 
 [dbo].[AgentUser] ON [dbo].[AgentUser].[UserId]=[dbo].[Promoter].[CreatedByAgentUserId] INNER JOIN 
 [dbo].[AgentUser] AgentUserParent ON AgentUserParent.UserId=[dbo].[AgentUser].AdminAgentUserId AND AgentUserParent.TypeId=1
 WHERE [dbo].[Promoter].[CreatedByAdminId] IS NULL    
       AND [dbo].[AgentUser].TypeId>1 
 

GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_IncludeDinner]  DEFAULT ((0)) FOR [IncludeDinner]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_IncludeRoom]  DEFAULT ((0)) FOR [IncludeRoom]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_IncludeCommission]  DEFAULT ((0)) FOR [IncludeCommission]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_Gender]  DEFAULT ((2)) FOR [Gender]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_Deposit]  DEFAULT ((0)) FOR [Deposit]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_ViewTimes]  DEFAULT ((0)) FOR [ViewTimes]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_FakeViewTimes]  DEFAULT ((0)) FOR [FakeViewTimes]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_Shares]  DEFAULT ((0)) FOR [Shares]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_WapViewTimes]  DEFAULT ((0)) FOR [WapViewTimes]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_Recommended]  DEFAULT ((0)) FOR [Recommended]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_Sticky_1]  DEFAULT ((0)) FOR [Sticky]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_Disabled_1]  DEFAULT ((0)) FOR [Disabled]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_Reptile_1]  DEFAULT ((0)) FOR [Reptile]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_MonMorning]  DEFAULT ((0)) FOR [MonMorning]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_MonAfternoon]  DEFAULT ((0)) FOR [MonAfternoon]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_MonNight]  DEFAULT ((0)) FOR [MonNight]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_TueMorning]  DEFAULT ((0)) FOR [TueMorning]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_TueAfternoon]  DEFAULT ((0)) FOR [TueAfternoon]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_TueNight]  DEFAULT ((0)) FOR [TueNight]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_WedMorning]  DEFAULT ((0)) FOR [WedMorning]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_WedAfternoon]  DEFAULT ((0)) FOR [WedAfternoon]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_WedNight]  DEFAULT ((0)) FOR [WedNight]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_ThuMorning]  DEFAULT ((0)) FOR [ThuMorning]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_ThuAfternoon]  DEFAULT ((0)) FOR [ThuAfternoon]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_ThuNight]  DEFAULT ((0)) FOR [ThuNight]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_FriMorning]  DEFAULT ((0)) FOR [FriMorning]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_FriAfternoon]  DEFAULT ((0)) FOR [FriAfternoon]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_FriNight]  DEFAULT ((0)) FOR [FriNight]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_SatMorning]  DEFAULT ((0)) FOR [SatMorning]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_SatAfternoon]  DEFAULT ((0)) FOR [SatAfternoon]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_SatNight]  DEFAULT ((0)) FOR [SatNight]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_SunMorning]  DEFAULT ((0)) FOR [SunMorning]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_SunAfternoon]  DEFAULT ((0)) FOR [SunAfternoon]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_SunNight]  DEFAULT ((0)) FOR [SunNight]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_IgnoreTimeSheet_1]  DEFAULT ((0)) FOR [IgnoreTimeSheet]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ActivityJob] ADD  CONSTRAINT [DF_ActivityJob_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[ActivityJobApply] ADD  CONSTRAINT [DF_ActivityJobApply_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ActivityJobApply] ADD  CONSTRAINT [DF_ActivityJobApply_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[ActivityJobComplain] ADD  CONSTRAINT [DF_ActivityJobComplain_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ActivityJobPosition] ADD  CONSTRAINT [DF_ActivityJobPosition_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Admin] ADD  CONSTRAINT [DF_Admin_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Admin] ADD  CONSTRAINT [DF_Admin_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[AdminLogon] ADD  CONSTRAINT [DF_AdminLogon_DateLogon]  DEFAULT (getdate()) FOR [DateLogon]
GO
ALTER TABLE [dbo].[AdminPermission] ADD  CONSTRAINT [DF_AdminPermission_Denied_1]  DEFAULT ((0)) FOR [Denied]
GO
ALTER TABLE [dbo].[AdminPermission] ADD  CONSTRAINT [DF_AdminPermission_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AdminRole] ADD  CONSTRAINT [DF_AdminRole_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Advertising] ADD  CONSTRAINT [DF_ApiAdvertising_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Advertising] ADD  CONSTRAINT [DF_ApiAdvertising_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[AdvertisingPage] ADD  CONSTRAINT [DF_ApiAdvertisingPage_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AdvertisingPosition] ADD  CONSTRAINT [DF_ApiAdvertisingPosition_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AdvertisingType] ADD  CONSTRAINT [DF_AdvertisingType_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AgentPermission] ADD  CONSTRAINT [DF_AgentPermission_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AgentPermission] ADD  CONSTRAINT [DF_AgentPermission_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[AgentRole] ADD  CONSTRAINT [DF_AgentRole_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AgentRole] ADD  CONSTRAINT [DF_AgentRole_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[AgentRoleAgentPermission] ADD  CONSTRAINT [DF_AgentRolePermission_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AgentUser] ADD  CONSTRAINT [DF_AgentUser_TypeId]  DEFAULT ((0)) FOR [TypeId]
GO
ALTER TABLE [dbo].[AgentUser] ADD  CONSTRAINT [DF_AgentUser_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AgentUser] ADD  CONSTRAINT [DF_AgentUser_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[AgentUserAgentPermission] ADD  CONSTRAINT [DF_AgentUserAgentPermission_Allowed]  DEFAULT ((0)) FOR [Denied]
GO
ALTER TABLE [dbo].[AgentUserAgentPermission] ADD  CONSTRAINT [DF_AgentUserPermission_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AgentUserAgentRole] ADD  CONSTRAINT [DF_AgentUserAgentRole_DateCreatd]  DEFAULT (getdate()) FOR [DateCreatd]
GO
ALTER TABLE [dbo].[AgentUserLogon] ADD  CONSTRAINT [DF_AgentUserLogon_DateLogon]  DEFAULT (getdate()) FOR [DateLogon]
GO
ALTER TABLE [dbo].[AgentUserRegion] ADD  CONSTRAINT [DF_AgentUserRegion_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AgentUserType] ADD  CONSTRAINT [DF_AgentUserType_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AgentUserTypeAgentPermission] ADD  CONSTRAINT [DF_AgentUserTypeAgentPermission_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Application] ADD  CONSTRAINT [DF_Application_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ApplyStatus] ADD  CONSTRAINT [DF_ApplyStatus_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Bank] ADD  CONSTRAINT [DF_Bank_Sequence_1]  DEFAULT ((1)) FOR [Sequence]
GO
ALTER TABLE [dbo].[Bank] ADD  CONSTRAINT [DF_Bank_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_Gender]  DEFAULT ((2)) FOR [Gender]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_ViewTimes]  DEFAULT ((0)) FOR [ViewTimes]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_FakeViewTimes]  DEFAULT ((0)) FOR [FakeViewTimes]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_Shares]  DEFAULT ((0)) FOR [Shares]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_WapViewTimes]  DEFAULT ((0)) FOR [WapViewTimes]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_Recommended]  DEFAULT ((0)) FOR [Recommended]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_Sticky_1]  DEFAULT ((0)) FOR [Sticky]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_Disabled_1]  DEFAULT ((0)) FOR [Disabled]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_Reptile_1]  DEFAULT ((0)) FOR [Reptile]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_MonMorning]  DEFAULT ((0)) FOR [MonMorning]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_MonAfternoon]  DEFAULT ((0)) FOR [MonAfternoon]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_MonNight]  DEFAULT ((0)) FOR [MonNight]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_TueMorning]  DEFAULT ((0)) FOR [TueMorning]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_TueAfternoon]  DEFAULT ((0)) FOR [TueAfternoon]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_TueNight]  DEFAULT ((0)) FOR [TueNight]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_WedMorning]  DEFAULT ((0)) FOR [WedMorning]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_WedAfternoon]  DEFAULT ((0)) FOR [WedAfternoon]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_WedNight]  DEFAULT ((0)) FOR [WedNight]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_ThuMorning]  DEFAULT ((0)) FOR [ThuMorning]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_ThuAfternoon]  DEFAULT ((0)) FOR [ThuAfternoon]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_ThuNight]  DEFAULT ((0)) FOR [ThuNight]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_FriMorning]  DEFAULT ((0)) FOR [FriMorning]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_FriAfternoon]  DEFAULT ((0)) FOR [FriAfternoon]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_FriNight]  DEFAULT ((0)) FOR [FriNight]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_SatMorning]  DEFAULT ((0)) FOR [SatMorning]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_SatAfternoon]  DEFAULT ((0)) FOR [SatAfternoon]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_SatNight]  DEFAULT ((0)) FOR [SatNight]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_SunMorning]  DEFAULT ((0)) FOR [SunMorning]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_SunAfternoon]  DEFAULT ((0)) FOR [SunAfternoon]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_SunNight]  DEFAULT ((0)) FOR [SunNight]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_IgnoreTimeSheet_1]  DEFAULT ((0)) FOR [IgnoreTimeSheet]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CampusJob] ADD  CONSTRAINT [DF_CampusJob_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[CampusJobApply] ADD  CONSTRAINT [DF_CampusJobApply_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CampusJobApply] ADD  CONSTRAINT [DF_CampusJobApply_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[CampusJobCategory] ADD  CONSTRAINT [DF_CampusJobCategory_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CampusJobComplain] ADD  CONSTRAINT [DF_CampusJobComplain_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CashOutStatus] ADD  CONSTRAINT [DF_CashOutStatus_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Company] ADD  CONSTRAINT [DF_Company_Status]  DEFAULT ((1)) FOR [Status]
GO
ALTER TABLE [dbo].[Company] ADD  CONSTRAINT [DF_Company_Verified]  DEFAULT ((0)) FOR [Verified]
GO
ALTER TABLE [dbo].[Company] ADD  CONSTRAINT [DF_Company_Balance]  DEFAULT ((0)) FOR [Balance]
GO
ALTER TABLE [dbo].[Company] ADD  CONSTRAINT [DF_Company_VoiceAlert]  DEFAULT ((1)) FOR [VoiceAlert]
GO
ALTER TABLE [dbo].[Company] ADD  CONSTRAINT [DF_Company_Vibrate]  DEFAULT ((1)) FOR [Vibrate]
GO
ALTER TABLE [dbo].[Company] ADD  CONSTRAINT [DF_Company_IsLogin]  DEFAULT ((1)) FOR [IsLogin]
GO
ALTER TABLE [dbo].[Company] ADD  CONSTRAINT [DF_Company_NotificationCount]  DEFAULT ((0)) FOR [NotificationCount]
GO
ALTER TABLE [dbo].[Company] ADD  CONSTRAINT [DF_Company_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Company] ADD  CONSTRAINT [DF_Company_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[CompanyCashFlow] ADD  CONSTRAINT [DF_CompanyCashFlow_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CompanyCashFlowType] ADD  CONSTRAINT [DF_CompanyCashFlowType_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CompanyCashIn] ADD  CONSTRAINT [DF_CompanyTopUp_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CompanyLogon] ADD  CONSTRAINT [DF_CompanyLogon_DateLogon]  DEFAULT (getdate()) FOR [DateLogon]
GO
ALTER TABLE [dbo].[ComplainStatus] ADD  CONSTRAINT [DF_ComplainStatus_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Date] ADD  CONSTRAINT [DF_Date_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[DeviceVersion] ADD  CONSTRAINT [DF_DeviceVersion_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[DownloadFromApplication] ADD  CONSTRAINT [DF_DownloadFromApplication_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Email] ADD  CONSTRAINT [DF_Email_Sent]  DEFAULT ((0)) FOR [Sent]
GO
ALTER TABLE [dbo].[Email] ADD  CONSTRAINT [DF_Email_Failed]  DEFAULT ((0)) FOR [Failed]
GO
ALTER TABLE [dbo].[Email] ADD  CONSTRAINT [DF_Email_FailedTimes]  DEFAULT ((0)) FOR [FailedTimes]
GO
ALTER TABLE [dbo].[Email] ADD  CONSTRAINT [DF_Email_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Email] ADD  CONSTRAINT [DF_Email_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[EntityUpdate] ADD  CONSTRAINT [DF_EntityUpdate_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Event] ADD  CONSTRAINT [DF_Setting_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[EventLog] ADD  CONSTRAINT [DF_EventLog_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ExcelData] ADD  CONSTRAINT [DF_ExcelData_Imported]  DEFAULT ((0)) FOR [Imported]
GO
ALTER TABLE [dbo].[Feedback] ADD  CONSTRAINT [DF_Feedback_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[FilterActivityJob] ADD  CONSTRAINT [DF_FilterActivityJob_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[FilterCampusJob] ADD  CONSTRAINT [DF_FilterCampusJob_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[FilterGender] ADD  CONSTRAINT [DF_FilterGender_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[FilterInternJob] ADD  CONSTRAINT [DF_FilterInternJob_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[FilterRegion] ADD  CONSTRAINT [DF_FilterRegion_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[FilterServiceJob] ADD  CONSTRAINT [DF_FilterServiceJob_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[FilterTutorJob] ADD  CONSTRAINT [DF_FitlerTutorJob_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_MonMorning]  DEFAULT ((0)) FOR [MonMorning]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_MonAfternoon]  DEFAULT ((0)) FOR [MonAfternoon]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_MonNight]  DEFAULT ((0)) FOR [MonNight]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_TueMorning]  DEFAULT ((0)) FOR [TueMorning]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_TueAfternoon]  DEFAULT ((0)) FOR [TueAfternoon]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_TueNight]  DEFAULT ((0)) FOR [TueNight]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_WedMorning]  DEFAULT ((0)) FOR [WedMorning]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_WedAfternoon]  DEFAULT ((0)) FOR [WedAfternoon]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_WedNight]  DEFAULT ((0)) FOR [WedNight]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_ThuMorning]  DEFAULT ((0)) FOR [ThuMorning]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_ThuAfternoon]  DEFAULT ((0)) FOR [ThuAfternoon]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_ThuNight]  DEFAULT ((0)) FOR [ThuNight]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_FriMorning]  DEFAULT ((0)) FOR [FriMorning]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_FriAfternoon]  DEFAULT ((0)) FOR [FriAfternoon]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_FriNight]  DEFAULT ((0)) FOR [FriNight]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_SatMorning]  DEFAULT ((0)) FOR [SatMorning]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_SatAfternoon]  DEFAULT ((0)) FOR [SatAfternoon]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_SatNight]  DEFAULT ((0)) FOR [SatNight]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_SunMorning]  DEFAULT ((0)) FOR [SunMorning]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_SunAfternoon]  DEFAULT ((0)) FOR [SunAfternoon]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_SunNight]  DEFAULT ((0)) FOR [SunNight]
GO
ALTER TABLE [dbo].[FilterWorkTime] ADD  CONSTRAINT [DF_FilterWorkTime_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_IncludeDinner]  DEFAULT ((0)) FOR [IncludeDinner]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_IncludeRoom]  DEFAULT ((0)) FOR [IncludeRoom]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_IncludeCommission]  DEFAULT ((0)) FOR [IncludeCommission]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_Gender]  DEFAULT ((2)) FOR [Gender]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_Deposit]  DEFAULT ((0)) FOR [Deposit]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_ViewTimes]  DEFAULT ((0)) FOR [ViewTimes]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_FakeViewTimes]  DEFAULT ((0)) FOR [FakeViewTimes]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_Shares]  DEFAULT ((0)) FOR [Shares]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_WapViewTimes]  DEFAULT ((0)) FOR [WapViewTimes]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_Recommended]  DEFAULT ((0)) FOR [Recommended]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_Sticky_1]  DEFAULT ((0)) FOR [Sticky]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_Disabled_1]  DEFAULT ((0)) FOR [Disabled]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_Reptile_1]  DEFAULT ((0)) FOR [Reptile]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_MonMorning]  DEFAULT ((0)) FOR [MonMorning]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_MonAfternoon]  DEFAULT ((0)) FOR [MonAfternoon]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_MonNight]  DEFAULT ((0)) FOR [MonNight]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_TueMorning]  DEFAULT ((0)) FOR [TueMorning]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_TueAfternoon]  DEFAULT ((0)) FOR [TueAfternoon]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_TueNight]  DEFAULT ((0)) FOR [TueNight]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_WedMorning]  DEFAULT ((0)) FOR [WedMorning]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_WedAfternoon]  DEFAULT ((0)) FOR [WedAfternoon]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_WedNight]  DEFAULT ((0)) FOR [WedNight]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_ThuMorning]  DEFAULT ((0)) FOR [ThuMorning]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_ThuAfternoon]  DEFAULT ((0)) FOR [ThuAfternoon]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_ThuNight]  DEFAULT ((0)) FOR [ThuNight]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_FriMorning]  DEFAULT ((0)) FOR [FriMorning]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_FriAfternoon]  DEFAULT ((0)) FOR [FriAfternoon]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_FriNight]  DEFAULT ((0)) FOR [FriNight]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_SatMorning]  DEFAULT ((0)) FOR [SatMorning]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_SatAfternoon]  DEFAULT ((0)) FOR [SatAfternoon]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_SatNight]  DEFAULT ((0)) FOR [SatNight]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_SunMorning]  DEFAULT ((0)) FOR [SunMorning]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_SunAfternoon]  DEFAULT ((0)) FOR [SunAfternoon]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_SunNight]  DEFAULT ((0)) FOR [SunNight]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_IgnoreTimeSheet_1]  DEFAULT ((0)) FOR [IgnoreTimeSheet]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[InternJob] ADD  CONSTRAINT [DF_InternJob_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[InternJobApply] ADD  CONSTRAINT [DF_InterJobApply_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[InternJobApply] ADD  CONSTRAINT [DF_InterJobApply_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[InternJobCategory] ADD  CONSTRAINT [DF_InternJobCategory_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[InternJobComplain] ADD  CONSTRAINT [DF_InternJobComplain_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[JobAllocateType] ADD  CONSTRAINT [DF_JobAllocateType_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[JobAllocateTypeGroup] ADD  CONSTRAINT [DF_JobAllocateTypeGroup_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[JobApplyAbsentComplain] ADD  CONSTRAINT [DF_JobApplyAbsenceReason_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[JobApplyEndReason] ADD  CONSTRAINT [DF_JobApplyEndReason_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[JobApplySignIn] ADD  CONSTRAINT [DF_SignIn_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[JobStatus] ADD  CONSTRAINT [DF_JobStatus_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[JobType] ADD  CONSTRAINT [DF_JobType_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Marketer] ADD  CONSTRAINT [DF_Marketer_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[MarketerRegister] ADD  CONSTRAINT [DF_MarketerRegister_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Message] ADD  CONSTRAINT [DF_Message_SendingId]  DEFAULT ((0)) FOR [SendingId]
GO
ALTER TABLE [dbo].[Message] ADD  CONSTRAINT [DF_Table_1_IsCompany]  DEFAULT ((0)) FOR [JobId]
GO
ALTER TABLE [dbo].[Message] ADD  CONSTRAINT [DF_Message_JobTypeId]  DEFAULT ((0)) FOR [JobTypeId]
GO
ALTER TABLE [dbo].[Message] ADD  CONSTRAINT [DF_Message_Read]  DEFAULT ((0)) FOR [Read]
GO
ALTER TABLE [dbo].[Message] ADD  CONSTRAINT [DF_Message_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[MessageType] ADD  CONSTRAINT [DF_MessageType_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[NoticeBoard] ADD  CONSTRAINT [DF_NoticeBoard_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[NoticeBoard] ADD  CONSTRAINT [DF_NoticeBoard_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[Notification] ADD  CONSTRAINT [DF_Notification_VoiceAlert]  DEFAULT ((1)) FOR [VoiceAlert]
GO
ALTER TABLE [dbo].[Notification] ADD  CONSTRAINT [DF_Notification_Vibrate]  DEFAULT ((1)) FOR [Vibrate]
GO
ALTER TABLE [dbo].[Notification] ADD  CONSTRAINT [DF_Notification_NotificationCount]  DEFAULT ((1)) FOR [NotificationCount]
GO
ALTER TABLE [dbo].[Notification] ADD  CONSTRAINT [DF_Notification_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Order] ADD  CONSTRAINT [DF_Order_Amount]  DEFAULT ((0)) FOR [Amount]
GO
ALTER TABLE [dbo].[Order] ADD  CONSTRAINT [DF_Order_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Order] ADD  CONSTRAINT [DF_Order_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[OrderBy] ADD  CONSTRAINT [DF_OrderBy_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[OrderLine] ADD  CONSTRAINT [DF_OrderLine_Amount]  DEFAULT ((0)) FOR [Amount]
GO
ALTER TABLE [dbo].[OrderLine] ADD  CONSTRAINT [DF_OrderLine_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[OrderLine] ADD  CONSTRAINT [DF_OrderLine_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[PaymentNotify] ADD  CONSTRAINT [DF_PaymentNotify_date_created]  DEFAULT (getdate()) FOR [date_created]
GO
ALTER TABLE [dbo].[Permission] ADD  CONSTRAINT [DF_PermissionId_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Permission] ADD  CONSTRAINT [DF_PermissionId_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[Promoter] ADD  CONSTRAINT [DF_Promoter_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Promoter] ADD  CONSTRAINT [DF_Promoter_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[PromoterLogon] ADD  CONSTRAINT [DF_PromoterLogon_DateLogon]  DEFAULT (getdate()) FOR [DateLogon]
GO
ALTER TABLE [dbo].[PromoterRegistration] ADD  CONSTRAINT [DF_PromoterRegistration_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[PromoterTeam] ADD  CONSTRAINT [DF_PromoterTeam_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[PromoterTeamMember] ADD  CONSTRAINT [DF_PromoterTeamMember_Leader]  DEFAULT ((0)) FOR [Leader]
GO
ALTER TABLE [dbo].[PromoterTeamMember] ADD  CONSTRAINT [DF_PromoterTeamMember_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Province] ADD  CONSTRAINT [DF_Province_Sequence]  DEFAULT ((1)) FOR [Sequence]
GO
ALTER TABLE [dbo].[Province] ADD  CONSTRAINT [DF_Province_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Region] ADD  CONSTRAINT [DF_Region_ImportReptile_1]  DEFAULT ((0)) FOR [ImportReptile]
GO
ALTER TABLE [dbo].[Region] ADD  CONSTRAINT [DF_Region_RequireVerify]  DEFAULT ((0)) FOR [RequireVerify]
GO
ALTER TABLE [dbo].[Region] ADD  CONSTRAINT [DF_Region_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Region] ADD  CONSTRAINT [DF_Region_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[Register] ADD  CONSTRAINT [DF_Register_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Register] ADD  CONSTRAINT [DF_Register_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[RegisterBank] ADD  CONSTRAINT [DF_RegisterBank_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[RegisterBank] ADD  CONSTRAINT [DF_RegisterBank_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[ResetPassword] ADD  CONSTRAINT [DF_ResetPassword_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ResetPassword] ADD  CONSTRAINT [DF_ResetPassword_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[Role] ADD  CONSTRAINT [DF_Role_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Role] ADD  CONSTRAINT [DF_Role_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[RolePermission] ADD  CONSTRAINT [DF_RolePermission_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[School] ADD  CONSTRAINT [DF_School_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_IncludeDinner]  DEFAULT ((0)) FOR [IncludeDinner]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_IncludeRoom]  DEFAULT ((0)) FOR [IncludeRoom]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_IncludeCommission]  DEFAULT ((0)) FOR [IncludeCommission]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_Gender]  DEFAULT ((2)) FOR [Gender]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_Deposit]  DEFAULT ((0)) FOR [Deposit]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_ViewTimes]  DEFAULT ((0)) FOR [ViewTimes]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_FakeViewTimes]  DEFAULT ((0)) FOR [FakeViewTimes]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_Shares]  DEFAULT ((0)) FOR [Shares]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_WapViewTimes]  DEFAULT ((0)) FOR [WapViewTimes]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_Recommended]  DEFAULT ((0)) FOR [Recommended]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_Sticky_1]  DEFAULT ((0)) FOR [Sticky]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_Disabled_1]  DEFAULT ((0)) FOR [Disabled]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_Reptile_1]  DEFAULT ((0)) FOR [Reptile]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_MonMorning]  DEFAULT ((0)) FOR [MonMorning]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_MonAfternoon]  DEFAULT ((0)) FOR [MonAfternoon]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_MonNight]  DEFAULT ((0)) FOR [MonNight]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_TueMorning]  DEFAULT ((0)) FOR [TueMorning]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_TueAfternoon]  DEFAULT ((0)) FOR [TueAfternoon]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_TueNight]  DEFAULT ((0)) FOR [TueNight]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_WedMorning]  DEFAULT ((0)) FOR [WedMorning]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_WedAfternoon]  DEFAULT ((0)) FOR [WedAfternoon]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_WedNight]  DEFAULT ((0)) FOR [WedNight]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_ThuMorning]  DEFAULT ((0)) FOR [ThuMorning]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_ThuAfternoon]  DEFAULT ((0)) FOR [ThuAfternoon]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_ThuNight]  DEFAULT ((0)) FOR [ThuNight]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_FriMorning]  DEFAULT ((0)) FOR [FriMorning]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_FriAfternoon]  DEFAULT ((0)) FOR [FriAfternoon]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_FriNight]  DEFAULT ((0)) FOR [FriNight]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_SatMorning]  DEFAULT ((0)) FOR [SatMorning]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_SatAfternoon]  DEFAULT ((0)) FOR [SatAfternoon]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_SatNight]  DEFAULT ((0)) FOR [SatNight]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_SunMorning]  DEFAULT ((0)) FOR [SunMorning]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_SunAfternoon]  DEFAULT ((0)) FOR [SunAfternoon]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_SunNight]  DEFAULT ((0)) FOR [SunNight]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_IgnoreTimeSheet_1]  DEFAULT ((0)) FOR [IgnoreTimeSheet]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ServiceJob] ADD  CONSTRAINT [DF_ServiceJob_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[ServiceJobApply] ADD  CONSTRAINT [DF_ServiceJobApply_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ServiceJobApply] ADD  CONSTRAINT [DF_ServiceJobApply_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[ServiceJobCategory] ADD  CONSTRAINT [DF_ServiceJobCategory_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ServiceJobComplain] ADD  CONSTRAINT [DF_ServiceJobComplain_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ServiceJobPosition] ADD  CONSTRAINT [DF_ServiceJobPosition_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[SystemMessage] ADD  CONSTRAINT [DF_SystemMessage_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Term] ADD  CONSTRAINT [DF_Term_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Trade] ADD  CONSTRAINT [DF_Trade_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_Tutor_IncludeDinner]  DEFAULT ((0)) FOR [IncludeDinner]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_Tutor_IncludeRoom]  DEFAULT ((0)) FOR [IncludeRoom]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_IncludeCommission]  DEFAULT ((0)) FOR [IncludeCommission]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_Tutor_Gender]  DEFAULT ((2)) FOR [Gender]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_Table_1_Prepay]  DEFAULT ((0)) FOR [Deposit]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_Tutor_ViewTimes]  DEFAULT ((0)) FOR [ViewTimes]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_FakeViewTimes]  DEFAULT ((0)) FOR [FakeViewTimes]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_Shares]  DEFAULT ((0)) FOR [Shares]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_WapViewTimes]  DEFAULT ((0)) FOR [WapViewTimes]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_Recommended]  DEFAULT ((0)) FOR [Recommended]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_Sticky_1]  DEFAULT ((0)) FOR [Sticky]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_Disabled_1]  DEFAULT ((0)) FOR [Disabled]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_Reptile_1]  DEFAULT ((0)) FOR [Reptile]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_MonMorning]  DEFAULT ((0)) FOR [MonMorning]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_MonAfternoon]  DEFAULT ((0)) FOR [MonAfternoon]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_MonNight]  DEFAULT ((0)) FOR [MonNight]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_TueMorning]  DEFAULT ((0)) FOR [TueMorning]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_TueAfternoon]  DEFAULT ((0)) FOR [TueAfternoon]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_TueNight]  DEFAULT ((0)) FOR [TueNight]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_WedMorning]  DEFAULT ((0)) FOR [WedMorning]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_WedAfternoon]  DEFAULT ((0)) FOR [WedAfternoon]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_WedNight]  DEFAULT ((0)) FOR [WedNight]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_ThuMorning]  DEFAULT ((0)) FOR [ThuMorning]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_ThuAfternoon]  DEFAULT ((0)) FOR [ThuAfternoon]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_ThuNight]  DEFAULT ((0)) FOR [ThuNight]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_FriMorning]  DEFAULT ((0)) FOR [FriMorning]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_FriAfternoon]  DEFAULT ((0)) FOR [FriAfternoon]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_FriNight]  DEFAULT ((0)) FOR [FriNight]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_SatMorning]  DEFAULT ((0)) FOR [SatMorning]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_SatAfternoon]  DEFAULT ((0)) FOR [SatAfternoon]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_SatNight]  DEFAULT ((0)) FOR [SatNight]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_SunMorning]  DEFAULT ((0)) FOR [SunMorning]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_SunAfternoon]  DEFAULT ((0)) FOR [SunAfternoon]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_SunNight]  DEFAULT ((0)) FOR [SunNight]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_TutorJob_IgnoreTimeSheet_1]  DEFAULT ((0)) FOR [IgnoreTimeSheet]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_Tutor_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[TutorJob] ADD  CONSTRAINT [DF_Tutor_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[TutorJobApply] ADD  CONSTRAINT [DF_TutorJobApply_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[TutorJobApply] ADD  CONSTRAINT [DF_TutorJobApply_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[TutorJobComplain] ADD  CONSTRAINT [DF_TutorJobComplain_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[TutorJobLevel] ADD  CONSTRAINT [DF_SchoolLevel_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[TutorJobPaper] ADD  CONSTRAINT [DF_Paper_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[User] ADD  CONSTRAINT [DF_User_Deposite]  DEFAULT ((0)) FOR [Balance]
GO
ALTER TABLE [dbo].[User] ADD  CONSTRAINT [DF_User_FrozenBalance]  DEFAULT ((0)) FOR [FrozenBalance]
GO
ALTER TABLE [dbo].[User] ADD  CONSTRAINT [DF_User_VoiceAlert]  DEFAULT ((1)) FOR [VoiceAlert]
GO
ALTER TABLE [dbo].[User] ADD  CONSTRAINT [DF_User_Vibrate]  DEFAULT ((1)) FOR [Vibrate]
GO
ALTER TABLE [dbo].[User] ADD  CONSTRAINT [DF_User_IsLogin]  DEFAULT ((1)) FOR [IsLogin]
GO
ALTER TABLE [dbo].[User] ADD  CONSTRAINT [DF_User_Manual]  DEFAULT ((0)) FOR [Manual]
GO
ALTER TABLE [dbo].[User] ADD  CONSTRAINT [DF_User_NotificationCount]  DEFAULT ((0)) FOR [NotificationCount]
GO
ALTER TABLE [dbo].[User] ADD  CONSTRAINT [DF_User_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[User] ADD  CONSTRAINT [DF_User_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[UserAccount] ADD  CONSTRAINT [DF_UserBank_Default]  DEFAULT ((0)) FOR [Default]
GO
ALTER TABLE [dbo].[UserAccount] ADD  CONSTRAINT [DF_UserBank_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[UserCashIn] ADD  CONSTRAINT [DF_UserCashIn_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[UserCashOut] ADD  CONSTRAINT [DF_UserCashOut_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[UserCashOut] ADD  CONSTRAINT [DF_UserCashOut_DateModified]  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [dbo].[UserFavoriteJob] ADD  CONSTRAINT [DF_UserFavoriteJob_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[UserLogon] ADD  CONSTRAINT [DF_UserLogon_DateLogon]  DEFAULT (getdate()) FOR [DateLogon]
GO
ALTER TABLE [dbo].[WageUnit] ADD  CONSTRAINT [DF_WageUnit_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[WebCompanyLogon] ADD  CONSTRAINT [DF_WebCompanyLogon_DateLogon]  DEFAULT (getdate()) FOR [DateLogon]
GO
ALTER TABLE [dbo].[WebUserLogon] ADD  CONSTRAINT [DF_WebUserLogon_DateLogon]  DEFAULT (getdate()) FOR [DateLogon]
GO
ALTER TABLE [dbo].[ActivityJob]  WITH CHECK ADD  CONSTRAINT [FK_ActivityJob_ActivityJobPosition] FOREIGN KEY([PositionId])
REFERENCES [dbo].[ActivityJobPosition] ([PositionId])
GO
ALTER TABLE [dbo].[ActivityJob] CHECK CONSTRAINT [FK_ActivityJob_ActivityJobPosition]
GO
ALTER TABLE [dbo].[ActivityJob]  WITH CHECK ADD  CONSTRAINT [FK_ActivityJob_Company] FOREIGN KEY([CompanyId])
REFERENCES [dbo].[Company] ([CompanyId])
GO
ALTER TABLE [dbo].[ActivityJob] CHECK CONSTRAINT [FK_ActivityJob_Company]
GO
ALTER TABLE [dbo].[ActivityJob]  WITH CHECK ADD  CONSTRAINT [FK_ActivityJob_JobStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[JobStatus] ([StatusId])
GO
ALTER TABLE [dbo].[ActivityJob] CHECK CONSTRAINT [FK_ActivityJob_JobStatus]
GO
ALTER TABLE [dbo].[ActivityJob]  WITH CHECK ADD  CONSTRAINT [FK_ActivityJob_JobType] FOREIGN KEY([JobTypeId])
REFERENCES [dbo].[JobType] ([TypeId])
GO
ALTER TABLE [dbo].[ActivityJob] CHECK CONSTRAINT [FK_ActivityJob_JobType]
GO
ALTER TABLE [dbo].[ActivityJob]  WITH CHECK ADD  CONSTRAINT [FK_ActivityJob_Region] FOREIGN KEY([RegionId])
REFERENCES [dbo].[Region] ([RegionId])
GO
ALTER TABLE [dbo].[ActivityJob] CHECK CONSTRAINT [FK_ActivityJob_Region]
GO
ALTER TABLE [dbo].[ActivityJob]  WITH CHECK ADD  CONSTRAINT [FK_ActivityJob_Term] FOREIGN KEY([TermId])
REFERENCES [dbo].[Term] ([TermId])
GO
ALTER TABLE [dbo].[ActivityJob] CHECK CONSTRAINT [FK_ActivityJob_Term]
GO
ALTER TABLE [dbo].[ActivityJob]  WITH CHECK ADD  CONSTRAINT [FK_ActivityJob_WageUnit] FOREIGN KEY([WageUnitId])
REFERENCES [dbo].[WageUnit] ([UnitId])
GO
ALTER TABLE [dbo].[ActivityJob] CHECK CONSTRAINT [FK_ActivityJob_WageUnit]
GO
ALTER TABLE [dbo].[ActivityJobApply]  WITH CHECK ADD  CONSTRAINT [FK_ActivityJobApply_ActivityJob] FOREIGN KEY([JobId])
REFERENCES [dbo].[ActivityJob] ([JobId])
GO
ALTER TABLE [dbo].[ActivityJobApply] CHECK CONSTRAINT [FK_ActivityJobApply_ActivityJob]
GO
ALTER TABLE [dbo].[ActivityJobApply]  WITH CHECK ADD  CONSTRAINT [FK_ActivityJobApply_JobStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[ApplyStatus] ([StatusId])
GO
ALTER TABLE [dbo].[ActivityJobApply] CHECK CONSTRAINT [FK_ActivityJobApply_JobStatus]
GO
ALTER TABLE [dbo].[ActivityJobApply]  WITH CHECK ADD  CONSTRAINT [FK_ActivityJobApply_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[ActivityJobApply] CHECK CONSTRAINT [FK_ActivityJobApply_User]
GO
ALTER TABLE [dbo].[ActivityJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_ActivityJobComplain_ActivityJob] FOREIGN KEY([JobId])
REFERENCES [dbo].[ActivityJob] ([JobId])
GO
ALTER TABLE [dbo].[ActivityJobComplain] CHECK CONSTRAINT [FK_ActivityJobComplain_ActivityJob]
GO
ALTER TABLE [dbo].[ActivityJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_ActivityJobComplain_ComplainStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[ComplainStatus] ([StatusId])
GO
ALTER TABLE [dbo].[ActivityJobComplain] CHECK CONSTRAINT [FK_ActivityJobComplain_ComplainStatus]
GO
ALTER TABLE [dbo].[ActivityJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_ActivityJobComplain_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[ActivityJobComplain] CHECK CONSTRAINT [FK_ActivityJobComplain_User]
GO
ALTER TABLE [dbo].[AdminLogon]  WITH CHECK ADD  CONSTRAINT [FK_AdminLogon_Admin] FOREIGN KEY([AdminId])
REFERENCES [dbo].[Admin] ([AdminId])
GO
ALTER TABLE [dbo].[AdminLogon] CHECK CONSTRAINT [FK_AdminLogon_Admin]
GO
ALTER TABLE [dbo].[AdminPermission]  WITH CHECK ADD  CONSTRAINT [FK_AdminPermission_Admin] FOREIGN KEY([AdminId])
REFERENCES [dbo].[Admin] ([AdminId])
GO
ALTER TABLE [dbo].[AdminPermission] CHECK CONSTRAINT [FK_AdminPermission_Admin]
GO
ALTER TABLE [dbo].[AdminPermission]  WITH CHECK ADD  CONSTRAINT [FK_AdminPermission_PermissionId] FOREIGN KEY([PermissionId])
REFERENCES [dbo].[Permission] ([PermissionId])
GO
ALTER TABLE [dbo].[AdminPermission] CHECK CONSTRAINT [FK_AdminPermission_PermissionId]
GO
ALTER TABLE [dbo].[AdminRole]  WITH CHECK ADD  CONSTRAINT [FK_AdminRole_Admin] FOREIGN KEY([AdminId])
REFERENCES [dbo].[Admin] ([AdminId])
GO
ALTER TABLE [dbo].[AdminRole] CHECK CONSTRAINT [FK_AdminRole_Admin]
GO
ALTER TABLE [dbo].[AdminRole]  WITH CHECK ADD  CONSTRAINT [FK_AdminRole_Role] FOREIGN KEY([RoleId])
REFERENCES [dbo].[Role] ([RoleId])
GO
ALTER TABLE [dbo].[AdminRole] CHECK CONSTRAINT [FK_AdminRole_Role]
GO
ALTER TABLE [dbo].[Advertising]  WITH CHECK ADD  CONSTRAINT [FK_ApiAdvertising_ApiAdvertisingPosition] FOREIGN KEY([PositionId])
REFERENCES [dbo].[AdvertisingPosition] ([PositionId])
GO
ALTER TABLE [dbo].[Advertising] CHECK CONSTRAINT [FK_ApiAdvertising_ApiAdvertisingPosition]
GO
ALTER TABLE [dbo].[AdvertisingPage]  WITH CHECK ADD  CONSTRAINT [FK_AdvertisingPage_Application] FOREIGN KEY([ApplicationId])
REFERENCES [dbo].[Application] ([ApplicationId])
GO
ALTER TABLE [dbo].[AdvertisingPage] CHECK CONSTRAINT [FK_AdvertisingPage_Application]
GO
ALTER TABLE [dbo].[AdvertisingPosition]  WITH CHECK ADD  CONSTRAINT [FK_ApiAdvertisingPosition_ApiAdvertisingPage] FOREIGN KEY([PageId])
REFERENCES [dbo].[AdvertisingPage] ([PageId])
GO
ALTER TABLE [dbo].[AdvertisingPosition] CHECK CONSTRAINT [FK_ApiAdvertisingPosition_ApiAdvertisingPage]
GO
ALTER TABLE [dbo].[AgentRoleAgentPermission]  WITH CHECK ADD  CONSTRAINT [FK_AgentRoleAgentPermission_AgentPermission] FOREIGN KEY([PermissionId])
REFERENCES [dbo].[AgentPermission] ([PermissionId])
GO
ALTER TABLE [dbo].[AgentRoleAgentPermission] CHECK CONSTRAINT [FK_AgentRoleAgentPermission_AgentPermission]
GO
ALTER TABLE [dbo].[AgentRoleAgentPermission]  WITH CHECK ADD  CONSTRAINT [FK_AgentRolePermission_AgentRole] FOREIGN KEY([RoleId])
REFERENCES [dbo].[AgentRole] ([RoleId])
GO
ALTER TABLE [dbo].[AgentRoleAgentPermission] CHECK CONSTRAINT [FK_AgentRolePermission_AgentRole]
GO
ALTER TABLE [dbo].[AgentUser]  WITH CHECK ADD  CONSTRAINT [FK_AgentUser_AgentUserType] FOREIGN KEY([TypeId])
REFERENCES [dbo].[AgentUserType] ([TypeId])
GO
ALTER TABLE [dbo].[AgentUser] CHECK CONSTRAINT [FK_AgentUser_AgentUserType]
GO
ALTER TABLE [dbo].[AgentUser]  WITH CHECK ADD  CONSTRAINT [FK_AgentUser_Promoter] FOREIGN KEY([PromoterId])
REFERENCES [dbo].[Promoter] ([PromoterId])
GO
ALTER TABLE [dbo].[AgentUser] CHECK CONSTRAINT [FK_AgentUser_Promoter]
GO
ALTER TABLE [dbo].[AgentUserAgentPermission]  WITH CHECK ADD  CONSTRAINT [FK_AgentUserAgentPermission_AgentPermission] FOREIGN KEY([PermissionId])
REFERENCES [dbo].[AgentPermission] ([PermissionId])
GO
ALTER TABLE [dbo].[AgentUserAgentPermission] CHECK CONSTRAINT [FK_AgentUserAgentPermission_AgentPermission]
GO
ALTER TABLE [dbo].[AgentUserAgentPermission]  WITH CHECK ADD  CONSTRAINT [FK_AgentUserPermission_AgentUser] FOREIGN KEY([UserId])
REFERENCES [dbo].[AgentUser] ([UserId])
GO
ALTER TABLE [dbo].[AgentUserAgentPermission] CHECK CONSTRAINT [FK_AgentUserPermission_AgentUser]
GO
ALTER TABLE [dbo].[AgentUserAgentRole]  WITH CHECK ADD  CONSTRAINT [FK_AgentUserAgentRole_AgentRole] FOREIGN KEY([RoleId])
REFERENCES [dbo].[AgentRole] ([RoleId])
GO
ALTER TABLE [dbo].[AgentUserAgentRole] CHECK CONSTRAINT [FK_AgentUserAgentRole_AgentRole]
GO
ALTER TABLE [dbo].[AgentUserAgentRole]  WITH CHECK ADD  CONSTRAINT [FK_AgentUserAgentRole_AgentUser] FOREIGN KEY([UserId])
REFERENCES [dbo].[AgentUser] ([UserId])
GO
ALTER TABLE [dbo].[AgentUserAgentRole] CHECK CONSTRAINT [FK_AgentUserAgentRole_AgentUser]
GO
ALTER TABLE [dbo].[AgentUserLogon]  WITH CHECK ADD  CONSTRAINT [FK_AgentUserLogon_AgentUser] FOREIGN KEY([UserId])
REFERENCES [dbo].[AgentUser] ([UserId])
GO
ALTER TABLE [dbo].[AgentUserLogon] CHECK CONSTRAINT [FK_AgentUserLogon_AgentUser]
GO
ALTER TABLE [dbo].[AgentUserRegion]  WITH CHECK ADD  CONSTRAINT [FK_AgentUserRegion_AgentUser] FOREIGN KEY([UserId])
REFERENCES [dbo].[AgentUser] ([UserId])
GO
ALTER TABLE [dbo].[AgentUserRegion] CHECK CONSTRAINT [FK_AgentUserRegion_AgentUser]
GO
ALTER TABLE [dbo].[AgentUserRegion]  WITH CHECK ADD  CONSTRAINT [FK_AgentUserRegion_Region] FOREIGN KEY([RegionId])
REFERENCES [dbo].[Region] ([RegionId])
GO
ALTER TABLE [dbo].[AgentUserRegion] CHECK CONSTRAINT [FK_AgentUserRegion_Region]
GO
ALTER TABLE [dbo].[AgentUserTypeAgentPermission]  WITH CHECK ADD  CONSTRAINT [FK_AgentUserTypeAgentPermission_AgentPermission] FOREIGN KEY([PermissionId])
REFERENCES [dbo].[AgentPermission] ([PermissionId])
GO
ALTER TABLE [dbo].[AgentUserTypeAgentPermission] CHECK CONSTRAINT [FK_AgentUserTypeAgentPermission_AgentPermission]
GO
ALTER TABLE [dbo].[AgentUserTypeAgentPermission]  WITH CHECK ADD  CONSTRAINT [FK_AgentUserTypeAgentPermission_AgentUserType] FOREIGN KEY([TypeId])
REFERENCES [dbo].[AgentUserType] ([TypeId])
GO
ALTER TABLE [dbo].[AgentUserTypeAgentPermission] CHECK CONSTRAINT [FK_AgentUserTypeAgentPermission_AgentUserType]
GO
ALTER TABLE [dbo].[CampusJob]  WITH CHECK ADD  CONSTRAINT [FK_CampusJob_CampusJobCategory] FOREIGN KEY([CategoryId])
REFERENCES [dbo].[CampusJobCategory] ([CategoryId])
GO
ALTER TABLE [dbo].[CampusJob] CHECK CONSTRAINT [FK_CampusJob_CampusJobCategory]
GO
ALTER TABLE [dbo].[CampusJob]  WITH CHECK ADD  CONSTRAINT [FK_CampusJob_Company] FOREIGN KEY([CompanyId])
REFERENCES [dbo].[Company] ([CompanyId])
GO
ALTER TABLE [dbo].[CampusJob] CHECK CONSTRAINT [FK_CampusJob_Company]
GO
ALTER TABLE [dbo].[CampusJob]  WITH CHECK ADD  CONSTRAINT [FK_CampusJob_JobStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[JobStatus] ([StatusId])
GO
ALTER TABLE [dbo].[CampusJob] CHECK CONSTRAINT [FK_CampusJob_JobStatus]
GO
ALTER TABLE [dbo].[CampusJob]  WITH CHECK ADD  CONSTRAINT [FK_CampusJob_JobType] FOREIGN KEY([JobTypeId])
REFERENCES [dbo].[JobType] ([TypeId])
GO
ALTER TABLE [dbo].[CampusJob] CHECK CONSTRAINT [FK_CampusJob_JobType]
GO
ALTER TABLE [dbo].[CampusJob]  WITH CHECK ADD  CONSTRAINT [FK_CampusJob_Region] FOREIGN KEY([RegionId])
REFERENCES [dbo].[Region] ([RegionId])
GO
ALTER TABLE [dbo].[CampusJob] CHECK CONSTRAINT [FK_CampusJob_Region]
GO
ALTER TABLE [dbo].[CampusJob]  WITH CHECK ADD  CONSTRAINT [FK_CampusJob_School] FOREIGN KEY([SchoolId])
REFERENCES [dbo].[School] ([SchoolId])
GO
ALTER TABLE [dbo].[CampusJob] CHECK CONSTRAINT [FK_CampusJob_School]
GO
ALTER TABLE [dbo].[CampusJobApply]  WITH CHECK ADD  CONSTRAINT [FK_CampusJobApply_CampusJob] FOREIGN KEY([JobId])
REFERENCES [dbo].[CampusJob] ([JobId])
GO
ALTER TABLE [dbo].[CampusJobApply] CHECK CONSTRAINT [FK_CampusJobApply_CampusJob]
GO
ALTER TABLE [dbo].[CampusJobApply]  WITH CHECK ADD  CONSTRAINT [FK_CampusJobApply_JobStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[ApplyStatus] ([StatusId])
GO
ALTER TABLE [dbo].[CampusJobApply] CHECK CONSTRAINT [FK_CampusJobApply_JobStatus]
GO
ALTER TABLE [dbo].[CampusJobApply]  WITH CHECK ADD  CONSTRAINT [FK_CampusJobApply_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[CampusJobApply] CHECK CONSTRAINT [FK_CampusJobApply_User]
GO
ALTER TABLE [dbo].[CampusJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_CampusJobComplain_CampusJob] FOREIGN KEY([JobId])
REFERENCES [dbo].[CampusJob] ([JobId])
GO
ALTER TABLE [dbo].[CampusJobComplain] CHECK CONSTRAINT [FK_CampusJobComplain_CampusJob]
GO
ALTER TABLE [dbo].[CampusJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_CampusJobComplain_ComplainStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[ComplainStatus] ([StatusId])
GO
ALTER TABLE [dbo].[CampusJobComplain] CHECK CONSTRAINT [FK_CampusJobComplain_ComplainStatus]
GO
ALTER TABLE [dbo].[CampusJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_CampusJobComplain_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[CampusJobComplain] CHECK CONSTRAINT [FK_CampusJobComplain_User]
GO
ALTER TABLE [dbo].[CompanyCashFlow]  WITH CHECK ADD  CONSTRAINT [FK_CompanyCashFlow_Company] FOREIGN KEY([CompanyId])
REFERENCES [dbo].[Company] ([CompanyId])
GO
ALTER TABLE [dbo].[CompanyCashFlow] CHECK CONSTRAINT [FK_CompanyCashFlow_Company]
GO
ALTER TABLE [dbo].[CompanyCashFlow]  WITH CHECK ADD  CONSTRAINT [FK_CompanyCashFlow_CompanyCashFlowType] FOREIGN KEY([FlowTypeId])
REFERENCES [dbo].[CompanyCashFlowType] ([TypeId])
GO
ALTER TABLE [dbo].[CompanyCashFlow] CHECK CONSTRAINT [FK_CompanyCashFlow_CompanyCashFlowType]
GO
ALTER TABLE [dbo].[CompanyCashIn]  WITH CHECK ADD  CONSTRAINT [FK_CompanyTopUp_Company] FOREIGN KEY([CompanyId])
REFERENCES [dbo].[Company] ([CompanyId])
GO
ALTER TABLE [dbo].[CompanyCashIn] CHECK CONSTRAINT [FK_CompanyTopUp_Company]
GO
ALTER TABLE [dbo].[CompanyLogon]  WITH CHECK ADD  CONSTRAINT [FK_CompanyLogon_Company] FOREIGN KEY([CompanyId])
REFERENCES [dbo].[Company] ([CompanyId])
GO
ALTER TABLE [dbo].[CompanyLogon] CHECK CONSTRAINT [FK_CompanyLogon_Company]
GO
ALTER TABLE [dbo].[InternJob]  WITH CHECK ADD  CONSTRAINT [FK_InternJob_Company] FOREIGN KEY([CompanyId])
REFERENCES [dbo].[Company] ([CompanyId])
GO
ALTER TABLE [dbo].[InternJob] CHECK CONSTRAINT [FK_InternJob_Company]
GO
ALTER TABLE [dbo].[InternJob]  WITH CHECK ADD  CONSTRAINT [FK_InternJob_InternJobCategory] FOREIGN KEY([CategoryId])
REFERENCES [dbo].[InternJobCategory] ([CategoryId])
GO
ALTER TABLE [dbo].[InternJob] CHECK CONSTRAINT [FK_InternJob_InternJobCategory]
GO
ALTER TABLE [dbo].[InternJob]  WITH CHECK ADD  CONSTRAINT [FK_InternJob_JobStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[JobStatus] ([StatusId])
GO
ALTER TABLE [dbo].[InternJob] CHECK CONSTRAINT [FK_InternJob_JobStatus]
GO
ALTER TABLE [dbo].[InternJob]  WITH CHECK ADD  CONSTRAINT [FK_InternJob_JobType] FOREIGN KEY([JobTypeId])
REFERENCES [dbo].[JobType] ([TypeId])
GO
ALTER TABLE [dbo].[InternJob] CHECK CONSTRAINT [FK_InternJob_JobType]
GO
ALTER TABLE [dbo].[InternJob]  WITH CHECK ADD  CONSTRAINT [FK_InternJob_Region] FOREIGN KEY([RegionId])
REFERENCES [dbo].[Region] ([RegionId])
GO
ALTER TABLE [dbo].[InternJob] CHECK CONSTRAINT [FK_InternJob_Region]
GO
ALTER TABLE [dbo].[InternJob]  WITH CHECK ADD  CONSTRAINT [FK_InternJob_WageUnit] FOREIGN KEY([WageUnitId])
REFERENCES [dbo].[WageUnit] ([UnitId])
GO
ALTER TABLE [dbo].[InternJob] CHECK CONSTRAINT [FK_InternJob_WageUnit]
GO
ALTER TABLE [dbo].[InternJobApply]  WITH CHECK ADD  CONSTRAINT [FK_InterJobApply_InternJob] FOREIGN KEY([JobId])
REFERENCES [dbo].[InternJob] ([JobId])
GO
ALTER TABLE [dbo].[InternJobApply] CHECK CONSTRAINT [FK_InterJobApply_InternJob]
GO
ALTER TABLE [dbo].[InternJobApply]  WITH CHECK ADD  CONSTRAINT [FK_InterJobApply_JobStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[ApplyStatus] ([StatusId])
GO
ALTER TABLE [dbo].[InternJobApply] CHECK CONSTRAINT [FK_InterJobApply_JobStatus]
GO
ALTER TABLE [dbo].[InternJobApply]  WITH CHECK ADD  CONSTRAINT [FK_InterJobApply_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[InternJobApply] CHECK CONSTRAINT [FK_InterJobApply_User]
GO
ALTER TABLE [dbo].[InternJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_InternJobComplain_ComplainStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[ComplainStatus] ([StatusId])
GO
ALTER TABLE [dbo].[InternJobComplain] CHECK CONSTRAINT [FK_InternJobComplain_ComplainStatus]
GO
ALTER TABLE [dbo].[InternJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_InternJobComplain_InternJob] FOREIGN KEY([JobId])
REFERENCES [dbo].[InternJob] ([JobId])
GO
ALTER TABLE [dbo].[InternJobComplain] CHECK CONSTRAINT [FK_InternJobComplain_InternJob]
GO
ALTER TABLE [dbo].[InternJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_InternJobComplain_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[InternJobComplain] CHECK CONSTRAINT [FK_InternJobComplain_User]
GO
ALTER TABLE [dbo].[MarketerRegister]  WITH CHECK ADD  CONSTRAINT [FK_MarketerRegister_Marketer] FOREIGN KEY([MarketerId])
REFERENCES [dbo].[Marketer] ([MarketerId])
GO
ALTER TABLE [dbo].[MarketerRegister] CHECK CONSTRAINT [FK_MarketerRegister_Marketer]
GO
ALTER TABLE [dbo].[NoticeBoard]  WITH CHECK ADD  CONSTRAINT [FK_NoticeBoard_Admin] FOREIGN KEY([AdminId])
REFERENCES [dbo].[Admin] ([AdminId])
GO
ALTER TABLE [dbo].[NoticeBoard] CHECK CONSTRAINT [FK_NoticeBoard_Admin]
GO
ALTER TABLE [dbo].[OrderLine]  WITH CHECK ADD  CONSTRAINT [FK_OrderLine_Order] FOREIGN KEY([OrderId])
REFERENCES [dbo].[Order] ([OrderId])
GO
ALTER TABLE [dbo].[OrderLine] CHECK CONSTRAINT [FK_OrderLine_Order]
GO
ALTER TABLE [dbo].[PromoterTeam]  WITH CHECK ADD  CONSTRAINT [FK_PromoterTeam_Promoter] FOREIGN KEY([PromoterId])
REFERENCES [dbo].[Promoter] ([PromoterId])
GO
ALTER TABLE [dbo].[PromoterTeam] CHECK CONSTRAINT [FK_PromoterTeam_Promoter]
GO
ALTER TABLE [dbo].[RolePermission]  WITH CHECK ADD  CONSTRAINT [FK_RolePermission_PermissionId] FOREIGN KEY([PermissionId])
REFERENCES [dbo].[Permission] ([PermissionId])
GO
ALTER TABLE [dbo].[RolePermission] CHECK CONSTRAINT [FK_RolePermission_PermissionId]
GO
ALTER TABLE [dbo].[RolePermission]  WITH CHECK ADD  CONSTRAINT [FK_RolePermission_Role] FOREIGN KEY([RoleId])
REFERENCES [dbo].[Role] ([RoleId])
GO
ALTER TABLE [dbo].[RolePermission] CHECK CONSTRAINT [FK_RolePermission_Role]
GO
ALTER TABLE [dbo].[ServiceJob]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJob_Company] FOREIGN KEY([CompanyId])
REFERENCES [dbo].[Company] ([CompanyId])
GO
ALTER TABLE [dbo].[ServiceJob] CHECK CONSTRAINT [FK_ServiceJob_Company]
GO
ALTER TABLE [dbo].[ServiceJob]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJob_JobStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[JobStatus] ([StatusId])
GO
ALTER TABLE [dbo].[ServiceJob] CHECK CONSTRAINT [FK_ServiceJob_JobStatus]
GO
ALTER TABLE [dbo].[ServiceJob]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJob_JobType] FOREIGN KEY([JobTypeId])
REFERENCES [dbo].[JobType] ([TypeId])
GO
ALTER TABLE [dbo].[ServiceJob] CHECK CONSTRAINT [FK_ServiceJob_JobType]
GO
ALTER TABLE [dbo].[ServiceJob]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJob_Region] FOREIGN KEY([RegionId])
REFERENCES [dbo].[Region] ([RegionId])
GO
ALTER TABLE [dbo].[ServiceJob] CHECK CONSTRAINT [FK_ServiceJob_Region]
GO
ALTER TABLE [dbo].[ServiceJob]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJob_ServiceJobCategory] FOREIGN KEY([CategoryId])
REFERENCES [dbo].[ServiceJobCategory] ([CategoryId])
GO
ALTER TABLE [dbo].[ServiceJob] CHECK CONSTRAINT [FK_ServiceJob_ServiceJobCategory]
GO
ALTER TABLE [dbo].[ServiceJob]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJob_ServiceJobPosition] FOREIGN KEY([PositionId])
REFERENCES [dbo].[ServiceJobPosition] ([PositionId])
GO
ALTER TABLE [dbo].[ServiceJob] CHECK CONSTRAINT [FK_ServiceJob_ServiceJobPosition]
GO
ALTER TABLE [dbo].[ServiceJob]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJob_Term] FOREIGN KEY([TermId])
REFERENCES [dbo].[Term] ([TermId])
GO
ALTER TABLE [dbo].[ServiceJob] CHECK CONSTRAINT [FK_ServiceJob_Term]
GO
ALTER TABLE [dbo].[ServiceJob]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJob_WageUnit] FOREIGN KEY([WageUnitId])
REFERENCES [dbo].[WageUnit] ([UnitId])
GO
ALTER TABLE [dbo].[ServiceJob] CHECK CONSTRAINT [FK_ServiceJob_WageUnit]
GO
ALTER TABLE [dbo].[ServiceJobApply]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJobApply_JobStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[ApplyStatus] ([StatusId])
GO
ALTER TABLE [dbo].[ServiceJobApply] CHECK CONSTRAINT [FK_ServiceJobApply_JobStatus]
GO
ALTER TABLE [dbo].[ServiceJobApply]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJobApply_ServiceJob] FOREIGN KEY([JobId])
REFERENCES [dbo].[ServiceJob] ([JobId])
GO
ALTER TABLE [dbo].[ServiceJobApply] CHECK CONSTRAINT [FK_ServiceJobApply_ServiceJob]
GO
ALTER TABLE [dbo].[ServiceJobApply]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJobApply_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[ServiceJobApply] CHECK CONSTRAINT [FK_ServiceJobApply_User]
GO
ALTER TABLE [dbo].[ServiceJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJobComplain_ComplainStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[ComplainStatus] ([StatusId])
GO
ALTER TABLE [dbo].[ServiceJobComplain] CHECK CONSTRAINT [FK_ServiceJobComplain_ComplainStatus]
GO
ALTER TABLE [dbo].[ServiceJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJobComplain_ServiceJob] FOREIGN KEY([JobId])
REFERENCES [dbo].[ServiceJob] ([JobId])
GO
ALTER TABLE [dbo].[ServiceJobComplain] CHECK CONSTRAINT [FK_ServiceJobComplain_ServiceJob]
GO
ALTER TABLE [dbo].[ServiceJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_ServiceJobComplain_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[ServiceJobComplain] CHECK CONSTRAINT [FK_ServiceJobComplain_User]
GO
ALTER TABLE [dbo].[Trade]  WITH CHECK ADD  CONSTRAINT [FK_Trade_Order] FOREIGN KEY([OrderId])
REFERENCES [dbo].[Order] ([OrderId])
GO
ALTER TABLE [dbo].[Trade] CHECK CONSTRAINT [FK_Trade_Order]
GO
ALTER TABLE [dbo].[TutorJob]  WITH CHECK ADD  CONSTRAINT [FK_TutorJob_Company] FOREIGN KEY([CompanyId])
REFERENCES [dbo].[Company] ([CompanyId])
GO
ALTER TABLE [dbo].[TutorJob] CHECK CONSTRAINT [FK_TutorJob_Company]
GO
ALTER TABLE [dbo].[TutorJob]  WITH CHECK ADD  CONSTRAINT [FK_TutorJob_JobStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[JobStatus] ([StatusId])
GO
ALTER TABLE [dbo].[TutorJob] CHECK CONSTRAINT [FK_TutorJob_JobStatus]
GO
ALTER TABLE [dbo].[TutorJob]  WITH CHECK ADD  CONSTRAINT [FK_TutorJob_JobType] FOREIGN KEY([JobTypeId])
REFERENCES [dbo].[JobType] ([TypeId])
GO
ALTER TABLE [dbo].[TutorJob] CHECK CONSTRAINT [FK_TutorJob_JobType]
GO
ALTER TABLE [dbo].[TutorJob]  WITH CHECK ADD  CONSTRAINT [FK_TutorJob_Region] FOREIGN KEY([RegionId])
REFERENCES [dbo].[Region] ([RegionId])
GO
ALTER TABLE [dbo].[TutorJob] CHECK CONSTRAINT [FK_TutorJob_Region]
GO
ALTER TABLE [dbo].[TutorJob]  WITH CHECK ADD  CONSTRAINT [FK_TutorJob_Term] FOREIGN KEY([TermId])
REFERENCES [dbo].[Term] ([TermId])
GO
ALTER TABLE [dbo].[TutorJob] CHECK CONSTRAINT [FK_TutorJob_Term]
GO
ALTER TABLE [dbo].[TutorJob]  WITH CHECK ADD  CONSTRAINT [FK_TutorJob_TutorJobLevel] FOREIGN KEY([LevelId])
REFERENCES [dbo].[TutorJobLevel] ([LevelId])
GO
ALTER TABLE [dbo].[TutorJob] CHECK CONSTRAINT [FK_TutorJob_TutorJobLevel]
GO
ALTER TABLE [dbo].[TutorJob]  WITH CHECK ADD  CONSTRAINT [FK_TutorJob_TutorJobPaper] FOREIGN KEY([PaperId])
REFERENCES [dbo].[TutorJobPaper] ([PaperId])
GO
ALTER TABLE [dbo].[TutorJob] CHECK CONSTRAINT [FK_TutorJob_TutorJobPaper]
GO
ALTER TABLE [dbo].[TutorJob]  WITH CHECK ADD  CONSTRAINT [FK_TutorJob_WageUnit] FOREIGN KEY([WageUnitId])
REFERENCES [dbo].[WageUnit] ([UnitId])
GO
ALTER TABLE [dbo].[TutorJob] CHECK CONSTRAINT [FK_TutorJob_WageUnit]
GO
ALTER TABLE [dbo].[TutorJobApply]  WITH CHECK ADD  CONSTRAINT [FK_TutorJobApply_JobStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[ApplyStatus] ([StatusId])
GO
ALTER TABLE [dbo].[TutorJobApply] CHECK CONSTRAINT [FK_TutorJobApply_JobStatus]
GO
ALTER TABLE [dbo].[TutorJobApply]  WITH CHECK ADD  CONSTRAINT [FK_TutorJobApply_TutorJob] FOREIGN KEY([JobId])
REFERENCES [dbo].[TutorJob] ([JobId])
GO
ALTER TABLE [dbo].[TutorJobApply] CHECK CONSTRAINT [FK_TutorJobApply_TutorJob]
GO
ALTER TABLE [dbo].[TutorJobApply]  WITH CHECK ADD  CONSTRAINT [FK_TutorJobApply_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[TutorJobApply] CHECK CONSTRAINT [FK_TutorJobApply_User]
GO
ALTER TABLE [dbo].[TutorJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_TutorJobComplain_ComplainStatus] FOREIGN KEY([StatusId])
REFERENCES [dbo].[ComplainStatus] ([StatusId])
GO
ALTER TABLE [dbo].[TutorJobComplain] CHECK CONSTRAINT [FK_TutorJobComplain_ComplainStatus]
GO
ALTER TABLE [dbo].[TutorJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_TutorJobComplain_TutorJob] FOREIGN KEY([JobId])
REFERENCES [dbo].[TutorJob] ([JobId])
GO
ALTER TABLE [dbo].[TutorJobComplain] CHECK CONSTRAINT [FK_TutorJobComplain_TutorJob]
GO
ALTER TABLE [dbo].[TutorJobComplain]  WITH CHECK ADD  CONSTRAINT [FK_TutorJobComplain_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[TutorJobComplain] CHECK CONSTRAINT [FK_TutorJobComplain_User]
GO
ALTER TABLE [dbo].[User]  WITH CHECK ADD  CONSTRAINT [FK_User_Region] FOREIGN KEY([RegionId])
REFERENCES [dbo].[Region] ([RegionId])
GO
ALTER TABLE [dbo].[User] CHECK CONSTRAINT [FK_User_Region]
GO
ALTER TABLE [dbo].[User]  WITH CHECK ADD  CONSTRAINT [FK_User_School] FOREIGN KEY([SchoolId])
REFERENCES [dbo].[School] ([SchoolId])
GO
ALTER TABLE [dbo].[User] CHECK CONSTRAINT [FK_User_School]
GO
ALTER TABLE [dbo].[UserAccount]  WITH CHECK ADD  CONSTRAINT [FK_UserBank_Bank] FOREIGN KEY([BankId])
REFERENCES [dbo].[Bank] ([BankId])
GO
ALTER TABLE [dbo].[UserAccount] CHECK CONSTRAINT [FK_UserBank_Bank]
GO
ALTER TABLE [dbo].[UserAccount]  WITH CHECK ADD  CONSTRAINT [FK_UserBank_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[UserAccount] CHECK CONSTRAINT [FK_UserBank_User]
GO
ALTER TABLE [dbo].[UserCashIn]  WITH CHECK ADD  CONSTRAINT [FK_UserCashIn_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[UserCashIn] CHECK CONSTRAINT [FK_UserCashIn_User]
GO
ALTER TABLE [dbo].[UserCashOut]  WITH CHECK ADD  CONSTRAINT [FK_UserCashOut_CashOutStatus1] FOREIGN KEY([StatusId])
REFERENCES [dbo].[CashOutStatus] ([StatusId])
GO
ALTER TABLE [dbo].[UserCashOut] CHECK CONSTRAINT [FK_UserCashOut_CashOutStatus1]
GO
ALTER TABLE [dbo].[UserCashOut]  WITH CHECK ADD  CONSTRAINT [FK_UserCashOut_User1] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[UserCashOut] CHECK CONSTRAINT [FK_UserCashOut_User1]
GO
ALTER TABLE [dbo].[UserCashOut]  WITH CHECK ADD  CONSTRAINT [FK_UserCashOut_UserAccount] FOREIGN KEY([AccountId])
REFERENCES [dbo].[UserAccount] ([AccountId])
GO
ALTER TABLE [dbo].[UserCashOut] CHECK CONSTRAINT [FK_UserCashOut_UserAccount]
GO
ALTER TABLE [dbo].[UserLogon]  WITH CHECK ADD  CONSTRAINT [FK_UserLogon_User] FOREIGN KEY([UserId])
REFERENCES [dbo].[User] ([UserId])
GO
ALTER TABLE [dbo].[UserLogon] CHECK CONSTRAINT [FK_UserLogon_User]
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AdminLogon', @level2type=N'COLUMN',@level2name=N'LogonId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AdminLogon', @level2type=N'COLUMN',@level2name=N'AdminId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录令牌' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AdminLogon', @level2type=N'COLUMN',@level2name=N'Token'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'令牌有效期' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AdminLogon', @level2type=N'COLUMN',@level2name=N'TokenExpiryDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录IP地址' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AdminLogon', @level2type=N'COLUMN',@level2name=N'IPAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AdminLogon', @level2type=N'COLUMN',@level2name=N'DateLogon'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'权限唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentPermission', @level2type=N'COLUMN',@level2name=N'PermissionId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'权限名称' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentPermission', @level2type=N'COLUMN',@level2name=N'Name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'权限描述' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentPermission', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录创立时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentPermission', @level2type=N'COLUMN',@level2name=N'DateCreated'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录任意字段最后修改时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentPermission', @level2type=N'COLUMN',@level2name=N'DateModified'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'角色唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentRole', @level2type=N'COLUMN',@level2name=N'RoleId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'角色名称' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentRole', @level2type=N'COLUMN',@level2name=N'Name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'父类角色ID，如果当前角色为跟角色，则父类角色值为NULL' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentRole', @level2type=N'COLUMN',@level2name=N'ParentRoleId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'树形结构级别，数根级别为1' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentRole', @level2type=N'COLUMN',@level2name=N'Indentation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'同级别排列顺序' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentRole', @level2type=N'COLUMN',@level2name=N'Sequence'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录创立时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentRole', @level2type=N'COLUMN',@level2name=N'DateCreated'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录任意字段最后修改时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentRole', @level2type=N'COLUMN',@level2name=N'DateModified'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'角色唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentRoleAgentPermission', @level2type=N'COLUMN',@level2name=N'RoleId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'权限唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentRoleAgentPermission', @level2type=N'COLUMN',@level2name=N'PermissionId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录创立时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentRoleAgentPermission', @level2type=N'COLUMN',@level2name=N'DateCreated'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentUserLogon', @level2type=N'COLUMN',@level2name=N'LogonId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentUserLogon', @level2type=N'COLUMN',@level2name=N'UserId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录令牌' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentUserLogon', @level2type=N'COLUMN',@level2name=N'Token'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'令牌有效期' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentUserLogon', @level2type=N'COLUMN',@level2name=N'TokenExpiryDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录IP地址' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentUserLogon', @level2type=N'COLUMN',@level2name=N'IPAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AgentUserLogon', @level2type=N'COLUMN',@level2name=N'DateLogon'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Company', @level2type=N'COLUMN',@level2name=N'CompanyId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'电话' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Company', @level2type=N'COLUMN',@level2name=N'Mobile'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户昵称' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Company', @level2type=N'COLUMN',@level2name=N'FullName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户密码' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Company', @level2type=N'COLUMN',@level2name=N'Password'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用以密码加密部分钥匙' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Company', @level2type=N'COLUMN',@level2name=N'Salt'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户密码' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Company', @level2type=N'COLUMN',@level2name=N'PaymentPassword'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用以密码加密部分钥匙' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Company', @level2type=N'COLUMN',@level2name=N'PaymentSalt'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'头像，存储图片路径' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Company', @level2type=N'COLUMN',@level2name=N'LicensePhoto'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录创建时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Company', @level2type=N'COLUMN',@level2name=N'DateCreated'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录最后任意字段修改时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Company', @level2type=N'COLUMN',@level2name=N'DateModified'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CompanyLogon', @level2type=N'COLUMN',@level2name=N'LogonId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CompanyLogon', @level2type=N'COLUMN',@level2name=N'CompanyId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录令牌' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CompanyLogon', @level2type=N'COLUMN',@level2name=N'Token'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'令牌有效期' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CompanyLogon', @level2type=N'COLUMN',@level2name=N'TokenExpiryDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录IP地址' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CompanyLogon', @level2type=N'COLUMN',@level2name=N'IPAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CompanyLogon', @level2type=N'COLUMN',@level2name=N'DateLogon'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'权限唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Permission', @level2type=N'COLUMN',@level2name=N'PermissionId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'权限名称' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Permission', @level2type=N'COLUMN',@level2name=N'Name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'权限描述' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Permission', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录创立时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Permission', @level2type=N'COLUMN',@level2name=N'DateCreated'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录任意字段最后修改时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Permission', @level2type=N'COLUMN',@level2name=N'DateModified'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PromoterLogon', @level2type=N'COLUMN',@level2name=N'LogonId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PromoterLogon', @level2type=N'COLUMN',@level2name=N'PromoterId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录令牌' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PromoterLogon', @level2type=N'COLUMN',@level2name=N'Token'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'令牌有效期' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PromoterLogon', @level2type=N'COLUMN',@level2name=N'TokenExpiryDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录IP地址' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PromoterLogon', @level2type=N'COLUMN',@level2name=N'IPAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PromoterLogon', @level2type=N'COLUMN',@level2name=N'DateLogon'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'地区唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Region', @level2type=N'COLUMN',@level2name=N'RegionId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'地区名' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Region', @level2type=N'COLUMN',@level2name=N'Name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'父类地区，如果父类地区为一级，则该值为NULL' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Region', @level2type=N'COLUMN',@level2name=N'ParentRegionId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'树形结构级别' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Region', @level2type=N'COLUMN',@level2name=N'Indentation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'同级别地区显示顺序' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Region', @level2type=N'COLUMN',@level2name=N'Sequence'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录创建时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Region', @level2type=N'COLUMN',@level2name=N'DateCreated'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录任意字段最后修改时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Region', @level2type=N'COLUMN',@level2name=N'DateModified'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'角色唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Role', @level2type=N'COLUMN',@level2name=N'RoleId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'角色名称' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Role', @level2type=N'COLUMN',@level2name=N'Name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'父类角色ID，如果当前角色为跟角色，则父类角色值为NULL' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Role', @level2type=N'COLUMN',@level2name=N'ParentRoleId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'树形结构级别，数根级别为1' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Role', @level2type=N'COLUMN',@level2name=N'Indentation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'同级别排列顺序' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Role', @level2type=N'COLUMN',@level2name=N'Sequence'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录创立时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Role', @level2type=N'COLUMN',@level2name=N'DateCreated'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录任意字段最后修改时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Role', @level2type=N'COLUMN',@level2name=N'DateModified'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'角色唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RolePermission', @level2type=N'COLUMN',@level2name=N'RoleId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'权限唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RolePermission', @level2type=N'COLUMN',@level2name=N'PermissionId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录创立时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RolePermission', @level2type=N'COLUMN',@level2name=N'DateCreated'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'User', @level2type=N'COLUMN',@level2name=N'UserId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'电话' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'User', @level2type=N'COLUMN',@level2name=N'Mobile'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户昵称' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'User', @level2type=N'COLUMN',@level2name=N'FullName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户密码' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'User', @level2type=N'COLUMN',@level2name=N'Password'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用以密码加密部分钥匙' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'User', @level2type=N'COLUMN',@level2name=N'Salt'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'生日' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'User', @level2type=N'COLUMN',@level2name=N'DateofBirth'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'性别' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'User', @level2type=N'COLUMN',@level2name=N'Gender'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'所在地区' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'User', @level2type=N'COLUMN',@level2name=N'RegionId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'头像，存储图片路径' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'User', @level2type=N'COLUMN',@level2name=N'ProfilePhoto'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'QQ号码' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'User', @level2type=N'COLUMN',@level2name=N'QQ'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录创建时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'User', @level2type=N'COLUMN',@level2name=N'DateCreated'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'该条记录最后任意字段修改时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'User', @level2type=N'COLUMN',@level2name=N'DateModified'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserLogon', @level2type=N'COLUMN',@level2name=N'LogonId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserLogon', @level2type=N'COLUMN',@level2name=N'UserId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录令牌' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserLogon', @level2type=N'COLUMN',@level2name=N'Token'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'令牌有效期' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserLogon', @level2type=N'COLUMN',@level2name=N'TokenExpiryDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录IP地址' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserLogon', @level2type=N'COLUMN',@level2name=N'IPAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserLogon', @level2type=N'COLUMN',@level2name=N'DateLogon'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WebCompanyLogon', @level2type=N'COLUMN',@level2name=N'LogonId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WebCompanyLogon', @level2type=N'COLUMN',@level2name=N'CompanyId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录令牌' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WebCompanyLogon', @level2type=N'COLUMN',@level2name=N'Token'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'令牌有效期' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WebCompanyLogon', @level2type=N'COLUMN',@level2name=N'TokenExpiryDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录IP地址' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WebCompanyLogon', @level2type=N'COLUMN',@level2name=N'IPAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WebCompanyLogon', @level2type=N'COLUMN',@level2name=N'DateLogon'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WebUserLogon', @level2type=N'COLUMN',@level2name=N'LogonId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'用户唯一ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WebUserLogon', @level2type=N'COLUMN',@level2name=N'UserId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录令牌' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WebUserLogon', @level2type=N'COLUMN',@level2name=N'Token'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'令牌有效期' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WebUserLogon', @level2type=N'COLUMN',@level2name=N'TokenExpiryDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录IP地址' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WebUserLogon', @level2type=N'COLUMN',@level2name=N'IPAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'登录时间' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'WebUserLogon', @level2type=N'COLUMN',@level2name=N'DateLogon'
GO
